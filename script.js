// --- START OF REFINED SCRIPT ---
(function() { // IIFE to encapsulate scope
    'use strict'; // Enable strict mode

    document.addEventListener('DOMContentLoaded', () => {
        // --- DOM Elements ---
        const DOMElements = {
            htmlElement: document.documentElement,
            butterAmountInput: document.getElementById('butter-amount'),
            butterUnitSelect: document.getElementById('butter-unit'),
            startExperimentBtn: document.getElementById('start-experiment-btn'),
            butterWarning: document.getElementById('butter-warning'),
            cookieSelectionSection: document.getElementById('cookie-selection-section'),
            recipeDisplaySection: document.getElementById('recipe-display-section'),
            recipeContent: document.getElementById('recipe-content'),
            cookieOptions: document.querySelectorAll('.cookie-option'), // Keep as NodeList for iteration
            cookieOptionsContainer: document.getElementById('cookie-options-container'), // Added for delegation
            stuffedEasterEgg: document.getElementById('stuffed-easter-egg'),
            chocolateRecommendation: document.getElementById('chocolate-recommendation'),
            langToggleButton: document.getElementById('lang-toggle'),
            unitToggleButton: document.getElementById('unit-toggle')
        };

        // --- State Variables ---
        const state = {
            currentLanguage: 'en', // Default language
            currentUnitSystemEN: 'metric', // 'metric' or 'imperial' (Only for EN display)
            baseButterGrams: 0,
            selectedCookieType: null
        };

        // --- Configuration Constants ---
        const CONFIG = {
            GRAMS_PER_CUP_BUTTER: 226.8,
            GRAMS_PER_CUP_FLOUR: 125,
            GRAMS_PER_CUP_GRAN_SUGAR: 200,
            GRAMS_PER_CUP_BROWN_SUGAR: 213, // Packed
            GRAMS_PER_TSP_SALT: 6,
            GRAMS_PER_TSP_BAKING_SODA: 4.8,
            GRAMS_PER_TSP_BAKING_POWDER: 4,
            GRAMS_PER_LARGE_EGG: 50,
            GRAMS_PER_TSP_VANILLA: 4.2,
            GRAMS_PER_CUP_CHOC_CHIPS: 170,
            GRAMS_PER_TBSP_MILK_POWDER: 7,
            MIN_BUTTER_GRAMS: 100, // Minimum required butter
            DEFAULT_UNIT_EN: 'metric', // Default unit system for English
        };

        // --- Base Recipes & Language Strings - GEN Z TAKEOVER ---
        const baseRecipes = {
             classic: {
                baseButter: 284, yieldPerBase: 30,
                ingredients: { granulatedSugar: [200, 'sugar'], lightBrownSugar: [200, 'sugar'], largeEggs: [100, 'egg'], vanillaExtract: [8.4, 'vanilla'], allPurposeFlour: [420, 'flour'], tableSalt: [6, 'salt'], bakingPowder: [4, 'bakingPowder'], bakingSoda: [2.4, 'bakingSoda'], chocolateChips: [454, 'chocolate'], prepWater: [9.4, 'water'] },
                notes: 'classicNotes', prepTech: ['brownButter', 'hydrateButter', 'chillButterClassicThick'], steps: 'classicSteps'
             },
            thick: {
                 baseButter: 284, yieldPerBase: 10, cookieSizeGrams: 140,
                ingredients: { granulatedSugar: [100, 'sugar'], lightBrownSugar: [200, 'sugar'], toastedMilkPowder: [15, 'milkPowder'], largeEggs: [100, 'egg'], vanillaExtract: [8.4, 'vanilla'], allPurposeFlour: [420, 'flour'], tableSalt: [6, 'salt'], bakingPowder: [5, 'bakingPowder'], chocolateChips: [567, 'chocolate'], prepWater: [9.4, 'water'] },
                 notes: 'thickNotes', prepTech: ['brownButter', 'hydrateButter', 'chillButterClassicThick', 'toastMilkPowder'], steps: 'thickSteps'
            },
            thin: {
                baseButter: 284, yieldPerBase: 42,
                ingredients: { granulatedSugar: [300, 'sugar'], lightBrownSugar: [200, 'sugar'], largeEggs: [100, 'egg'], vanillaExtract: [8.4, 'vanilla'], allPurposeFlour: [420, 'flour'], tableSalt: [6, 'salt'], bakingSoda: [7.2, 'bakingSoda'], chocolateChips: [340, 'chocolate'], prepWater: [9.4, 'water'] },
                notes: 'thinNotes', prepTech: ['brownButter', 'hydrateButter', 'chillButterThin'], steps: 'thinSteps'
            }
        };

        const langStrings = {
           en: {
                 // Toggles & Units
                 toggleArabic: 'ÿπÿ±ÿ®Ÿä version pls',
                 toggleEnglish: 'Back to English ig',
                 unitMetric: 'Metric (grams, the one that makes sense) ü§ì',
                 unitImperial: 'Imperial (cups?? üóΩü¶Ö wtf is a cup)',
                 unitGrams: 'grams (for the ‚ú®precise‚ú® ones)', // Used in AR input select
                 cups: 'cups (for the ‚ú®chaotic‚ú® ones)', // Used in AR input select & display
                 // Butter Input
                 butterVarTitle: "Okay STEP 1: Butter Business üßà SPILL",
                 butterVarDesc: "Alright team, gather 'round. Real experiments need... like... numbers. How much unsalted butter we throwin' into this delicious void? ü§î Spill it.",
                 grams: 'grams',
                 //cups: 'cups', // Defined above
                 butterWarning: "bruh. üíÄ enter a real amount. Minimum 100g or like, half a cup. pls fix.",
                 beginExperiment: "LET'S COOK (metaphorically) üî•",
                 // Cookie Selection
                 phenotypeTitle: "Step 2: Choose Your Fighter‚Ñ¢ ü•äüç™",
                 phenotypeDesc: "Aight, what timeline are we manifesting? Pick your final cookie form:",
                 thinTitle: 'Crispy Snappy Bois‚Ñ¢ ‚ú®', thinDesc: 'Flat kings. Max C R O N C H. Spreads faster than my wifi signal.',
                 classicTitle: 'The OG Balanced Baddie üòé', classicDesc: 'That perfect chewy middle, crisp edge combo. The ppl pleaser fr.',
                 thickTitle: 'üëë THICCUMS Maximums üëë', thickDesc: 'Soft like a cloud made of dough. Obscenely decadent. Zero spacial awareness. Pure emotional support cookie.',
                 // Recipe Display
                 recipeTitle: '{cookieName}: The Deets‚Ñ¢ üëá',
                 prepTitle: 'Prep School: Nerd Sesh ü§ì‚öóÔ∏è',
                 ingredientsTitle: 'The Loot List üí∞ (What you need)',
                 approxYield: 'Makes roughly:',
                 cookies: 'cookies? maybe more? idk.',
                 cookie: 'sad singular cookie üßç',
                 largeCookies: 'absolute U N I T cookies üèãÔ∏è',
                 largeCookie: 'singular U N I T cookie üèãÔ∏è',
                 stepsTitle: 'The Actual Instructions (Try not to F*** it up üôè)',
                 proTipsTitle: 'Pro Gamer Moves / Brain Dump üß†üí•',
                 // Ingredient Names (Ensure keys match baseRecipes.ingredients keys)
                 unsaltedButter: 'Unsalted Butter (the bougie kind)',
                 granulatedSugar: 'White Sugar (the basic one)',
                 lightBrownSugar: 'Light Brown Sugar (squish it down, assert dominance)',
                 toastedMilkPowder: 'Toasted Milk Powder (if u wanna be ~extra~)',
                 largeEggs: 'Large Eggs (pretend they\'re room temp, even if they aren\'t ü§´)',
                 vanillaExtract: 'Vanilla Extract (smells good juice)',
                 allPurposeFlour: 'A.P. Flour (spoon it gently, no packing allowed üôÖ)',
                 tableSalt: 'Salt (essential flavor dust)',
                 bakingPowder: 'Baking Powder (check expiry? nahhh jk pls do)',
                 bakingSoda: 'Baking Soda (also check expiry?? maybe??)',
                 chocolateChips: 'Choc Chips/Chunks (Target Kualety MILK ftw, ignore other opinions)',
                 prepWater: 'Water or Milk (H‚ÇÇO for the dough-oüíß)',
                 // Prep Techniques
                 prepTechTitle_brownButter: 'How To: Brown Butter Like a Pro (aka Liquid Gold Factory) üèÜüè≠',
                 prepTechDesc_brownButter: `Maillard Reaction = fancy word for making butter taste NUTS (literally). üî•<br>1. Chop butter, chuck in light pan, medium heat. See foam? That's water peacing out ‚úåÔ∏è. Swirl pan like you're trying to hypnotize it.<br>2. Keep swirling/heating. Brown bits sink, smell AMAZING (like toasted nuts/caramel?). 5-10 mins maybe. Don't wander off!<br>3. YEET immediately (all the bits!) into a heatproof bowl. Stops cooking. Burnt butter = sad times. üò•`,
                 prepTechTitle_hydrateButter: 'Side Quest: Butter Hydration üí¶ (Optional!)',
                 prepTechDesc_hydrateButter: `Browning stole water (rude). Adding calculated amount back *after* browning *before* chilling MIGHT make it chewier? Idk, science! üß™ Stir gently. Worth a shot?`,
                 prepTechTitle_chillButterClassicThick: 'Freeze Frame! Chill For Creaming ü•∂üßä',
                 prepTechDesc_chillButterClassicThick: `Why? Melted butter fat = sad, floppy cookies. Chilling rebuilds the fat crystals so they can trap air with sugar (makes fluff!).<br>1. Let hot butter cool off a bit (5-10min). Let it see the world.<br>2. Fridge time! Till it's solid but still kinda squishy (like cold butter, duh). Not a rock. ~1-2 hrs. Aim for ~60-65¬∞F / 16-18¬∞C. CRITICAL for Classic/THICC boys.`,
                 prepTechTitle_chillButterThin: 'Coolio Mode: Chill For Reverse Creaming üòé‚ùÑÔ∏è',
                  prepTechDesc_chillButterThin: `Thin Bois need cool (not cold!) butter to coat flour first. Like putting on a fat raincoat.<br>1. Cool browned butter to room temp-ish. Quick fridge blast (~30-60 min) till just barely solid but easily chopped. ~65-68¬∞F / 18-20¬∞C is the vibe.`,
                 prepTechTitle_toastMilkPowder: 'Level Up! Toast Milk Powder (Extra Flavor DLC) ‚ú®üöÄ',
                 prepTechDesc_toastMilkPowder: `Deepens nutty/malty taste REAL fast. Another Maillard W. Big difference in THICC kings.<br>1. Spread powder THIN (parchment or DRY skillet).<br>2. Oven: ~250¬∞F/120¬∞C for 10-15 min, stir often. Skillet: Med-low heat, stir NON-STOP. Like, really, don't stop.<br>3. Watch it! Goes gold quick. Burning = game over. ‚ò†Ô∏è<br>4. Cool 100% before use. Don't be impatient.`,
                 // Notes & Steps
                 classicNotes: `üîë: 1:1 sugars, both powders, TRUE 5-MIN CREAMING (set a timer!). Butter temp (60-65¬∞F/16-18¬∞C) = Law. Chilling is not optional if u want the best texture, okay? Okay. ü§ù`,
                 classicSteps: `1. **PREP:** Dry stuff whisked. Sheets lined. Butter = chilly-pliable, eggs = room temp (or close enough lol).\n2. **CREAMING (The Main Event):** Beat the CHILLED butter & sugars med-high for a **full 5 minutes**. No cheating. Should look pale & fluffy af. Scrape scrape scrape.\n3. **WET STUFF:** Low speed. Eggs go in one @ a time. Mix *just* till combined. Overmixing = Sadge. Vanilla slips in last.\n4. **DRY STUFF:** Lowest speed. Slowly add flour mix. Stop AS SOON as it's *mostly* mixed. A few streaks are fine. Finish by hand maybe?\n5. **FOLD GENTLY:** Choc chips in. Pretend the dough has feelings.\n6. **CHILL (Pls do it):** Cover dough. Fridge 30-60 mins absolute MIN. Up to 48h for DEEP flavor development. Fat firms up, flour drinks.\n7. **SCOOP N' BAKE:** Oven 375¬∞F/190¬∞C. Scoop ~2 Tbsp balls. Space 'em out (they need personal space). Bake 10-12 min (edges golden, middle soft/puffy). Rotate pan once maybe.\n8. **COOLING ZONE:** üö® IMPORTANT: Let cookies sit ON the hot pan 5 mins!! They finish cooking. Then move to wire rack. Be patient ffs.`,
                 thickNotes: `THICC STRATEGY: We fight spread! üí™ How? HIGH brown sugar, NO soda, MANDATORY **L O N G** chill. Cream moderately (too much air = collapse). Toasted milk powder = *chef's kiss*. Embrace the gooey center. BIG COOKIE ENERGY ONLY. üëë`,
                 thickSteps: `1. **PREP:** Dry stuff whisked (incl. toasted milk powder). Sheets lined. Butter = chilly-pliable, eggs = pretending room temp.\n2. **CREAM (Moderate!):** Butter & sugars med speed ~2-3 min. Goal: combined & creamy. NOT light/fluffy like classic. Avoid too much air.\n3. **WET STUFF:** Low speed. Eggs 1 @ a time, just combined. Vanilla in.\n4. **DRY STUFF:** Low speed. Add flour in waves. Mix till *almost* combined. We hate gluten development here. üò§\n5. **FOLD (Maximum Effort):** Add ungodly amount of choc chips. Use hands/strong spatula to fold in the last bits of flour. Dough = DENSE AF. Do not overmix.\n6. **THE MANDATORY CHILL:** Shape into **LARGE** balls (like, 4-6oz / 113-170g). Roll TALL, not flat. Wrap TIGHT. Fridge MINIMUM 4 hours. Ideal = 12-72 hours. DO. NOT. FUDGE. THIS. STEP. PERIODT.\n7. **BAKE FROM COLD:** Oven 350¬∞F/180¬∞C. Put COLD dough balls far apart. DO NOT FLATTEN. Bake 18-25 min (depends on CHONK). Edges look set, center looks kinda underbaked/gooey AF (target ~175-185¬∞F / 79-85¬∞C if you have a thermometer like a nerd). Rotate pan once.\n8. **COOLING PROTOCOL (Handle w/ Care!):** üö® LET SIT ON PAN FOR 10-15 MINUTES. They are delicate little giants. Move GENTLY to rack. Best slightly warm. Molten core = pain.`,
                  thinNotes: `CRISPY CODE: Max Spread + Minimum Gluten = Win ‚ú®. HIGH white sugar, HIGH soda (alkaline = brown/spread). Reverse cream hack is key. **NO CHILL ZONE**. Bake till they shatter. Small scoops, wide berths. Trust the process. üôè`,
                  thinSteps: `1. **PREP:** Line sheets. Butter = cool but squishy (65-68¬∞F/18-20¬∞C), chopped small. Eggs = room temp-ish. Whisk eggs & vanilla in separate bowl like a pro.\n2. **REVERSE CREAM TIME:** In mixer: flour, sugars, salt, soda. Quick blend. Add cool butter bits. Mix LOW till looks like wet sand/crumbs (butter coating flour = goal achieved ‚úÖ). Takes a few mins.\n3. **WET MEETS DRY:** Low speed. Sloooowly drizzle in egg/vanilla mix. Mix JUST till it *barely* forms a dough. Might look crumbly first. OVERMIXING IS THE ENEMY.\n4. **FOLD (Bare Minimum):** Gently add fine chopped/MINI choc chips. Fewest strokes possible.\n5. **SCOOP & BAKE ASAP:** üí® NO CHILLING ALLOWED!! Oven 350¬∞F/175¬∞C. Scoop TINY (~1 Tbsp) balls. Leave TONS of space (3+ inches!!). They SPREAD like CRAZY.\n6. **BAKE TILL CRISPY:** Bake 12-16 min till FLAT and golden brown edge-to-center. Rotate pan once. Slightly overbaking is kinda the point here.\n7. **COOL FULLY FOR CRONCH:** On pan 5-10 min (wait till they're movable!). Then rack to cool 100%. CRISPINESS APPEARS AS THEY COOL. Magic! ü™Ñ`,
                 // Easter Egg & Recs
                 stuffedTitle: 'ü§´ WHOA Secret Level Alert! üéÆ‚ú®',
                 stuffedCongrats: "YOOOO, Absolute Unit chooser! üëë You get the DLC: ‚ú®Stuffing Mode Activated!‚ú® Let's get WEIRD.",
                 stuffedHowTo: 'Da Plan: Flatten chonky dough ball, poke a hole (gently!), spoon in ~1 tsp Nutella / THAT Pistachio Cream (u know the one üòâ), carefully wrap dough around, pinch seal, bake maybe +1-2 mins. Easy? Ish?',
                 pistachioTipTitle: 'Pistachio Spread: A Public Service Announcement üì¢ pistachio wars',
                 pistachioTipDesc: "Listen up: Most pistachio spread is watery trash üóëÔ∏è. Wanna taste pure, unadulterated pistachio bliss? LIQUID GOLD? ‚ú® It's 'ASM Foods Pistachio Cream'. Dangerously good. You've been warned. (Not sponsored... unless? üëÄ)",
                 pistachioTipLink: 'Linky link (Egypt)',
                 chocoTipTitle: 'Chocolate Chip Sermon üßê listen up heathens',
                 chocoTipDesc: "OKAY BUT FR. Most choc chips < mid. You want that melty, dreamy, makes-u-cry-happy vibe? Like Galaxy/Dairy Milk but *actually good* (& #BoycottFriendly ‚ù§Ô∏èüáµüá∏)? Find 'Target Kualety Dropsy' **MILK** Choc. The underrated GOAT. Secret tech unlocked.",
                 chocoTipLink: 'Find the supplier connect (FB Link)',
                 chocoTipMilk: 'üö®üö® Make SURE it\'s **MILK** choc. The dark one is... fine. But MILK is endgame. TRUST.',
                 // Conclusion
                 conclusionTitle: 'We Did It Joe! üéâ Mission Success? (You Decide lol)',
                 conclusionDesc: 'Hypothesis: Brown butter reigns supreme. Outcome: OBVIOUSLY YES. ‚úÖ Got pics? Share the proof on Insta or it didn\'t happen! Flex on \'em! üí™',
                 conclusionTag: 'Tag the creator maybe? ->',
                 conclusionGoForth: 'Go bake more chaos. You\'re the main character, act like it. üíÖ‚ú®',
                 footerText: 'Made w/ science‚Ñ¢, butterüßà, anxiety spiralsüò∞ & code magic‚ú®',
                 // Error Messages
                 error_recipe_display: 'Whoops! üòµ‚Äçüí´ Could not display recipe.',
                 error_recipe_calculation: 'Math is hard ü´† Failed to calculate recipe.',
                 error_missing_steps: 'Uh oh, steps went missing? Tell the dev maybe? ü§∑‚Äç‚ôÄÔ∏è',
                 error_try_again: 'Maybe try refreshing or selecting again?',
            },
             ar: { // ARABIC - Applying similar chaotic energy with Egyptian colloquialisms
                 toggleArabic: 'ŸÇŸÑÿ®Ÿë ÿπÿ±ÿ®Ÿä Ÿäÿß ÿ¥ÿ®ÿ≠',
                 toggleEnglish: 'ÿ±ÿ¨Ÿëÿπ ÿßŸÜÿ¨ŸÑŸäÿ≤Ÿä Ÿäÿ≥ÿ∑ÿß',
                 unitMetric: 'ŸÖÿ™ÿ±Ÿä (ÿ¨ÿ±ÿßŸÖÿßÿ™ ŸàÿßŸÑŸÑŸä ŸäŸÅŸáŸÖ ÿ®ŸÇŸâ) ü§ì', // Not used directly by toggle button in AR
                 unitImperial: 'ÿ•ŸÖÿ®ÿ±ŸäÿßŸÑŸä (ŸÉŸàÿ®ÿßŸäÿßÿ™ÿü ÿ•ŸäŸá ÿßŸÑŸáÿ®ŸÑ ÿØÿß üóΩü¶Ö)', // Not used directly by toggle button in AR
                 unitGrams: 'ÿ¨ÿ±ÿßŸÖÿßÿ™ (ŸÑŸÑŸÜÿßÿ≥ ÿßŸÑŸÄ‚ú®ÿØŸÇŸäŸÇÿ©‚ú®)', // For input select
                 cups: 'ŸÉŸàÿ®ÿßŸäÿßÿ™ (ŸÑŸÑŸÜÿßÿ≥ ÿßŸÑŸÄ‚ú®ÿπÿ¥Ÿàÿßÿ¶Ÿäÿ©‚ú®)', // For input select & display
                 // Butter Input
                 butterVarTitle: "ŸäŸÑÿß ÿ®ŸäŸÜÿß ÿßŸÑÿÆÿ∑Ÿàÿ© 1: ÿ≠Ÿàÿßÿ± ÿßŸÑÿ≤ÿ®ÿØÿ© üßà Ÿàÿ±ŸäŸÜŸä ÿßŸÑŸÑŸä ÿπŸÜÿØŸÉ",
                 butterVarDesc: "ÿ™ŸÖÿßŸÖ Ÿäÿß ÿ¨ŸÖÿßÿπÿ©ÿå ÿ±ŸÉÿ≤Ÿàÿß ŸÖÿπÿßŸäÿß. ÿßŸÑÿ™ÿ¨ÿßÿ±ÿ® ÿßŸÑŸÑŸä ÿ®ÿ¨ÿØ ÿπÿßŸäÿ≤ÿ©... ŸäÿπŸÜŸä... ÿ£ÿ±ŸÇÿßŸÖ. ŸÉÿßŸÖ ÿ¨ÿ±ÿßŸÖ ÿ≤ÿ®ÿØÿ© ÿ∑ÿ±Ÿäÿ© ŸáŸÜÿ±ŸÖŸäŸáŸÖ ŸÅŸä ÿßŸÑŸÅÿ±ÿßÿ∫ ÿßŸÑŸÑÿ∞Ÿäÿ∞ ÿØÿßÿü ü§î ÿßÿ≠ŸÉŸäŸÑŸä.",
                 grams: 'ÿ¨ÿ±ÿßŸÖ',
                 // cups: 'ŸÉŸàÿ®ÿßŸäÿ©', // Defined above
                 butterWarning: "ŸäÿßÿØŸä ÿßŸÑŸÜŸäŸÑÿ©. üíÄ ÿØÿÆŸÑ ÿ±ŸÇŸÖ ÿ®ÿ¨ÿØ. ÿ£ŸÇŸÑ ÿ≠ÿßÿ¨ÿ© 100 ÿ¨ÿ±ÿßŸÖ ÿ£Ÿà ŸÜÿµ ŸÉŸàÿ®ÿßŸäÿ© ÿ∑Ÿäÿ®. ÿµŸÑÿ≠Ÿáÿß ÿ®ÿßŸÑŸÑŸá ÿπŸÑŸäŸÉ.",
                 beginExperiment: "ŸäŸÑÿß ŸÜÿ∑ÿ®ÿÆ (ŸÖÿ¨ÿßÿ≤Ÿãÿß ŸäÿπŸÜŸä) üî•",
                 // Cookie Selection
                 phenotypeTitle: "ÿÆÿ∑Ÿàÿ© 2: ÿßÿÆÿ™ÿßÿ± ÿßŸÑÿ®ÿ∑ŸÑ ÿ®ÿ™ÿßÿπŸÉ‚Ñ¢ ü•äüç™",
                 phenotypeDesc: "ÿ£ŸàŸÑŸãÿßÿå ÿ•ŸäŸá ÿßŸÑŸÄ mood ÿßŸÑŸÑŸä ÿ∑ÿßŸÑÿπŸäŸÜ ÿ®ŸäŸáÿü ÿßÿÆÿ™ÿßÿ± ÿßŸÑŸÉÿßÿ¶ŸÜ ÿßŸÑŸÉŸàŸÉŸä ÿßŸÑŸÜŸáÿßÿ¶Ÿä:",
                 thinTitle: 'ÿßŸÑŸÖŸÇÿ±ŸÖÿ¥ŸäŸÜ ÿßŸÑŸÖŸÜÿ∑ŸÑŸÇŸäŸÜ‚Ñ¢ ‚ú®', thinDesc: 'ŸÖŸÑŸàŸÉ ÿßŸÑŸÅŸÑÿßÿ™. ŸÇÿ±ŸÖÿ¥ÿ© ŸÑÿß ŸÜŸáÿßÿ¶Ÿäÿ©. ÿ®Ÿäÿ™ŸÅÿ±ÿØ ÿ£ÿ≥ÿ±ÿπ ŸÖŸÜ ÿßŸÑŸÜÿ™ ÿπŸÜÿØŸä.',
                 classicTitle: 'ÿßŸÑÿ£ÿµŸÑŸä ÿßŸÑŸÉŸäŸàÿ™ ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜ üòé', classicDesc: 'ÿßŸÑŸÖŸäŸÉÿ≥ ÿßŸÑŸÖÿ´ÿßŸÑŸä ÿ®ŸäŸÜ ÿ∑ÿ±Ÿä ÿ¨Ÿàÿ© ŸàŸÇÿ±ŸÖÿ¥ÿ© ÿ®ÿ±ÿ©. ÿ®ÿ™ÿßÿπ ÿßŸÑÿ¥ÿπÿ® ÿßŸÑÿµÿ±ÿßÿ≠ÿ© fr.',
                 thickTitle: 'üëë ÿ£ÿ≥ŸäÿßÿØ ÿßŸÑÿ™ŸèÿÆŸÜ ŸàÿßŸÑÿ™ŸÉÿ®Ÿäÿ≥ÿ© üëë', thickDesc: 'ŸÜÿßÿπŸÖ ÿ≤Ÿä ÿ≥ÿ≠ÿßÿ®ÿ© ÿπÿ¨ŸäŸÜ. ÿØŸÑÿπ ŸÖŸÇÿ±ŸÅ ŸÖŸÜ ŸÉÿ™ÿ± ÿ≠ŸÑÿßŸàÿ™Ÿá. ŸàÿßÿÆÿØ ÿ±ÿßÿ≠ÿ™Ÿá ŸÅÿßŸÑŸÖÿ≥ÿßÿ≠ÿ©. ÿßŸÑŸÉŸàŸÉŸä ÿßŸÑÿ≠ÿ∂ŸÜ.',
                 // Recipe Display
                 recipeTitle: '{cookieName}: ÿßŸÑŸÉŸÑÿßŸÖ ÿπ ÿ•ŸäŸá‚Ñ¢ üëá',
                 prepTitle: 'ŸÉŸàÿ±ÿ≥ ÿßŸÑÿ™ÿ≠ÿ∂Ÿäÿ±: ŸÅŸÇÿ±ÿ© ÿßŸÑŸÅÿ≤ŸÑŸÉÿ© ü§ì‚öóÔ∏è',
                 ingredientsTitle: 'ŸÑŸäÿ≥ÿ™ÿ© ÿßŸÑÿ∫ŸÜÿßÿ¶ŸÖ üí∞ (ÿßŸÑÿ≠ÿßÿ¨ÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©)',
                 approxYield: 'ÿ®ÿ™ÿπŸÖŸÑ ÿ≠ŸàÿßŸÑŸä:',
                 cookies: 'ŸÉŸàŸÉŸäÿ≤ÿü ŸäŸÖŸÉŸÜ ÿ£ŸÉÿ™ÿ±ÿü ŸÖÿπÿ±ŸÅÿ¥.',
                 cookie: 'ŸÉŸàŸÉŸä ŸàÿßŸÇŸÅÿ© ŸÑŸàÿ≠ÿØŸáÿß ÿ≠ÿ≤ŸäŸÜÿ© üßç',
                 largeCookies: 'ŸÉŸàŸÉŸäÿ≤ ÿ∂ÿÆŸÖÿ© ŸÉÿØÿß ŸÖÿ¥ŸÅÿ™Ÿáÿßÿ¥ üèãÔ∏è',
                 largeCookie: 'ŸÉŸàŸÉŸä ÿ∂ÿÆŸÖÿ© ŸÑŸàÿ≠ÿØŸáÿß ÿ®ÿ±ÿ∂Ÿá üèãÔ∏è',
                 stepsTitle: 'ÿßŸÑÿÆÿ∑Ÿàÿßÿ™ ÿßŸÑÿ£ÿµŸÑŸäÿ© (ÿ≠ÿßŸàŸÑ ŸÖÿ™ÿ®Ÿàÿ∏Ÿáÿßÿ¥ ÿßŸÑŸÑŸá Ÿäÿ®ÿßÿ±ŸÉŸÑŸÉ üôè)',
                 proTipsTitle: 'ÿ≠ÿ±ŸÉÿßÿ™ ÿßŸÑŸÖÿ≠ÿ™ÿ±ŸÅŸäŸÜ / ÿØÿ¥ ÿØŸÖÿßÿ∫Ÿä üß†üí•',
                 // Ingredient Names (Ensure keys match baseRecipes.ingredients keys)
                 unsaltedButter: 'ÿ≤ÿ®ÿØÿ© ÿ∑ÿ±Ÿäÿ© (ÿßŸÑŸÜŸàÿπ ÿßŸÑÿ£ŸÜÿ™ŸäŸÉÿ©)',
                 granulatedSugar: 'ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ (ÿßŸÑÿπÿßÿØŸä ÿ®ÿ™ÿßÿπŸÜÿß)',
                 lightBrownSugar: 'ÿ≥ŸÉÿ± ÿ®ŸÜŸä ŸÅÿßÿ™ÿ≠ (ÿØŸèŸÉŸá ŸÑÿ™ÿ≠ÿ™ÿå ÿßŸÅÿ±ÿ∂ ÿ≥Ÿäÿ∑ÿ±ÿ™ŸÉ)',
                 toastedMilkPowder: 'ÿ®ŸàÿØÿ±ÿ© ŸÑÿ®ŸÜ ŸÖÿ≠ŸÖÿµÿ© (ŸÑŸà ÿπÿßŸäÿ≤ ÿ™ÿ™ŸÖŸÜÿ∏ÿ± ~ÿ®ÿßŸÑÿ¥ŸäÿßŸÉÿ©~)',
                 largeEggs: 'ÿ®Ÿäÿ∂ ŸÉÿ®Ÿäÿ± (ÿßÿπŸÖŸÑ ŸÜŸÅÿ≥ŸÉ ÿ¨ÿßŸäÿ®ŸáŸÖ ÿ®ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ© ÿ≠ÿ™Ÿâ ŸÑŸà ŸÑÿ£ ü§´)',
                 vanillaExtract: 'ŸÅÿßŸÜŸäŸÑŸäÿß ÿ≥ÿßŸäŸÑÿ© (ÿπÿµŸäÿ± ÿ±Ÿäÿ≠ÿ™Ÿá ÿ≠ŸÑŸàÿ©)',
                 allPurposeFlour: 'ÿØŸÇŸäŸÇ ÿ£.ÿ∫ (ÿ®ÿßŸÑŸÖŸÑÿπŸÇÿ© ÿ®ÿ±ÿßÿ≠ÿ©ÿå ÿ®ŸÑÿßÿ¥ ŸÉÿ®ÿ≥ üôÖ)',
                 tableSalt: 'ŸÖŸÑÿ≠ (ÿ∫ÿ®ÿßÿ± ÿßŸÑÿ∑ÿπŸÖ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä)',
                 bakingPowder: 'ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ± (ÿ™ÿ¥ŸàŸÅ ÿ™ÿßÿ±ŸäÿÆŸáÿü ŸÑÿß ÿ∑ÿ®ÿπŸãÿß ÿ®Ÿáÿ≤ÿ± ÿ¥ŸàŸÅŸá)',
                 bakingSoda: 'ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß (ÿ™ÿ¥ŸàŸÅ ÿ™ÿßÿ±ŸäÿÆŸá ÿ®ÿ±ÿ∂Ÿáÿü ŸäŸÖŸÉŸÜÿü)',
                 chocolateChips: 'ÿ¥ŸàŸÉŸÑŸäÿ™ ÿ¥Ÿäÿ®ÿ≥/ŸÇÿ∑ÿπ (Target Kualety ŸÑÿ®ŸÜ Ÿàÿ®ÿ≥ÿå ÿ™ÿ¨ÿßŸáŸÑ ÿ£Ÿä ÿ±ÿ£Ÿä ÿ™ÿßŸÜŸä)',
                 prepWater: 'ŸÖŸäÿ© ÿ£Ÿà ŸÑÿ®ŸÜ (ÿ£ŸÉÿ≥ÿ¨ŸäŸÜ ÿßŸÑÿπÿ¨ŸäŸÜ ÿ£Ÿà ŸÉÿØÿßüíß)',
                 // Prep Techniques
                 prepTechTitle_brownButter: 'ÿßŸÑÿ∑ÿ±ŸäŸÇÿ©: ÿ™ÿ≠ŸÖŸäÿ± ÿßŸÑÿ≤ÿ®ÿØÿ© ÿ®ÿßÿ≠ÿ™ÿ±ÿßŸÅ (ŸÖÿµŸÜÿπ ÿßŸÑÿØŸáÿ® ÿßŸÑÿ≥ÿßŸäŸÑ ŸäÿπŸÜŸä) üèÜüè≠',
                 prepTechDesc_brownButter: `ŸÖŸäŸÑÿßÿ±ÿØ ÿØÿß = ŸÉŸÑŸÖÿ© ÿ¥ŸäŸÉ ÿπÿ¥ÿßŸÜ ÿ™ÿÆŸÑŸä ÿ∑ÿπŸÖ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸÖŸÉÿ≥ÿ±ÿßÿßÿßÿ™ (ÿ®ŸÖÿπŸÜŸâ ÿßŸÑŸÉŸÑŸÖÿ©). üî•<br>Ÿ°. ŸÇÿ∑ÿπ ÿßŸÑÿ≤ÿ®ÿØÿ©ÿå ÿßÿ±ŸÖŸäŸáÿß ŸÅÿ∑ÿßÿ≥ÿ© ŸÅÿßÿ™ÿ≠ÿ©ÿå ŸÜÿßÿ± Ÿàÿ≥ÿ∑. ÿ¥ŸÅÿ™ ÿ±ÿ∫Ÿàÿ©ÿü ÿØŸä ÿßŸÑŸÖŸäŸá ÿ®ÿ™ÿÆŸÑÿπ ‚úåÔ∏è. ŸÑŸÅ ÿßŸÑÿ∑ÿßÿ≥ÿ© ŸÉÿ£ŸÜŸÉ ÿ®ÿ™ÿ≠ÿßŸàŸÑ ÿ™ŸÜŸàŸëŸÖŸáÿß.<br>Ÿ¢. ŸÉŸÖŸëŸÑ ŸÑŸÅ Ÿàÿ™ÿ≥ÿÆŸäŸÜ. ÿßŸÑÿ≠ÿ™ÿ™ ÿßŸÑÿ®ŸÜŸä ÿ®ÿ™ŸÜÿ≤ŸÑ ÿ™ÿ≠ÿ™ Ÿàÿ±Ÿäÿ≠ÿ™Ÿáÿß ÿ®ÿ™ÿ®ŸÇŸâ ÿ™ÿ¨ŸÜŸÜŸÜŸÜ (ÿ≤Ÿä ŸÖŸÉÿ≥ÿ±ÿßÿ™ ŸÖÿ™ÿ≠ŸÖÿµÿ©/ŸÉÿ±ÿßŸÖŸäŸÑÿü). Ÿ•-Ÿ°Ÿ† ÿØŸÇÿßŸäŸÇ ŸäŸÖŸÉŸÜ. ŸÖÿ™ÿ±Ÿàÿ≠ÿ¥ ŸÅŸä ÿ≠ÿ™ÿ©!<br>Ÿ£. ÿßÿ±ŸÖŸä ŸÅŸàÿ±ÿßŸã (ŸÉŸÑ ÿßŸÑÿ≠ÿ™ÿ™!) ŸÅŸä ÿ∑ÿ®ŸÇ Ÿäÿ≥ÿ™ÿ≠ŸÖŸÑ ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ©. ÿπÿ¥ÿßŸÜ ÿ™ŸàŸÇŸÅ ÿßŸÑÿ≥Ÿàÿß. ÿ≤ÿ®ÿØÿ© ŸÖÿ≠ÿ±ŸàŸÇÿ© = ŸÜŸáÿßŸäÿ© ÿ≠ÿ≤ŸäŸÜÿ©. üò•`,
                 prepTechTitle_hydrateButter: 'ŸÖŸáŸÖÿ© ÿ¨ÿßŸÜÿ®Ÿäÿ©: ÿ™ÿ±ÿ∑Ÿäÿ® ÿßŸÑÿ≤ÿ®ÿØÿ© üí¶ (ŸÖÿ¥ ÿ•ÿ¨ÿ®ÿßÿ±Ÿä!)',
                 prepTechDesc_hydrateButter: `ÿßŸÑÿ™ÿ≠ŸÖŸäÿ± ÿ≥ÿ±ŸÇ ÿßŸÑŸÖŸäÿ© (ŸÇŸÑÿ© ÿ∞ŸàŸÇ). ŸÑŸà ÿ±ÿ¨ÿπŸÜÿß ÿßŸÑŸÉŸÖŸäÿ© ÿßŸÑŸÖÿ∏ÿ®Ÿàÿ∑ÿ© *ÿ®ÿπÿØ* ÿßŸÑÿ™ÿ≠ŸÖŸäÿ± *ŸÇÿ®ŸÑ* ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ŸäŸÖŸÉŸÜ ÿ™ÿ®ŸÇŸâ ÿßŸÖÿ∂ÿ∫ÿü ŸÖÿπÿ±ŸÅÿ¥ÿå ÿπŸÑŸÖ! üß™ ŸÇŸÑÿ® ÿ®ÿßŸÑÿ±ÿßÿ≠ÿ©. ŸÜÿ¨ÿ±ÿ®ÿü`,
                 prepTechTitle_chillButterClassicThick: 'ÿ≥ÿ™ŸàŸàÿ®! ÿ®ÿ±ŸëÿØ ÿπÿ¥ÿßŸÜ ÿßŸÑÿÆŸÅŸÇ ü•∂üßä',
                 prepTechDesc_chillButterClassicThick: `ŸÑŸäŸáÿü ÿØŸáŸÜ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ≥ÿßŸäÿ≠ = ŸÉŸàŸÉŸäÿ≤ ÿ≠ÿ≤ŸäŸÜÿ© ŸÅŸÑÿßÿ™. ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ÿ®Ÿäÿ®ŸÜŸä ŸÉÿ±Ÿäÿ≥ÿ™ÿßŸÑÿßÿ™ ÿßŸÑÿØŸáŸÜ ÿ™ÿßŸÜŸä ÿπÿ¥ÿßŸÜ ÿ™ÿπÿ±ŸÅ ÿ™ÿ≠ÿ®ÿ≥ ŸáŸàÿß ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ± (ŸäÿØŸä Ÿáÿ¥ÿßÿ¥ÿ©!).<br>Ÿ°. ÿ≥Ÿäÿ® ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ≥ÿÆŸÜÿ© ÿ™ÿ®ÿ±ÿØ ÿ¥ŸàŸäÿ© (Ÿ•-Ÿ°Ÿ† ÿØŸÇÿßŸäŸÇ). ÿÆŸÑŸäŸáÿß ÿ™ÿ¥ŸàŸÅ ÿßŸÑÿØŸÜŸäÿß.<br>Ÿ¢. ŸàŸÇÿ™ ÿßŸÑÿ™ŸÑÿßÿ¨ÿ©! ŸÑÿ≠ÿØ ŸÖÿß ÿ™ÿ¨ŸÖÿØ ÿ®ÿ≥ ŸÑÿ≥Ÿá ÿ®ÿ™ÿ™ÿ®ÿ∑ÿ∑ ÿ¥ŸàŸäÿ© (ÿ≤Ÿä ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ≥ŸÇÿπÿßŸÜÿ© ÿßŸÑÿπÿßÿØŸäÿ©). ŸÖÿ¥ ŸÇÿßŸÑÿ® ÿ∑Ÿàÿ®. ~Ÿ°-Ÿ¢ ÿ≥ÿßÿπÿ©. ÿßŸÑŸáÿØŸÅ ~Ÿ°Ÿ¶-Ÿ°Ÿ®¬∞ŸÖ / Ÿ¶Ÿ†-Ÿ¶Ÿ•¬∞ŸÅ. ÿ£ÿ≥ÿßÿ≥Ÿä ÿ¨ÿØŸãÿß ŸÑŸÑŸÉŸÑÿßÿ≥ŸäŸÉ/ÿßŸÑÿ™ÿÆÿßŸÜ.`,
                 prepTechTitle_chillButterThin: 'ŸÖŸàÿØ ÿßŸÑÿ±ŸàŸÇÿßŸÜ: ÿ®ÿ±ŸëÿØ ÿπÿ¥ÿßŸÜ ÿßŸÑÿÆŸÅŸÇ ÿßŸÑÿπŸÉÿ≥Ÿä üòé‚ùÑÔ∏è',
                  prepTechDesc_chillButterThin: `ÿßŸÑÿ£ŸàŸÑÿßÿØ ÿßŸÑÿ±ŸÇÿßŸÇ ÿπÿßŸäÿ≤ŸäŸÜ ÿ≤ÿ®ÿØÿ© ÿ®ÿßÿ±ÿØÿ© (ŸÖÿ¥ ÿ™ŸÑÿ¨!) ÿπÿ¥ÿßŸÜ ÿ™ÿ∫ŸÑŸÅ ÿßŸÑÿØŸÇŸäŸÇ ÿßŸÑÿ£ŸàŸÑ. ÿ≤Ÿä ŸÖÿß ÿ™ŸÉŸàŸÜ ÿ®ÿ™ŸÑÿ®ÿ≥Ÿá ÿ®ÿßŸÑÿ∑Ÿà ÿØŸáŸÜ.<br>Ÿ°. ÿ®ÿ±ŸëÿØ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑŸÖÿ≠ŸÖÿ±ÿ© ŸÑÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ© ÿ™ŸÇÿ±Ÿäÿ®Ÿãÿß. ÿÆÿ®ÿ∑ÿ© ÿ™ŸÑÿßÿ¨ÿ© ÿ≥ÿ±Ÿäÿπÿ© (~Ÿ£Ÿ†-Ÿ¶Ÿ† ÿØŸÇŸäŸÇÿ©) ŸÑÿ≠ÿØ ŸÖÿß ÿ™ÿ®ŸÇŸâ Ÿäÿß ÿØŸàÿ® ÿ¨ÿßŸÖÿØÿ© ÿ®ÿ≥ ÿ≥ŸáŸÑ ÿ™ÿ™ŸÇÿ∑ÿπ. ŸÖÿ≤ÿßÿ¨Ÿáÿß Ÿäÿ®ŸÇŸâ ~Ÿ°Ÿ®-Ÿ¢Ÿ†¬∞ŸÖ / Ÿ¶Ÿ•-Ÿ¶Ÿ®¬∞ŸÅ.`,
                 prepTechTitle_toastMilkPowder: 'ÿπŸÑŸä ÿßŸÑŸÑŸäŸÅŸÑ! ÿ≠ŸÖŸëÿµ ÿ®ŸàÿØÿ±ÿ© ÿßŸÑŸÑÿ®ŸÜ (ŸÜŸÉŸáÿ© ÿ•ÿ∂ÿßŸÅŸäÿ© ŸÖÿ¨ÿßŸÜŸäÿ©) ‚ú®üöÄ',
                 prepTechDesc_toastMilkPowder: `ÿ®ÿ™ÿ∫ŸÖŸÇ ÿ∑ÿπŸÖ ÿßŸÑÿ¨Ÿàÿ≤/ÿßŸÑŸÖÿßŸÑÿ™ ÿ£ŸàŸä. ŸÅŸàÿ≤ ÿ™ÿßŸÜŸä ŸÑŸÖŸäŸÑÿßÿ±ÿØ. ŸÅÿ±ŸÇ ÿ¥ÿßÿ≥ÿπ ŸÅÿßŸÑŸÖŸÑŸàŸÉ ÿßŸÑÿ™ÿÆÿßŸÜ.<br>Ÿ°. ÿßŸÅÿ±ÿØ ÿßŸÑÿ®ŸàÿØÿ±ÿ© ÿ±ŸÅŸäÿπ ÿ£ŸàŸä (ÿµŸäŸÜŸäÿ© ÿ£Ÿà ÿ∑ÿßÿ≥ÿ© ŸÜÿßÿ¥ŸÅÿ©).<br>Ÿ¢. ŸÅÿ±ŸÜ: ~Ÿ°Ÿ¢Ÿ†¬∞ŸÖ/Ÿ¢Ÿ•Ÿ†¬∞ŸÅ ÿ≠ŸàÿßŸÑŸä Ÿ°Ÿ†-Ÿ°Ÿ• ÿØŸÇŸäŸÇÿ©ÿå ŸÇŸÑÿ® ŸÉÿ™Ÿäÿ±. ÿ∑ÿßÿ≥ÿ©: ŸÜÿßÿ± Ÿàÿ≥ÿ∑ ŸÑŸáÿßÿØŸäÿ©ÿå ŸÇŸÑÿ® ŸÖŸÜ ÿ∫ŸäŸäŸäŸäŸäÿ± ŸÖÿß ÿ™ŸÇŸÅ. ÿ®ÿ¨ÿØ ŸÖÿ™ŸÇŸÅÿ¥.<br>Ÿ£. ÿÆŸÑŸäŸÉ ÿ®ÿßÿµÿµ ÿπŸÑŸäŸáÿß! ÿ®ÿ™ŸÑŸàŸÜ ÿØŸáÿ®Ÿä ÿ®ÿ≥ÿ±ÿπÿ©. ÿßÿ™ÿ≠ÿ±ŸÇÿ™ = ÿßŸÑÿ¨ŸäŸÖ ÿÆŸÑÿµ. ‚ò†Ô∏è<br>Ÿ§. ÿ®ÿ±ŸëÿØŸáÿß Ÿ°Ÿ†Ÿ†% ŸÇÿ®ŸÑ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ. ŸÖÿ™ÿ≥ÿ™ÿπÿ¨ŸÑÿ¥.`,
                 // Notes & Steps
                 classicNotes: `üîë: ÿ≥ŸÉÿ± Ÿ°:Ÿ°ÿå ÿßŸÑÿ®ŸàÿØÿ±ÿ™ŸäŸÜÿå ÿÆŸÅŸÇ Ÿ• ÿØŸÇÿßŸäŸÇ ŸÖÿ∏ÿ®Ÿàÿ∑ŸäŸäŸäŸÜ (ÿ¥ÿ∫ŸëŸÑ ÿ™ÿßŸäŸÖÿ±!). ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© (Ÿ°Ÿ¶-Ÿ°Ÿ®¬∞ŸÖ) = ŸÇÿßŸÜŸàŸÜ ÿØŸàŸÑÿ©. ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ŸÖÿ¥ ÿßÿÆÿ™Ÿäÿßÿ±Ÿä ŸÑŸà ÿπÿßŸäÿ≤ ÿßŸÑŸÇŸàÿßŸÖ ÿßŸÑÿµÿ≠ÿå ÿßÿ™ŸÅŸÇŸÜÿßÿü ÿßÿ™ŸÅŸÇŸÜÿß. ü§ù`,
                 classicSteps: `Ÿ°. **ÿ¨ŸáŸëÿ≤:** ÿßÿÆŸÑÿ∑ ÿßŸÑŸÜŸàÿßÿ¥ŸÅ. ÿ¨ŸáŸëÿ≤ ÿßŸÑÿµŸàÿßŸÜŸä. ÿßŸÑÿ≤ÿ®ÿØÿ© = ÿ®ÿßÿ±ÿØÿ©-ÿ®ÿ™ÿ™ŸÅÿπÿµÿå ÿßŸÑÿ®Ÿäÿ∂ = ÿ¥ÿ®Ÿá ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ© ŸáŸáŸá.\nŸ¢. **ÿßŸÑÿÆŸÅŸÇ (ŸÅŸÇÿ±ÿ© ÿßŸÑÿ≠ŸÅŸÑÿ©):** ÿßÿ∂ÿ±ÿ® ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ÿßÿ±ÿØÿ© ŸàÿßŸÑÿ≥ŸÉÿ± ÿπ ÿ≥ÿ±ÿπÿ© Ÿàÿ≥ÿ∑-ÿπÿßŸÑŸäÿ© **Ÿ• ÿØŸÇÿßŸäŸÇ ŸÉÿßŸÖŸÑÿ©**. ŸÖŸÜ ÿ∫Ÿäÿ± ÿ∫ÿ¥. ŸÑÿßÿ≤ŸÖ Ÿäÿ®ŸÇŸâ ŸÑŸàŸÜŸáÿß ŸÅÿßÿ™ÿ≠ ŸàŸáÿ¥ÿ© ŸÅÿ¥ÿÆ. ÿßŸÉÿ≠ÿ™ ŸÉŸàŸäÿ≥.\nŸ£. **ÿßŸÑÿ≥ŸàÿßŸäŸÑ:** ÿ≥ÿ±ÿπÿ© ÿ®ÿ∑Ÿäÿ¶ÿ©. ÿßŸÑÿ®Ÿäÿ∂ ŸäÿØÿÆŸÑ Ÿàÿßÿ≠ÿØÿ© Ÿàÿ±ÿß Ÿàÿßÿ≠ÿØÿ©. ÿßÿÆŸÑÿ∑ *Ÿäÿß ÿØŸàÿ®* ŸäÿÆÿ™ŸÑÿ∑. ÿ≤ŸäÿßÿØÿ© ÿÆŸÑÿ∑ = ÿ≠ÿ≤ŸÜ. ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß ÿ®ÿ™ÿ™ÿ≤ÿ≠ŸÑŸÇ ÿ¢ÿÆÿ± ÿ≠ÿßÿ¨ÿ©.\nŸ§. **ÿßŸÑŸÜŸàÿßÿ¥ŸÅ:** ÿ£ÿ®ÿ∑ÿ£ ÿ≥ÿ±ÿπÿ©. ŸÜÿ≤ŸëŸÑ ÿßŸÑÿØŸÇŸäŸÇ ÿ≠ÿ®ÿ© ÿ≠ÿ®ÿ©. ŸàŸÇŸëŸÅ ÿ£ŸàŸÑ ŸÖÿß *ÿ£ÿ∫ŸÑÿ®Ÿá* ŸäÿÆÿ™ŸÑÿ∑. ŸÉÿßŸÖ ÿÆÿ∑ ÿπÿßÿØŸä. ŸÉŸÖŸÑ ÿ®ÿ•ŸäÿØŸÉ ŸäŸÖŸÉŸÜÿü\nŸ•. **ŸÇŸÑŸëÿ® ÿ®ÿßŸÑÿ±ÿßÿ≠ÿ©:** ŸÜÿ≤ŸÑ ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©. ÿßÿπŸÖŸÑ ŸÉÿ£ŸÜ ÿßŸÑÿπÿ¨ŸäŸÜÿ© ÿπŸÜÿØŸáÿß ŸÖÿ¥ÿßÿπÿ±.\nŸ¶. **ÿ®ÿ±ŸëÿØ (ÿ®ŸÑŸäÿ≤ ÿßÿπŸÖŸÑŸáÿß):** ÿ∫ÿ∑Ÿä ÿßŸÑÿπÿ¨ŸäŸÜÿ©. ÿ™ŸÑÿßÿ¨ÿ© Ÿ£Ÿ†-Ÿ¶Ÿ† ÿØŸÇŸäŸÇÿ© ÿ£ŸÇŸÑ ÿ£ŸÇŸÑ ÿ≠ÿßÿ¨ÿ©. ŸÑÿ≠ÿØ Ÿ§Ÿ® ÿ≥ÿßÿπÿ© ŸÑÿ∑ÿπŸÖ ŸÅŸä ÿπÿßŸÑŸÖ ÿ™ÿßŸÜŸä. ÿßŸÑÿØŸáŸÜ ŸäŸÖÿ≥ŸÉÿå ÿßŸÑÿØŸÇŸäŸÇ Ÿäÿ¥ÿ±ÿ®.\nŸß. **ÿ¥ŸÉŸëŸÑ ŸàÿßÿÆÿ®ÿ≤:** ŸÅÿ±ŸÜ Ÿ°Ÿ©Ÿ†¬∞ŸÖ/Ÿ£ŸßŸ•¬∞ŸÅ. ÿ¥ŸÉŸëŸÑ ŸÉŸàÿ± ~Ÿ¢ ŸÖ ŸÉ. ÿ≥Ÿäÿ® ŸÖÿ≥ÿßŸÅÿ© (ÿπÿßŸäÿ≤ŸäŸÜ ŸÖÿ≥ÿßÿ≠ÿ© ÿ¥ÿÆÿµŸäÿ©). ÿßÿÆÿ®ÿ≤ Ÿ°Ÿ†-Ÿ°Ÿ¢ ÿØŸÇŸäŸÇÿ© (ÿßŸÑÿ£ÿ∑ÿ±ÿßŸÅ ÿØŸáÿ®Ÿäÿå ÿßŸÑŸÜÿµ ÿ∑ÿ±Ÿä/ŸÖŸÜŸÅŸàÿ¥). ŸÑŸÅ ÿßŸÑÿµŸäŸÜŸäÿ© ŸÖÿ±ÿ© ŸäŸÖŸÉŸÜ.\nŸ®. **ŸÖŸÜÿ∑ŸÇÿ© ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ:** üö® ŸÖŸáŸÖ: ÿ≥Ÿäÿ® ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© ÿßŸÑÿ≥ÿÆŸÜÿ© Ÿ• ÿØŸÇÿßŸäŸÇ!! ÿ®ÿ™ŸÉŸÖŸÑ ÿ≥Ÿàÿß. ÿ®ÿπÿØŸäŸÜ ÿßŸÜŸÇŸÑ ÿπ ÿ±ŸÅ ÿ≥ŸÑŸÉ. ÿßÿµÿ®ÿ± ÿ®ŸÇŸâ ÿßŸÑŸÑŸá ŸäŸáÿØŸäŸÉ.`,
                 thickNotes: `ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿßŸÑÿ™ŸèÿÆŸÜ: ÿ®ŸÜÿ≠ÿßÿ±ÿ® ÿßŸÑÿ™ŸÅŸÑÿ∑ÿ≠! üí™ ÿ•ÿ≤ÿßŸäÿü ÿ≥ŸÉÿ± ÿ®ŸÜŸä ŸÉÿ™Ÿäÿ±ÿå ŸÖŸÅŸäÿ¥ ÿµŸàÿØÿßÿå ÿ™ÿ®ÿ±ŸäÿØ ÿ∑ŸàŸäŸäŸäŸäŸäŸäŸÑ **ÿ•ŸÑÿ≤ÿßŸÖŸä**. ÿßÿÆŸÅŸÇ ÿ®ÿßŸÑŸáÿØÿßŸàÿ© (ŸáŸàÿß ŸÉÿ™Ÿäÿ± = ÿßŸÜŸáŸäÿßÿ±). ÿ®ŸàÿØÿ±ÿ© ŸÑÿ®ŸÜ ŸÖÿ≠ŸÖÿµÿ© = ÿ®Ÿàÿ≥ÿ© ÿßŸÑÿ¥ŸäŸÅ üíã. ÿ≠ÿ® ÿßŸÑŸÜÿµ ÿßŸÑÿ∑ÿ±Ÿä ÿ¥ŸàŸäÿ©. ÿ∑ÿßŸÇÿ© ÿßŸÑŸÉŸàŸÉŸä ÿßŸÑÿ∂ÿÆŸÖÿ© ŸÅŸÇÿ∑. üëë`,
                 thickSteps: `Ÿ°. **ÿ¨ŸáŸëÿ≤:** ÿßÿÆŸÑÿ∑ ÿßŸÑŸÜŸàÿßÿ¥ŸÅ (ŸÖÿπ ÿ®ŸàÿØÿ±ÿ© ÿßŸÑŸÑÿ®ŸÜ ÿßŸÑŸÖÿ≠ŸÖÿµÿ©). ÿ¨ŸáŸëÿ≤ ÿßŸÑÿµŸàÿßŸÜŸä. ÿßŸÑÿ≤ÿ®ÿØÿ© = ÿ®ÿßÿ±ÿØÿ©-ÿ®ÿ™ÿ™ŸÅÿπÿµÿå ÿßŸÑÿ®Ÿäÿ∂ = ÿ®Ÿäÿ™ÿ∏ÿßŸáÿ± ÿ®ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©.\nŸ¢. **ÿßÿÆŸÅŸÇ (ÿ®ÿßŸÑŸáÿØÿßŸàÿ©!):** ÿ≤ÿ®ÿØÿ© Ÿàÿ≥ŸÉÿ± ÿ≥ÿ±ÿπÿ© Ÿàÿ≥ÿ∑ ~Ÿ¢-Ÿ£ ÿØŸÇŸäŸÇÿ©. ÿßŸÑŸáÿØŸÅ: ŸÖÿÆÿ™ŸÑÿ∑ ŸàŸÉÿ±ŸäŸÖŸä. ŸÖÿ¥ ŸÅÿßÿ™ÿ≠/Ÿáÿ¥ ÿ≤Ÿä ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉ. ÿ®ŸÑÿßÿ¥ ŸáŸàÿß ŸÉÿ™Ÿäÿ±.\nŸ£. **ÿßŸÑÿ≥ŸàÿßŸäŸÑ:** ÿ≥ÿ±ÿπÿ© ÿ®ÿ∑Ÿäÿ¶ÿ©. ÿßŸÑÿ®Ÿäÿ∂ Ÿ° Ÿàÿ±ÿß Ÿ°ÿå Ÿäÿß ÿØŸàÿ® Ÿäÿ™ÿÆŸÑÿ∑Ÿàÿß. ŸÜÿ≤ŸÑ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.\nŸ§. **ÿßŸÑŸÜŸàÿßÿ¥ŸÅ:** ÿ≥ÿ±ÿπÿ© ÿ®ÿ∑Ÿäÿ¶ÿ©. ŸÜÿ≤ŸëŸÑ ÿßŸÑÿØŸÇŸäŸÇ ÿØŸÅÿπÿßÿ™. ÿßÿÆŸÑÿ∑ ŸÑÿ≠ÿØ ŸÖÿß Ÿäÿ®ŸÇŸâ *ÿ¥ÿ®Ÿá* ÿßÿ™ÿÆŸÑÿ∑. ÿ®ŸÜŸÉÿ±Ÿá ÿßŸÑÿ¨ŸÑŸàÿ™ŸäŸÜ ŸáŸÜÿß. üò§\nŸ•. **ŸÇŸÑŸëÿ® (ÿ®ÿ£ŸÇÿµŸâ ŸÇŸàÿ©):** ÿ≠ÿ∑ ŸÉŸÖŸäÿ© ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ŸÖŸáŸàŸÑÿ©. ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ•ŸäÿØŸÉ/ÿ≥ÿ®ÿßÿ™ŸäŸàŸÑÿß ŸÖÿ™ŸäŸÜÿ© ÿπÿ¥ÿßŸÜ ÿ™ÿØÿÆŸÑ ÿ¢ÿÆÿ± ÿ≠ÿ®ÿ© ÿØŸÇŸäŸÇ. ÿßŸÑÿπÿ¨ŸäŸÜÿ© = ÿ™ŸÇŸäŸÑÿ© ŸÅÿ¥ÿÆ. ŸÖÿ™ÿÆŸÑÿ∑ÿ¥ ÿ≤ŸäÿßÿØÿ©.\nŸ¶. **ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑÿ≤ÿßŸÖŸä ÿßŸÑÿ£ÿ®ÿØŸä:** ÿ¥ŸÉŸëŸÑ ŸÉŸàÿ± **ŸÉÿ®ŸäŸäŸäŸäÿ±ÿ©** (ŸÇÿØ Ÿ°Ÿ°Ÿ£-Ÿ°ŸßŸ†ÿ¨ŸÖ). ÿÆŸÑŸëŸäŸáÿß ÿ∑ŸàŸäŸÑÿ© ŸÖÿ¥ ŸÖÿ®ÿ∑ÿ∑ÿ©. ÿ∫ŸÑŸÅŸáÿß ÿ¨ÿßÿßÿßÿßŸÖÿØ. ÿ™ŸÑÿßÿ¨ÿ© ÿ£ŸÇŸÑ ÿ¥Ÿäÿ° Ÿ§ ÿ≥ÿßÿπÿßÿ™. ÿßŸÑÿ£ŸÅÿ∂ŸÑ = Ÿ°Ÿ¢-ŸßŸ¢ ÿ≥ÿßÿπÿ©. ÿ•ŸäŸÄŸÄŸÄÿßÿßÿßÿßÿßŸÉ. ÿ™ŸÄŸÄŸÅŸÄŸÄŸÉŸëŸÄŸÄŸÄÿ≥. ŸÑŸÑŸÄŸÄÿÆŸÄŸÄÿ∑ŸÄŸÄŸàÿ©. ÿØŸä. ÿ£ÿ®ÿØŸãÿß.\nŸß. **ÿßÿÆÿ®ÿ≤ ÿ≥ÿßŸÇÿπ:** ŸÅÿ±ŸÜ Ÿ°Ÿ®Ÿ†¬∞ŸÖ/Ÿ£Ÿ•Ÿ†¬∞ŸÅ. ÿ≠ÿ∑ ŸÉŸàÿ± ÿßŸÑÿπÿ¨ŸäŸÜ ÿßŸÑÿ≥ÿßŸÇÿπÿ© ÿ®ÿπŸäÿØ ÿπŸÜ ÿ®ÿπÿ∂. ŸÖÿ™ŸÄŸÄŸÄÿ®ŸÄŸÄŸÄÿ∑ŸÄŸÄŸÄÿ∑ŸÄŸÄŸÄÿ¥. ÿßÿÆÿ®ÿ≤ Ÿ°Ÿ®-Ÿ¢Ÿ• ÿØŸÇŸäŸÇÿ© (ÿ≠ÿ≥ÿ® ÿßŸÑÿ™ÿÆŸÜ). ÿßŸÑÿ£ÿ∑ÿ±ÿßŸÅ ÿ¥ŸÉŸÑŸáÿß ÿßÿ≥ÿ™Ÿàÿ™ÿå ÿßŸÑŸÜÿµ ÿ¥ŸÉŸÑŸá ŸÜŸä ÿ¥ŸàŸäÿ©/ÿπÿ¨ŸäŸÜÿ© ŸÑÿ≤ÿ¨ÿ© ŸÉÿØÿß (ÿßŸÑŸáÿØŸÅ ~ŸßŸ©-Ÿ®Ÿ•¬∞ŸÖ / Ÿ°ŸßŸ•-Ÿ°Ÿ®Ÿ•¬∞ŸÅ ŸÑŸà ÿπŸÜÿØŸÉ ÿ™ÿ±ŸÖŸàŸÖÿ™ÿ± ÿ≤Ÿä ÿßŸÑÿØÿ≠Ÿäÿ≠ÿ©). ŸÑŸÅ ÿßŸÑÿµŸäŸÜŸäÿ© ŸÖÿ±ÿ©.\nŸ®. **ÿ®ÿ±Ÿàÿ™ŸàŸÉŸàŸÑ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ (ÿ®ÿßŸÑÿ±ÿßÿ≠ÿ© ÿπŸÑŸäŸáÿß!):** üö® ÿ≥Ÿäÿ®Ÿáÿß ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© Ÿ°Ÿ† ŸÑŸÄ Ÿ°Ÿ• ÿØŸÇŸäŸÇÿ©. ÿØŸä ÿπŸäÿßŸÑ ÿπŸÖŸÑÿßŸÇÿ© ŸáŸÅŸëÿ©. ÿßŸÜŸÇŸÑŸáÿß ÿ®ÿßŸÑÿ±ÿßÿ≠ÿ© ÿπÿßŸÑÿ±ŸÅ. ÿ£ÿ≠ÿ≥ŸÜ ŸàŸáŸä ÿØÿßŸÅŸäÿ© ÿ¥ŸàŸäÿ©. ŸÇŸÑÿ®Ÿáÿß ÿ≥ÿßŸäÿ≠ = Ÿàÿ¨ÿπ.`,
                  thinNotes: `ÿ¥ŸÅÿ±ÿ© ÿßŸÑŸÇÿ±ŸÖÿ¥ÿ©: ÿ£ŸÇÿµŸâ ÿ™ŸÅŸÑÿ∑ÿ≠ + ÿ£ŸÇŸÑ ÿ¨ŸÑŸàÿ™ŸäŸÜ = ŸÉÿ≥ÿ®ÿ™ ‚ú®. ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ ŸÉÿ™Ÿäÿ±ÿå ÿµŸàÿØÿß ŸÉÿ™Ÿäÿ± (ŸÇŸÑŸàŸä = ÿ®ŸÜŸäÿßŸÜ/ÿ™ŸÅŸÑÿ∑ÿ≠). ÿ≠ŸäŸÑÿ© ÿßŸÑÿÆŸÅŸÇ ÿßŸÑÿπŸÉÿ≥Ÿä ŸáŸä ÿßŸÑÿ≠ŸÑ. **ŸÖŸÖŸÜŸàÿπ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ**. ÿßÿÆÿ®ÿ≤ ŸÑÿ≠ÿØ ŸÖÿß ÿ™ÿ™ŸÉÿ≥ÿ±. ŸÉŸàÿ± ÿµÿ∫Ÿäÿ±ÿ©ÿå ÿ£ŸÖÿßŸÉŸÜ Ÿàÿßÿ≥ÿπÿ©. ÿ´ŸÇ ŸÅÿßŸÑÿπŸÖŸÑŸäÿ©. üôè`,
                  thinSteps: `Ÿ°. **ÿ¨ŸáŸëÿ≤:** ÿ®ÿ∑ŸëŸÜ ÿßŸÑÿµŸàÿßŸÜŸä. ÿßŸÑÿ≤ÿ®ÿØÿ© = ÿ®ÿßÿ±ÿØÿ© ÿ®ÿ≥ ŸÑŸäŸÜÿ© (Ÿ°Ÿ®-Ÿ¢Ÿ†¬∞ŸÖ / Ÿ¶Ÿ•-Ÿ¶Ÿ®¬∞ŸÅ)ÿå ŸÖŸÇÿ∑ÿπÿ© ÿµÿ∫Ÿäÿ±. ÿßŸÑÿ®Ÿäÿ∂ = ÿ¥ÿ®Ÿá ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©. ÿßÿ∂ÿ±ÿ® ÿßŸÑÿ®Ÿäÿ∂ ŸàÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß ŸÅ ÿ∑ÿ®ŸÇ ŸÑŸàÿ≠ÿØŸá ÿ≤Ÿä ÿßŸÑŸÖÿ≠ÿ™ÿ±ŸÅŸäŸÜ.\nŸ¢. **ŸàŸÇÿ™ ÿßŸÑÿÆŸÅŸÇ ÿßŸÑÿπŸÉÿ≥Ÿä:** ŸÅÿßŸÑÿπÿ¨ÿßŸÜÿ©: ÿØŸÇŸäŸÇÿå ÿ≥ŸÉÿ±ÿå ŸÖŸÑÿ≠ÿå ÿµŸàÿØÿß. ÿÆŸÑÿ∑ÿ© ÿ≥ÿ±Ÿäÿπÿ©. ÿ≠ÿ∑ ÿ≠ÿ™ÿ™ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ÿßÿ±ÿØÿ©. ÿßÿÆŸÑÿ∑ ÿπŸÑŸâ ÿßŸÑŸàÿßÿ∑Ÿä ŸÑÿ≠ÿØ ŸÖÿß Ÿäÿ®ŸÇŸâ ÿ¥ŸÉŸÑŸá ÿ≤Ÿä ÿ±ŸÖŸÑ ŸÖÿ®ŸÑŸàŸÑ/ŸÅÿ™ÿßÿ™ (ÿßŸÑÿ≤ÿ®ÿØÿ© ÿ∫ŸÑŸÅÿ™ ÿßŸÑÿØŸÇŸäŸÇ = ÿßŸÑŸáÿØŸÅ ÿ™ÿ≠ŸÇŸÇ ‚úÖ). ÿ®ŸäÿßÿÆÿØ ŸÉÿßŸÖ ÿØŸÇŸäŸÇÿ©.\nŸ£. **ÿßŸÑÿ≥ŸàÿßŸäŸÑ ŸÖÿπ ÿßŸÑŸÜŸàÿßÿ¥ŸÅ:** ÿ≥ÿ±ÿπÿ© Ÿàÿßÿ∑Ÿäÿ©. ÿ≥ÿ±ÿ≥ÿ® ÿÆŸÑŸäÿ∑ ÿßŸÑÿ®Ÿäÿ∂/ŸÅÿßŸÜŸäŸÑŸäÿß ÿ®ÿ®ÿ∑ÿ°. ÿßÿÆŸÑÿ∑ Ÿäÿß ÿØŸàÿ® ŸÑÿ≠ÿØ ŸÖÿß *ÿ®ÿßŸÑÿπÿßŸÅŸäÿ©* ÿ™ŸÑŸÖ ÿπÿ¨ŸäŸÜÿ©. ŸÖŸÖŸÉŸÜ ÿ¥ŸÉŸÑŸáÿß Ÿäÿ®ŸÇŸâ ÿ®ÿßŸäÿ∏ ŸÅÿßŸÑÿ£ŸàŸÑ. ÿ≤ŸäÿßÿØÿ© ÿßŸÑÿÆŸÑÿ∑ ŸáŸà ÿßŸÑÿπÿØŸà ÿßŸÑÿ£ŸàŸÑ.\nŸ§. **ŸÇŸÑŸëÿ® (ÿ£ŸÇŸÑ ŸÖÿß ŸäŸÖŸÉŸÜ):** ÿ®ÿßŸÑÿ±ÿßÿ≠ÿ© ÿ∂ŸäŸÅ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ŸÖŸÅÿ±ŸàŸÖÿ© ŸÜÿßÿπŸÖ/ÿµÿ∫ŸÜŸàŸÜÿ©. ÿ£ŸÇŸÑ ÿ™ŸÇŸÑŸäÿ®ÿßÿ™ ŸÖŸÖŸÉŸÜÿ©.\nŸ•. **ÿ¥ŸÉŸëŸÑ ŸàÿßÿÆÿ®ÿ≤ ŸÅŸàÿ±Ÿãÿßÿßÿßÿß:** üí® ŸÖŸÖŸÜŸàÿπ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ!! ŸÅÿ±ŸÜ Ÿ°ŸßŸ•¬∞ŸÖ/Ÿ£Ÿ•Ÿ†¬∞ŸÅ. ÿ¥ŸÉŸëŸÑ ŸÉŸàÿ± ÿµÿ∫ŸÜŸàŸÜÿ© (~Ÿ° ŸÖ ŸÉ). ÿ≥Ÿäÿ® ŸÖÿ≥ÿßÿßÿßÿßÿßŸÅÿ© ŸÉÿ®Ÿäÿ±ÿ© (Ÿ£+ ÿ®Ÿàÿµÿ©!!). ÿ®Ÿäÿ™ŸÅÿ±ÿØŸàÿß ÿ®ÿ¨ŸÜŸàŸàŸàŸÜ.\nŸ¶. **ÿßÿÆÿ®ÿ≤ ŸÑÿ≠ÿØ ÿßŸÑŸÇÿ±ŸÖÿ¥ÿ©:** ÿßÿÆÿ®ÿ≤ Ÿ°Ÿ¢-Ÿ°Ÿ¶ ÿØŸÇŸäŸÇÿ© ŸÑÿ≠ÿØ ŸÖÿß ÿ™ÿ®ŸÇŸâ ŸÅŸÑÿßÿ™ ŸàŸÑŸàŸÜŸáÿß ÿØŸáÿ®Ÿä ŸÖŸÜ ÿßŸÑÿ≠ÿ±ŸÅ ŸÑŸÑÿ≠ÿ±ŸÅ. ŸÑŸÅ ÿßŸÑÿµŸäŸÜŸäÿ© ŸÖÿ±ÿ©. ŸÑŸà ÿ≤ŸàÿØÿ™ ÿßŸÑÿÆÿ®ÿ≤ ÿ≥ŸäŸÉÿß ÿØÿß ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ŸáŸÜÿß ÿ£ÿµŸÑÿßŸã.\nŸß. **ÿ®ÿ±ŸëÿØ ŸÜŸáÿßÿßÿßÿ¶ŸäÿßŸã ŸÑŸÑŸÇÿ±ŸÖÿ¥ÿ©:** ÿπ ÿßŸÑÿµŸäŸÜŸäÿ© Ÿ•-Ÿ°Ÿ† ÿØŸÇÿßŸäŸÇ (ÿßÿ≥ÿ™ŸÜŸâ ŸäŸÖÿ≥ŸÉŸàÿß ŸÜŸÅÿ≥ŸáŸÖ!). ÿ®ÿπÿØŸäŸÜ ÿπÿßŸÑÿ±ŸÅ Ÿäÿ®ÿ±ÿØŸàÿß Ÿ°Ÿ†Ÿ†%. ÿßŸÑŸÇÿ±ŸÖÿ¥ÿ© ÿ®ÿ™ÿ∏Ÿáÿ± ŸÑŸÖÿß Ÿäÿ®ÿ±ÿØŸàÿß ÿÆÿßÿßÿßÿßŸÑÿµ. ÿ≥ÿ≠ÿ±! ü™Ñ`,
                 // Easter Egg & Recs
                 stuffedTitle: 'ü§´ ŸáŸäŸáŸäŸáŸä ŸÑŸäŸÅŸÑ ÿ≥ÿ±Ÿä ÿ∑ŸÑÿπŸÑŸÉ! üéÆ‚ú®',
                 stuffedCongrats: 'Ÿäÿßÿßÿßÿßÿßÿßÿß Ÿàÿ≠ÿ¥ ÿßŸÑŸàÿ≠Ÿàÿ¥ ÿßŸÑŸÑŸä ÿßÿÆÿ™ÿßÿ± ÿßŸÑÿ™ÿÆŸäŸÜ! üëë ŸÑŸäŸÉ ÿ™ÿ≠ÿØŸäÿ´ ÿ•ÿ∂ÿßŸÅŸä: ‚ú®ŸÖŸàÿØ ÿßŸÑÿ≠ÿ¥Ÿà ÿßÿ™ŸÅÿπŸÑ!‚ú® ŸäŸÑÿß ŸÜÿπŸÖŸÑ ÿ≠ÿßÿ¨ÿßÿ™ ÿ∫ÿ±Ÿäÿ®ÿ©.',
                 stuffedHowTo: 'ÿßŸÑÿÆÿ∑ÿ© ŸÉÿßŸÑÿ¢ÿ™Ÿä: ÿ®ÿ∑Ÿëÿ∑ ŸÉŸàÿ±ÿ© ÿßŸÑÿπÿ¨ŸäŸÜ ÿßŸÑÿ™ÿÆŸäŸÜÿ©ÿå ÿßÿÆÿ±ŸÖŸáÿß ÿÆÿ±ŸÖ (ÿ®ÿßŸÑÿ±ÿßÿ≠ÿ©!)ÿå ÿßÿ≠ÿ¥Ÿä ~ŸÖ ÿµ ŸÜŸàÿ™ŸäŸÑÿß / ŸÉÿ±ŸäŸÖÿ© ÿßŸÑŸÅÿ≥ÿ™ŸÇ ÿ•ŸäÿßŸáÿß (ÿπÿßÿ±ŸÅŸáÿß ÿ£ŸÉŸäÿØ üòâ)ÿå ŸÑŸÖŸë ÿßŸÑÿπÿ¨ŸäŸÜ ÿ®ÿ≠ÿ∞ÿ±ÿå ÿßŸÇŸÅŸÑ ÿßŸÑÿ£ÿ∑ÿ±ÿßŸÅÿå ÿßÿÆÿ®ÿ≤ ŸäŸÖŸÉŸÜ ÿ≤ŸäÿßÿØÿ© ÿØŸÇŸäŸÇÿ© ŸàŸÑÿß ÿßÿ™ŸÜŸäŸÜ. ÿ≥ŸáŸÑÿ©ÿü ÿ•ŸÑŸâ ÿ≠ÿØ ŸÖÿßÿü',
                 pistachioTipTitle: 'ÿ≤ÿ®ÿØÿ© ÿßŸÑŸÅÿ≥ÿ™ŸÇ: ÿ•ÿπŸÑÿßŸÜ ŸÑŸÑÿµÿßŸÑÿ≠ ÿßŸÑÿπÿßŸÖ üì¢ ÿ≠ÿ±Ÿàÿ® ÿßŸÑŸÅÿ≥ÿ™ŸÇ',
                 pistachioTipDesc: "ÿßÿ≥ŸÖÿπŸàŸÜŸä ÿ∑Ÿäÿ®: ÿ£ÿ∫ŸÑÿ® ÿ≤ÿ®ÿØÿ© ÿßŸÑŸÅÿ≥ÿ™ŸÇ ÿßŸÑŸÑŸä ŸÅÿßŸÑŸàŸÇ ÿØŸä ÿ≤ÿ®ÿßŸÑÿ© ŸÖÿßŸäÿµÿ© üóëÔ∏è. ÿπÿßŸäÿ≤ ÿ™ÿØŸàŸÇ ŸÜÿπŸäŸÖ ÿßŸÑŸÅÿ≥ÿ™ŸÇ ÿßŸÑÿµÿßŸÅŸäÿü ÿßŸÑÿØŸáÿ® ÿßŸÑÿ≥ÿßŸäŸÑÿü ‚ú® Ÿäÿ®ŸÇŸâ 'ŸÉÿ±ŸäŸÖÿ© ŸÅÿ≥ÿ™ŸÇ ASM Foods'. ÿ•ÿØŸÖÿßŸÜ ÿÆÿ∑Ÿäÿ±. ÿ≠ÿ∞ÿ±ÿ™ ÿ£ŸáŸà. (ŸÖÿ¥ ÿ•ÿπŸÑÿßŸÜ... ÿ•ŸÑÿß ŸÑŸàÿü üëÄ)",
                 pistachioTipLink: 'ÿØŸàÿ≥ ÿπ ÿßŸÑŸÑŸäŸÜŸÉ ÿØÿß (ŸÖÿµÿ±)',
                 chocoTipTitle: 'ŸÖŸàÿπÿ∏ÿ© ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿßŸÑÿ£ÿ≥ÿ®ŸàÿπŸäÿ© üßê ÿßÿ≥ŸÖÿπŸàÿß Ÿäÿß ŸÉŸÅÿ±ÿ©',
                 chocoTipDesc: "ÿ∑Ÿäÿ® ŸàÿßŸÑŸÑŸá ÿ®ÿ¨ÿØ. ÿ£ÿ∫ŸÑÿ® ÿßŸÑÿ¥ŸàŸÉŸÑŸäÿ™ ÿ¥Ÿäÿ®ÿ≥ ÿ£ŸÇŸÑ ŸÖŸÜ ÿπÿßÿØŸä. ÿπÿßŸäÿ≤ ÿßŸÑÿ•ÿ≠ÿ≥ÿßÿ≥ ÿßŸÑÿØÿßŸäÿ® ÿßŸÑÿÆÿ±ÿßŸÅŸä ÿßŸÑŸÑŸä ÿ®ŸäÿπŸäÿ∑ ŸÖŸÜ ÿßŸÑÿ≥ÿπÿßÿØÿ©ÿü ÿ≤Ÿä ÿ¨ŸÑÿßŸÉÿ≥Ÿä/ÿØŸäÿ±Ÿä ŸÖŸäŸÑŸÉ ÿ®ÿ≥ *ÿ£ÿ≠ŸÑŸâ ŸÅÿπŸÑÿßŸã* (Ÿà #ŸÖŸÇÿßÿ∑ÿπÿ© ÿπÿ¥ÿßŸÜ ÿßŸÑŸÖÿ®ÿßÿØÿ¶ ‚ù§Ô∏èüáµüá∏)ÿü ŸÑÿßÿ≤ŸÖ ÿ™ŸÑÿßŸÇŸä 'Target Kualety Dropsy' **ÿ®ÿßŸÑŸÑÿ®ŸÜ**. ÿØŸä ÿßŸÑÿ¨ŸàŸáÿ±ÿ© ÿßŸÑŸÖÿ¨ŸáŸàŸÑÿ©. ÿ≥ÿ± ÿßŸÑÿ£ÿ≥ÿ±ÿßÿ±.",
                 chocoTipLink: 'ÿ¥ŸàŸÅ ŸÉŸàŸÜŸÉÿ™ ÿßŸÑÿ™ÿßÿ¨ÿ± (ŸÑŸäŸÜŸÉ ŸÅŸäÿ≥ÿ®ŸàŸÉ)',
                 chocoTipMilk: 'üö®üö®üö® ÿßÿ™ÿ£ŸÉÿØ Ÿ°Ÿ†Ÿ†Ÿ™ ÿ•ŸÜŸáÿß **ÿ®ÿßŸÑŸÑÿ®ŸÜ**. ÿßŸÑÿ∫ÿßŸÖŸÇÿ©... ŸäÿπŸÜŸä ÿπÿßÿØŸä. ÿ®ÿ≥ ÿßŸÑŸÑÿ®ŸÜ ÿØŸä ÿ¢ÿÆÿ± ŸÑŸäŸÅŸÑ ŸÅÿßŸÑŸÑÿπÿ®ÿ©. ÿßÿ≥ŸÖÿπ ŸÉŸÑÿßŸÖŸä.',
                 // Conclusion
                 conclusionTitle: 'ÿÆŸÑÿµÿßŸÜÿ© ÿ®ÿ¥ŸäÿßŸÉÿ©! üéâ ŸÜÿ¨ÿ≠ÿ™ ÿßŸÑŸÖŸáŸÖÿ©ÿü (ÿßŸÜÿ™ ÿßŸÑŸÑŸä ÿ™ŸÇÿ±ÿ± ŸáŸáŸá)',
                 conclusionDesc: 'ÿßŸÑŸÅÿ±ÿ∂Ÿäÿ©: ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ÿ¨ÿ®ÿßÿ±ÿ©. ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©: ÿ∑ÿ®ÿπÿßŸã ÿ£ŸäŸàŸá. ‚úÖ ÿµŸàÿ±ÿ™ÿü ŸÜÿ≤ŸëŸÑ ÿµŸàÿ± ÿØŸÑŸäŸÑ ÿπÿßŸÑÿ•ŸÜÿ≥ÿ™ÿß Ÿàÿ•ŸÑÿß ŸÉÿ£ŸÜŸÉ ŸÖÿπŸÖŸÑÿ™ÿ¥ ÿ≠ÿßÿ¨ÿ©! Ÿàÿ±ŸäŸáŸÖ ÿ¥ÿ∫ŸÑŸÉ! üí™',
                 conclusionTag: 'ŸÖŸÜÿ¥ŸÜ ÿßŸÑÿπÿ®ÿØ ŸÑŸÑŸá ŸäŸÖŸÉŸÜÿü ->',
                 conclusionGoForth: 'ÿ±Ÿàÿ≠ ÿßÿÆÿ®ÿ≤ ŸÅŸàÿ∂Ÿâ ÿ£ŸÉÿ™ÿ±. ÿßŸÜÿ™ ÿßŸÑÿ®ÿ∑ŸÑ ŸÅÿßŸÑŸÇÿµÿ©ÿå ÿπŸäÿ¥ ÿßŸÑÿØŸàÿ±. üíÖ‚ú®',
                 footerText: 'ÿßÿ™ÿπŸÖŸÑÿ™ ÿ®ÿßŸÑÿπŸÑŸÖ‚Ñ¢ÿå ÿ≤ÿ®ÿØÿ©üßàÿå ŸÜŸàÿ®ÿßÿ™ ŸÇŸÑŸÇüò∞ Ÿàÿ≥ÿ≠ÿ± ÿßŸÑÿ£ŸÉŸàÿßÿØ‚ú®',
                 // Error Messages
                 error_recipe_display: 'ŸÑÿß ŸÖÿ§ÿßÿÆÿ∞ÿ©! üòµ‚Äçüí´ ŸÖÿπÿ±ŸÅÿ™ÿ¥ ÿ£ÿπÿ±ÿ∂ ÿßŸÑŸàÿµŸÅÿ©.',
                 error_recipe_calculation: 'ÿßŸÑÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿµÿπÿ®ÿ© ü´† ŸÅÿ¥ŸÑÿ™ ŸÅŸä ÿ≠ÿ≥ÿßÿ® ÿßŸÑŸàÿµŸÅÿ©.',
                 error_missing_steps: 'Ÿäÿß ŸÜŸáÿßÿ± ÿ£ÿ®Ÿäÿ∂ÿå ÿßŸÑÿÆÿ∑Ÿàÿßÿ™ ÿ∂ÿßÿπÿ™ÿü ÿ®ŸÑÿ∫ ÿßŸÑÿ®ÿßÿ¥ŸÖŸáŸÜÿØÿ≥ ŸäŸÖŸÉŸÜÿü ü§∑‚Äç‚ôÇÔ∏è',
                 error_try_again: 'ÿ¨ÿ±ÿ® ÿ™ÿπŸÖŸÑ ÿ±ŸäŸÅÿ±Ÿäÿ¥ ÿ£Ÿà ÿ™ÿÆÿ™ÿßÿ± ÿ™ÿßŸÜŸä ŸÉÿØÿßÿü',
            }
        };

        // --- Helper Functions ---

        /**
         * Get translation string for the current language.
         * @param {string} key - The key for the language string.
         * @returns {string} The translated string or the key itself if not found.
         */
        const T = (key) => langStrings[state.currentLanguage]?.[key] || key;

        /**
         * Shows a warning message.
         * @param {string} messageKey - The language string key for the warning.
         */
        const showWarning = (messageKey) => {
            DOMElements.butterWarning.textContent = T(messageKey);
            DOMElements.butterWarning.style.display = 'block';
            // Optional: Scroll to the input field if it's far away
            // DOMElements.butterAmountInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
            DOMElements.butterAmountInput.focus(); // Focus input for correction
        };

        /**
         * Hides the warning message.
         */
        const hideWarning = () => {
            DOMElements.butterWarning.style.display = 'none';
        };

        /**
         * Validates butter input and returns amount in grams.
         * @returns {number} Butter amount in grams, or 0 if invalid.
         */
        function getValidatedButterGrams() {
            hideWarning(); // Hide previous warnings
            const amount = parseFloat(DOMElements.butterAmountInput.value);
            const unit = DOMElements.butterUnitSelect.value;

            if (isNaN(amount) || amount <= 0) {
                showWarning('butterWarning');
                return 0;
            }

            let grams = (unit === 'cups') ? amount * CONFIG.GRAMS_PER_CUP_BUTTER : amount;

            if (grams < CONFIG.MIN_BUTTER_GRAMS) {
                showWarning('butterWarning');
                return 0;
            }

            return grams;
        }

        /**
         * Calculates the scaled recipe based on butter input and cookie type.
         * @param {number} butterInGrams - User's butter input in grams.
         * @param {string} cookieType - 'classic', 'thick', or 'thin'.
         * @returns {object|null} Scaled recipe data or null if invalid type.
         */
        function calculateScaledRecipe(butterInGrams, cookieType) {
            const base = baseRecipes[cookieType];
            if (!base || !base.baseButter || base.baseButter <= 0 || typeof base.ingredients !== 'object') {
                console.error(`Invalid or incomplete base recipe for type: ${cookieType}`);
                return null;
            }

            const scalingFactor = butterInGrams / base.baseButter;
            const scaledIngredients = {};
            let totalDoughWeight = 0;

            for (const key in base.ingredients) {
                // Ensure the base ingredient structure is valid
                if (!Array.isArray(base.ingredients[key]) || base.ingredients[key].length < 2 || typeof base.ingredients[key][0] !== 'number') {
                     console.warn(`Skipping invalid ingredient format in base recipe: ${cookieType}.${key}`);
                     continue;
                }
                const ingredientGrams = base.ingredients[key][0] * scalingFactor;
                scaledIngredients[key] = {
                    grams: ingredientGrams,
                    unitType: base.ingredients[key][1]
                };
                totalDoughWeight += ingredientGrams; // Sum grams for thick yield calc
            }

            let yieldValue;
            if (cookieType === 'thick' && base.cookieSizeGrams && base.cookieSizeGrams > 0) {
                // Yield based on target weight for thick cookies
                yieldValue = Math.max(1, Math.round(totalDoughWeight / base.cookieSizeGrams)); // Ensure at least 1
            } else if (base.yieldPerBase && typeof base.yieldPerBase === 'number') {
                // Yield based on base recipe yield estimate
                yieldValue = Math.max(1, Math.round(base.yieldPerBase * scalingFactor)); // Ensure at least 1
            } else {
                 console.warn(`Missing or invalid yield information for cookie type: ${cookieType}. Defaulting yield to 0.`);
                yieldValue = 0; // Default if no yield info
            }

            return {
                ingredients: scaledIngredients,
                yield: yieldValue,
                notesKey: base.notes,
                stepsKey: base.steps,
                prepTechKeys: Array.isArray(base.prepTech) ? base.prepTech : [], // Ensure it's an array
                isThick: cookieType === 'thick'
            };
        }

        /**
         * Converts grams to a human-readable Imperial approximation (cups, tsp, etc.).
         * Improved fraction handling and formatting.
         * @param {number} grams - Amount in grams.
         * @param {string} unitType - Type of ingredient ('flour', 'sugar', 'salt', etc.).
         * @returns {string} Formatted Imperial string.
         */
        function formatImperial(grams, unitType) {
            // Helper for formatting fractions
            const formatFraction = (decimal) => {
                const tolerance = 0.08; // Allow slight variation for common fractions
                 if (Math.abs(decimal) < 0.05) return ''; // Ignore tiny fractions below ~1/16
                 if (Math.abs(decimal - 1/8) < tolerance) return '‚Öõ';
                 if (Math.abs(decimal - 1/4) < tolerance) return '¬º';
                 if (Math.abs(decimal - 1/3) < tolerance) return '‚Öì';
                 if (Math.abs(decimal - 3/8) < tolerance) return '‚Öú';
                 if (Math.abs(decimal - 1/2) < tolerance) return '¬Ω';
                 if (Math.abs(decimal - 5/8) < tolerance) return '‚Öù';
                 if (Math.abs(decimal - 2/3) < tolerance) return '‚Öî';
                 if (Math.abs(decimal - 3/4) < tolerance) return '¬æ';
                 if (Math.abs(decimal - 7/8) < tolerance) return '‚Öû';
                 // Fallback for less common fractions (e.g., 1/5, 1/6) - show decimal if no close match
                 return decimal.toFixed(1); // e.g., "0.2" instead of trying odd fractions
            };

             // Helper to format whole numbers and fractions
            const formatMixedNumber = (value, unitSingular, unitPlural) => {
                 if (value < 0.05 && (unitSingular.includes('tsp') || unitSingular.includes('Tbsp'))) return `~pinch ${unitSingular.split(' ')[1] || ''}`.trim();
                 if (value < 0.01) return `0 ${unitPlural}`; // If essentially zero

                 const whole = Math.floor(value + 0.01); // Add small epsilon for rounding near whole numbers
                 const fractional = value - whole;
                 let amountStr = "";

                 if (whole > 0) {
                     amountStr += `${whole}`;
                 }

                 const fractionStr = formatFraction(fractional);

                // Only add fraction string if it's meaningful and not just a fallback decimal '0.0'
                if (fractionStr && fractionStr !== '0.0') {
                    if (whole > 0 && fractionStr.length > 0) amountStr += " "; // Space between whole and fraction
                     amountStr += fractionStr;
                 }

                 if (amountStr === "") { // Case where it's purely fractional (less than 1)
                     amountStr = formatFraction(value);
                      if (!amountStr || amountStr === '0.0') { // Handle cases that resolve to nothing or 0.0 fractionally
                        // Decide if pinch is appropriate based on unit type (small volumes)
                        if (value < 0.1 && (unitSingular.includes('tsp') || unitSingular.includes('Tbsp'))) {
                             return `~pinch ${unitSingular.split(' ')[1] || ''}`.trim();
                         } else {
                            return `${value.toFixed(1)} ${unitPlural}`; // Show small decimal for larger units
                         }
                      }
                 }

                // Pluralization based on whether the value is effectively > 1
                 const unit = Math.abs(value - 1) < 0.05 ? unitSingular : unitPlural; // Use singular if value is very close to 1

                return `${amountStr} ${unit}`;
             };

            // Use CONFIG constants for conversions
             switch (unitType) {
                case 'butter':
                    return formatMixedNumber(grams / CONFIG.GRAMS_PER_CUP_BUTTER, 'cup butter', 'cups butter');
                 case 'sugar': // Covers granulatedSugar, lightBrownSugar implicitly if base recipe uses 'sugar' type
                 case 'granulatedSugar':
                    return formatMixedNumber(grams / CONFIG.GRAMS_PER_CUP_GRAN_SUGAR, 'cup sugar', 'cups sugar');
                case 'lightBrownSugar':
                     return formatMixedNumber(grams / CONFIG.GRAMS_PER_CUP_BROWN_SUGAR, 'cup brown sugar', 'cups brown sugar');
                 case 'flour':
                    return formatMixedNumber(grams / CONFIG.GRAMS_PER_CUP_FLOUR, 'cup flour', 'cups flour');
                case 'chocolate':
                     const cupsChoc = grams / CONFIG.GRAMS_PER_CUP_CHOC_CHIPS;
                     // If less than ~1/4 cup, consider showing Tbsp (approx 16 Tbsp/cup)
                     if (cupsChoc < 0.25 && cupsChoc > 0.02) {
                         const tbspChoc = cupsChoc * 16;
                         return formatMixedNumber(tbspChoc, 'Tbsp choc', 'Tbsp choc');
                     }
                    return formatMixedNumber(cupsChoc, 'cup choc chips', 'cups choc chips');
                case 'salt':
                     return formatMixedNumber(grams / CONFIG.GRAMS_PER_TSP_SALT, 'tsp salt', 'tsps salt');
                 case 'bakingSoda':
                    return formatMixedNumber(grams / CONFIG.GRAMS_PER_TSP_BAKING_SODA, 'tsp baking soda', 'tsps baking soda');
                 case 'bakingPowder':
                    return formatMixedNumber(grams / CONFIG.GRAMS_PER_TSP_BAKING_POWDER, 'tsp baking powder', 'tsps baking powder');
                 case 'vanilla':
                     return formatMixedNumber(grams / CONFIG.GRAMS_PER_TSP_VANILLA, 'tsp vanilla', 'tsps vanilla');
                 case 'prepWater': // Treat water/milk hydration similarly (approx 5g/tsp)
                     return formatMixedNumber(grams / 4.9, 'tsp water/milk', 'tsps water/milk');
                 case 'milkPowder':
                    const tbspMilk = grams / CONFIG.GRAMS_PER_TBSP_MILK_POWDER;
                     return formatMixedNumber(tbspMilk, 'Tbsp milk powder', 'Tbsp milk powder'); // Always Tbsp
                 case 'egg':
                    // Calculate number of eggs, ensuring at least 1 if grams > 0, handle pluralization
                     const numEggs = Math.max(grams > 0 ? 1 : 0, Math.round(grams / CONFIG.GRAMS_PER_LARGE_EGG));
                    return `${numEggs} large ${numEggs === 1 ? 'egg' : 'eggs'}`;
                 default:
                     console.warn("Unknown unitType for Imperial formatting:", unitType, "- defaulting to grams.");
                     return `${Math.round(grams)} g`; // Fallback to grams if type is unknown
             }
        }


        /**
         * Formats an ingredient amount for display based on language and unit system.
         * @param {number} grams - Ingredient amount in grams.
         * @param {string} unitType - Type of ingredient ('flour', 'sugar', etc.).
         * @returns {string} HTML formatted string for the amount.
         */
        function formatIngredientAmount(grams, unitType) {
             // Always calculate metric for primary display or AR display
             const metricAmount = Math.round(grams);
             let metricText;

             if (metricAmount === 0 && grams > 0.1) { // Handle small amounts that round to 0 but are present
                 metricText = `~<1 ${T('grams')}`; // Indicate a small amount
             } else if (metricAmount === 0 && grams <= 0.1) {
                 metricText = `0 ${T('grams')}`; // Show 0 if truly negligible or zero
             } else {
                 metricText = `${metricAmount} ${T('grams')}`;
             }


            if (state.currentLanguage === 'en') {
                 if (state.currentUnitSystemEN === 'metric') {
                    return metricText;
                 } else {
                    // Convert to imperial ONLY for display if selected
                     return formatImperial(grams, unitType);
                 }
            } else { // Arabic - Always show grams, add cups optionally IF relevant
                let cupsText = '';
                const cupTypes = ['butter', 'sugar', 'flour', 'chocolate', 'granulatedSugar', 'lightBrownSugar'];
                 if (cupTypes.includes(unitType)) {
                    const cupEq =
                        unitType === 'butter' ? CONFIG.GRAMS_PER_CUP_BUTTER :
                        unitType === 'flour' ? CONFIG.GRAMS_PER_CUP_FLOUR :
                        unitType === 'granulatedSugar' ? CONFIG.GRAMS_PER_CUP_GRAN_SUGAR :
                        unitType === 'lightBrownSugar' ? CONFIG.GRAMS_PER_CUP_BROWN_SUGAR :
                         unitType === 'chocolate' ? CONFIG.GRAMS_PER_CUP_CHOC_CHIPS :
                         CONFIG.GRAMS_PER_CUP_GRAN_SUGAR; // Fallback just in case

                    if (cupEq > 0) { // Avoid division by zero
                        const cupsValue = (grams / cupEq);
                         // Only show cups if it's a reasonable amount (e.g., >= ~1/8 cup)
                         if (cupsValue >= 0.1) {
                             // Use formatImperial's logic (via formatMixedNumber) for consistent fraction formatting
                             const cupsFormatted = formatMixedNumber(cupsValue, T('cups'), T('cups')); // Get "X cups" string
                             // Extract the amount part (remove the unit word "cups")
                             const cupAmountStr = cupsFormatted.replace(T('cups'), '').trim();

                            if (cupAmountStr && !cupAmountStr.startsWith('~pinch') && cupAmountStr !== '0') { // Don't show pinch or zero as cups
                                cupsText = ` <span class="unit-cups">(${cupAmountStr} ${T('cups')})</span>`;
                             }
                        }
                    }
                 }
                 // Prioritize showing Grams clearly in AR, append optional cups
                 return `<span class="unit-g">${metricText}</span>${cupsText}`;
            }
        }

        /**
         * Renders the calculated recipe into the DOM.
         * @param {object} recipeData - The scaled recipe object from calculateScaledRecipe.
         */
        function displayRecipe(recipeData) {
             if (!recipeData || typeof recipeData.ingredients !== 'object') {
                console.error("Cannot display recipe: recipeData is null or invalid.");
                 // Show user friendly error
                 DOMElements.recipeContent.innerHTML = `<h2 class="warning">${T('error_recipe_display')}</h2> <p>${T('error_try_again')}</p>`;
                 DOMElements.recipeDisplaySection.style.display = 'block';
                 DOMElements.recipeDisplaySection.scrollIntoView({ behavior: 'smooth', block: 'start' });
                 return;
             }

            // --- Get Translated Texts ---
            const cookieName = T(`${state.selectedCookieType}Title`);
             const yieldNum = recipeData.yield;
            let yieldLabelKey = yieldNum === 1 ? 'cookie' : 'cookies'; // Default
            if (state.selectedCookieType === 'thick') {
                yieldLabelKey = yieldNum === 1 ? 'largeCookie' : 'largeCookies';
             }
            const yieldText = `${yieldNum} ${T(yieldLabelKey)}`;
            const recipeTitleText = T('recipeTitle').replace('{cookieName}', cookieName);
            const approxYieldText = T('approxYield');
            const ingredientsTitleText = T('ingredientsTitle');
            const prepTitleText = T('prepTitle');
            const stepsTitleText = T('stepsTitle');
            const proTipsTitleText = T('proTipsTitle');


            // --- Build Ingredients List (More Safely) ---
            const ingredientsList = document.createElement('ul');
             Object.entries(recipeData.ingredients).forEach(([key, item]) => {
                const ingredientNameText = T(key) || key; // Get translated name text (fallback to key)
                const formattedAmountHtml = formatIngredientAmount(item.grams, item.unitType); // Get amount HTML

                const li = document.createElement('li');
                const strong = document.createElement('strong');
                strong.innerHTML = formattedAmountHtml; // Amount might have HTML spans
                li.appendChild(strong);
                 // Append name as a text node for safety after the strong tag
                 li.appendChild(document.createTextNode(` ${ingredientNameText}`));
                 ingredientsList.appendChild(li);
            });

            // --- Build Prep Techniques HTML ---
            let prepTechHtml = `<h3 class="prep-tech-title">${prepTitleText}</h3>`;
            if (recipeData.prepTechKeys && recipeData.prepTechKeys.length > 0) {
                 recipeData.prepTechKeys.forEach(key => {
                     const titleKey = `prepTechTitle_${key}`;
                     const descKey = `prepTechDesc_${key}`;
                     const titleText = T(titleKey);
                     const descText = T(descKey);
                     // Check BOTH title and description exist and were translated
                     if (titleText !== titleKey && descText !== descKey) {
                         prepTechHtml += `
                            <div class="pro-tip note">
                                <h4>${titleText}</h4>
                                <p>${descText}</p> {/* Assuming descText may contain <br> etc */}
                            </div>`;
                     } else {
                         console.warn(`Missing translation for prep technique title or desc: ${key} (Lang: ${state.currentLanguage})`);
                     }
                 });
            }


             // --- Build Steps HTML (Improved formatting resilience) ---
             let stepsHtml = `<h3 class="steps-title">${stepsTitleText}</h3><ol>`;
             const stepsString = T(recipeData.stepsKey);
             if (stepsString && stepsString !== recipeData.stepsKey) { // Check if translation exists
                 const stepsArray = stepsString.split('\n');
                 stepsArray.forEach(stepText => {
                    const trimmedStep = stepText.trim();
                     if (trimmedStep) {
                         // Basic safe formatting: Find **bold** text. Sanitize slightly.
                         let formattedStepHtml = trimmedStep
                            .replace(/^\s*\d+\.?\s*/, '') // Remove leading numbers/dots/spaces
                            .replace(/</g, "<").replace(/>/g, ">") // Basic tag sanitization
                            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>'); // Apply bold AFTER sanitization

                         stepsHtml += `<li>${formattedStepHtml}</li>`; // Use innerHTML because of <strong>
                     }
                 });
             } else {
                 console.warn(`Missing translation for steps: ${recipeData.stepsKey} (Lang: ${state.currentLanguage})`);
                 stepsHtml += `<li>${T('error_missing_steps')}</li>`; // Add placeholder error
             }
             stepsHtml += `</ol>`;

             // --- Build Notes HTML ---
             let notesHtml = '';
             const notesString = T(recipeData.notesKey);
             if (notesString && notesString !== recipeData.notesKey) {
                 notesHtml = `
                    <div class="pro-tip">
                        <h4>${proTipsTitleText}</h4>
                        <p>${notesString}</p> {/* Assuming notesString might have simple HTML like <br> */}
                     </div>`;
             } else {
                 console.warn(`Missing translation for notes: ${recipeData.notesKey} (Lang: ${state.currentLanguage})`);
             }

             // --- Construct final structure in the DOM ---
             // Clear previous content
             DOMElements.recipeContent.innerHTML = '';

             // Create and append elements (more robust than one innerHTML call)
             const h2 = document.createElement('h2');
             h2.textContent = recipeTitleText;
             DOMElements.recipeContent.appendChild(h2);

             const pYield = document.createElement('p');
             pYield.className = 'recipe-yield';
             pYield.textContent = `${approxYieldText} ${yieldText}`;
             DOMElements.recipeContent.appendChild(pYield);

             // Inject Prep Tech HTML (already built string)
             const prepDiv = document.createElement('div');
             prepDiv.innerHTML = prepTechHtml;
             DOMElements.recipeContent.appendChild(prepDiv);

             // Inject Ingredients Title and List
             const h3Ingredients = document.createElement('h3');
             h3Ingredients.className = 'ingredients-title';
             h3Ingredients.textContent = ingredientsTitleText;
             DOMElements.recipeContent.appendChild(h3Ingredients);
             DOMElements.recipeContent.appendChild(ingredientsList); // Append the <ul> we built

             // Inject Steps HTML (already built string)
             const stepsDiv = document.createElement('div');
             stepsDiv.innerHTML = stepsHtml;
             DOMElements.recipeContent.appendChild(stepsDiv);

             // Inject Notes HTML (already built string)
             const notesDiv = document.createElement('div');
             notesDiv.innerHTML = notesHtml;
             DOMElements.recipeContent.appendChild(notesDiv);


             // --- Show/Hide Sections AFTER updating content ---
             DOMElements.stuffedEasterEgg.style.display = recipeData.isThick ? 'block' : 'none';
             DOMElements.chocolateRecommendation.style.display = 'block';
             DOMElements.recipeDisplaySection.style.display = 'block';


             // --- Apply language updates to dynamic sections ---
             // Update static text within these revealed sections if they have data-attributes
             updateLanguageContent(DOMElements.recipeDisplaySection); // Apply to static parts within recipe display
             if (recipeData.isThick) {
                 updateLanguageContent(DOMElements.stuffedEasterEgg);
             }
             updateLanguageContent(DOMElements.chocolateRecommendation);


             // --- Smooth scroll to the displayed recipe section ---
              // Use a small delay to ensure the layout is stable before scrolling
             setTimeout(() => {
                DOMElements.recipeDisplaySection.scrollIntoView({ behavior: 'smooth', block: 'start' });
             }, 100); // 100ms delay, adjust if needed
         }


        /**
         * Updates text content based on the current language. Applies to ALL elements with data-attributes within the parent.
         * @param {Element} [parentElement=document.body] - The container element to update.
         */
         function updateLanguageContent(parentElement = document.body) {
            // Find all elements with translation data-attributes within the parent
             const elements = parentElement.querySelectorAll('[data-en], [data-ar]'); // Select elements with either attribute for broader update

            elements.forEach(el => {
                const langKey = state.currentLanguage; // 'en' or 'ar'
                 const translation = el.dataset[langKey]; // Get translation from data-* attribute

                if (translation !== undefined) {
                    // Update based on element type
                    if (el.tagName === 'INPUT' && el.placeholder !== undefined) {
                         el.placeholder = translation;
                     } else if (el.tagName === 'OPTION') {
                         // Update option text content
                         el.textContent = translation;
                     } else if (el.tagName === 'TEXTAREA' && el.placeholder !== undefined) {
                        el.placeholder = translation;
                    } else if (el.tagName === 'BUTTON' || el.tagName === 'A' || el.tagName === 'H1' || el.tagName === 'H2' || el.tagName === 'H3' || el.tagName === 'H4' || el.tagName === 'P' || el.tagName === 'SPAN' || el.tagName === 'STRONG' || el.tagName === 'DIV' || el.tagName === 'FOOTER' || el.tagName === 'LABEL' || el.tagName === 'LI') {
                         // Use innerHTML for elements that might contain child HTML (like <strong>, <br>)
                         // Ensure the translation itself is reasonably safe if allowing HTML.
                         el.innerHTML = translation;
                    } else {
                         // Fallback for other simple text elements like <title> (if targeted)
                        el.textContent = translation;
                     }
                } else {
                     // Optional: Warn if translation is missing for the *current* language
                     // console.warn(`Missing translation for lang "${langKey}" in element:`, el);
                 }
            });

             // === Update elements WITHOUT data attributes (like toggle buttons & select options) ===
             // These only need updating when the whole body is targeted
             if (parentElement === document.body) {
                // Update Language Toggle Button Text
                DOMElements.langToggleButton.textContent = T(state.currentLanguage === 'en' ? 'toggleArabic' : 'toggleEnglish');

                // Update Butter Unit Select Options text based on current language
                 const butterUnitOptions = DOMElements.butterUnitSelect.options;
                 for (let i = 0; i < butterUnitOptions.length; i++) {
                     const option = butterUnitOptions[i];
                     // The option's value ('grams' or 'cups') is used as the key for translation
                     option.textContent = T(option.value);
                 }

                 // Update Unit Toggle Button visuals (text and visibility)
                updateUnitButtonVisuals();
            }
             // === Set Page Direction ===
             // Always set direction based on current language
             DOMElements.htmlElement.setAttribute('dir', state.currentLanguage === 'ar' ? 'rtl' : 'ltr');
             DOMElements.htmlElement.setAttribute('lang', state.currentLanguage); // Also update lang attribute

             // Apply a class to the body for language-specific styling if needed
             document.body.classList.remove('lang-en', 'lang-ar');
             document.body.classList.add(`lang-${state.currentLanguage}`);
        }


        /** Updates unit toggle button text/visibility and butter select visibility based on language */
         function updateUnitButtonVisuals() {
             if (state.currentLanguage === 'en') {
                // Update EN unit toggle button text based on current EN system state
                 DOMElements.unitToggleButton.textContent = T(state.currentUnitSystemEN === 'metric' ? 'unitImperial' : 'unitMetric');
                 // Show the unit toggle button for EN
                DOMElements.unitToggleButton.style.display = 'inline-block';
                 // Hide the butter unit <select> element if EN & Imperial is selected
                 // Show it if EN & Metric is selected
                 DOMElements.butterUnitSelect.style.display = state.currentUnitSystemEN === 'imperial' ? 'none' : 'inline-block';
                 // If hiding the select, make sure the input reflects 'cups' conceptually
                 // Note: Validation always uses grams, this is just for user perception.
                 if (state.currentUnitSystemEN === 'imperial') {
                     // Maybe update placeholder or label if needed? For now, just hiding select.
                 }

             } else { // Arabic Mode
                 // ARABIC: Hide the separate Metric/Imperial toggle button entirely
                DOMElements.unitToggleButton.style.display = 'none';
                 // ARABIC: Always show the grams/cups <select> for butter input
                DOMElements.butterUnitSelect.style.display = 'inline-block';
             }
        }

         /** Handles language toggle */
         function handleLanguageToggle() {
            // 1. Toggle the language state
            state.currentLanguage = (state.currentLanguage === 'en') ? 'ar' : 'en';

            // 2. Reset EN unit system to default when switching TO English
             if (state.currentLanguage === 'en') {
                 state.currentUnitSystemEN = CONFIG.DEFAULT_UNIT_EN;
             }

             // 3. Update ALL language content on the page first based on the new state
             updateLanguageContent(); // Target document.body implicitly, which also updates button visuals

             // 4. Re-display recipe (if one is currently active) using the NEW language translations & unit formats
             if (state.selectedCookieType && state.baseButterGrams > 0) {
                const scaledRecipe = calculateScaledRecipe(state.baseButterGrams, state.selectedCookieType);
                 if (scaledRecipe) {
                    // displayRecipe will now use the updated state.currentLanguage and T() helper
                    displayRecipe(scaledRecipe);
                 } else {
                    console.error("Error recalculating recipe on language toggle.");
                    // Clear or show error in recipe display area
                     DOMElements.recipeContent.innerHTML = `<h2 class="warning">${T('error_recipe_calculation')}</h2>`;
                     DOMElements.recipeDisplaySection.style.display = 'block';
                 }
             }
             // Button visuals are updated as part of updateLanguageContent() when called on body.
             console.log(`Language switched to: ${state.currentLanguage}`);
        }

        /** Handles unit system toggle (for English only) */
         function handleUnitToggle() {
            // Guard clause: This toggle only works when the language is English
            if (state.currentLanguage !== 'en') {
                 console.log("Unit toggle ignored in non-English language.");
                return;
             }

             // 1. Toggle the English unit system state
             state.currentUnitSystemEN = (state.currentUnitSystemEN === 'metric') ? 'imperial' : 'metric';
             console.log(`English unit system toggled to: ${state.currentUnitSystemEN}`);

            // 2. Update button visuals (text/visibility) & potentially the butter input select visibility
            updateUnitButtonVisuals();

             // 3. Re-display the recipe with new unit formatting IF a recipe is active
             if (state.selectedCookieType && state.baseButterGrams > 0) {
                const scaledRecipe = calculateScaledRecipe(state.baseButterGrams, state.selectedCookieType);
                if (scaledRecipe) {
                    // displayRecipe uses state.currentUnitSystemEN to format amounts
                    displayRecipe(scaledRecipe);
                 } else {
                    console.error("Error recalculating recipe on unit toggle.");
                    DOMElements.recipeContent.innerHTML = `<h2 class="warning">${T('error_recipe_calculation')}</h2>`;
                     DOMElements.recipeDisplaySection.style.display = 'block';
                 }
             }
        }


        /** Handles the click on the "Start Experiment" button */
         function handleStartExperiment() {
            console.log("Start Experiment Clicked");
            const butterGrams = getValidatedButterGrams();
             if (butterGrams > 0) {
                 state.baseButterGrams = butterGrams; // Store the valid amount
                 console.log(`Base butter set to: ${state.baseButterGrams}g`);

                 // Reveal cookie selection, hide recipe sections initially
                 DOMElements.cookieSelectionSection.style.display = 'block';
                 DOMElements.recipeDisplaySection.style.display = 'none';
                 DOMElements.stuffedEasterEgg.style.display = 'none';
                 DOMElements.chocolateRecommendation.style.display = 'none';

                // Reset any previous cookie selection visual state
                 if (DOMElements.cookieOptions) { // Check if NodeList exists
                     DOMElements.cookieOptions.forEach(opt => opt.classList.remove('selected'));
                 }
                state.selectedCookieType = null; // Clear selected type state

                 // Scroll smoothly down to the selection area
                 DOMElements.cookieSelectionSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
            } else {
                console.log("Butter validation failed.");
                // If butterGrams is 0, the validation function already showed the warning.
            }
        }

         /** Handles clicking on a cookie type option using event delegation */
        function handleCookieSelection(event) {
            // Find the closest ancestor which is a cookie option
            const selectedOption = event.target.closest('.cookie-option');

            // If the click wasn't inside a relevant option, ignore it
             if (!selectedOption) return;

             console.log("Cookie Option Clicked:", selectedOption.dataset.cookieType);

            // Pre-condition check: Must have entered a valid butter amount first
            if (state.baseButterGrams <= 0) {
                 console.log("Butter amount not set, showing warning.");
                showWarning('butterWarning'); // Remind user to enter butter amount
                 // Scroll back up to the butter input?
                 DOMElements.butterAmountInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
                 return;
            }

            // Update visuals: Deselect all siblings, then select the clicked one
             if (DOMElements.cookieOptions) {
                DOMElements.cookieOptions.forEach(opt => opt.classList.remove('selected'));
             }
             selectedOption.classList.add('selected');

             // Get the selected cookie type from the data attribute
            const newCookieType = selectedOption.dataset.cookieType;
            if (!newCookieType || !baseRecipes[newCookieType]) { // Also check if type exists in recipes
                console.error("Clicked cookie option has invalid or missing 'data-cookie-type':", newCookieType);
                 // Show user friendly error maybe?
                 return;
             }
            state.selectedCookieType = newCookieType; // Update state
             console.log(`Selected cookie type: ${state.selectedCookieType}`);

            // Calculate the recipe based on stored butter amount and new type
             const scaledRecipe = calculateScaledRecipe(state.baseButterGrams, state.selectedCookieType);

            // Display the recipe (or handle calculation errors)
             if (scaledRecipe) {
                 displayRecipe(scaledRecipe);
             } else {
                console.error(`Failed to calculate recipe for selected type: ${state.selectedCookieType}`);
                 // Show an error message in the recipe display area
                 DOMElements.recipeContent.innerHTML = `<h2 class="warning">${T('error_recipe_calculation')}</h2> <p>${T('error_try_again')}</p>`;
                DOMElements.recipeDisplaySection.style.display = 'block';
                 // No need to scroll here, error appears where recipe would be
             }
        }


        // --- Event Listeners ---
         console.log("Attaching event listeners...");

        if (DOMElements.startExperimentBtn) {
            DOMElements.startExperimentBtn.addEventListener('click', handleStartExperiment);
        } else { console.error("Start Experiment button not found!"); }

        // Instantly hide warning on user input/change for butter
        if (DOMElements.butterAmountInput) {
             DOMElements.butterAmountInput.addEventListener('input', hideWarning);
         }
        if (DOMElements.butterUnitSelect) {
            DOMElements.butterUnitSelect.addEventListener('change', hideWarning);
        }

        // Use event delegation for cookie selection clicks on their container
        // Make sure you have a container div with id="cookie-options-container" around your .cookie-option divs in HTML
         if (DOMElements.cookieOptionsContainer) {
            DOMElements.cookieOptionsContainer.addEventListener('click', handleCookieSelection);
         } else { console.error("Cookie options container not found for event delegation!"); }


        // Language and Unit toggle listeners
         if (DOMElements.langToggleButton) {
            DOMElements.langToggleButton.addEventListener('click', handleLanguageToggle);
         } else { console.error("Language toggle button not found!"); }

        if (DOMElements.unitToggleButton) {
             DOMElements.unitToggleButton.addEventListener('click', handleUnitToggle);
        } else { console.error("Unit toggle button not found!"); }


        // --- Initial Page Setup ---
         console.log("Running initial setup...");
         updateLanguageContent(); // Apply initial language texts and button states based on default state
         console.log("Gen Z Cookie Calculator Initialized successfully! ‚ú®");

    }); // End DOMContentLoaded

 }()); // End IIFE
// --- END OF REFINED SCRIPT ---
