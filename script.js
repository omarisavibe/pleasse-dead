document.addEventListener('DOMContentLoaded', () => {
    // --- DOM Elements ---
    const butterAmountInput = document.getElementById('butter-amount');
    const butterUnitSelect = document.getElementById('butter-unit');
    const startExperimentBtn = document.getElementById('start-experiment-btn');
    const butterWarning = document.getElementById('butter-warning');
    const cookieSelectionSection = document.getElementById('cookie-selection-section');
    const recipeDisplaySection = document.getElementById('recipe-display-section');
    const recipeContent = document.getElementById('recipe-content');
    const cookieOptions = document.querySelectorAll('.cookie-option');
    const stuffedEasterEgg = document.getElementById('stuffed-easter-egg');
    const chocolateRecommendation = document.getElementById('chocolate-recommendation');
    const langToggleButton = document.getElementById('lang-toggle');
    const unitToggleButton = document.getElementById('unit-toggle');
    const htmlElement = document.documentElement;

    // --- State Variables ---
    let currentLanguage = 'en';
    let currentUnitSystem = 'metric'; // 'metric' or 'imperial' for EN, 'grams' or 'cups' for AR
    let baseButterGrams = 0; // User's input converted to grams
    let selectedCookieType = null;

    // --- Constants ---
    const GRAMS_PER_CUP_BUTTER = 226.8; // Standard density
    const GRAMS_PER_CUP_FLOUR = 125; // Average AP flour
    const GRAMS_PER_CUP_GRAN_SUGAR = 200;
    const GRAMS_PER_CUP_BROWN_SUGAR = 213; // Packed
    const GRAMS_PER_TSP_SALT = 6;
    const GRAMS_PER_TSP_BAKING_SODA = 4.8;
    const GRAMS_PER_TSP_BAKING_POWDER = 4;
    const GRAMS_PER_LARGE_EGG = 50; // Average weight without shell
    const GRAMS_PER_TSP_VANILLA = 4.2;
    const GRAMS_PER_CUP_CHOC_CHIPS = 170; // Approx
    const GRAMS_PER_TBSP_MILK_POWDER = 7; // Approx Non-Fat Dry Milk

    // --- Base Recipes (Based on OCR Text - Using 284g butter base where specified) ---
    // All base amounts in GRAMS for easy scaling
    const baseRecipes = {
        classic: {
            baseButter: 284, // From OCR Text
            yieldPerBase: 30, // Approx. yield for 284g butter recipe
            ingredients: {
                // Name: [Base Grams, Unit Type for Conversion]
                granulatedSugar: [200, 'sugar'],
                lightBrownSugar: [200, 'sugar'],
                largeEggs: [100, 'egg'], // 2 eggs
                vanillaExtract: [8.4, 'vanilla'], // 2 tsp
                allPurposeFlour: [420, 'flour'],
                tableSalt: [6, 'salt'], // 1 tsp
                bakingPowder: [4, 'bakingPowder'], // 1 tsp
                bakingSoda: [2.4, 'bakingSoda'], // 1/2 tsp
                chocolateChips: [454, 'chocolate'],
                prepWater: [9.4, 'water'] // ~2 tsp per 284g base butter for hydration
            },
            notes: 'classicNotes', // Key for language strings
            prepTech: ['brownButter', 'hydrateButter', 'chillButterClassicThick'],
            steps: 'classicSteps'
        },
        thick: {
            baseButter: 284, // From OCR Text
            yieldPerBase: 10, // Approx. yield for LARGE cookies
            cookieSizeGrams: 140, // Approx size per cookie (4-6oz)
            ingredients: {
                granulatedSugar: [100, 'sugar'],
                lightBrownSugar: [200, 'sugar'],
                toastedMilkPowder: [15, 'milkPowder'], // ~2.5 Tbsp
                largeEggs: [100, 'egg'], // 2 eggs
                vanillaExtract: [8.4, 'vanilla'], // 2 tsp
                allPurposeFlour: [420, 'flour'],
                tableSalt: [6, 'salt'], // 1 tsp
                bakingPowder: [5, 'bakingPowder'], // 1 1/4 tsp (OCR says 1 1/4 tsp)
                // NO Baking Soda
                chocolateChips: [567, 'chocolate'],
                prepWater: [9.4, 'water'] // ~2 tsp hydration
            },
            notes: 'thickNotes',
            prepTech: ['brownButter', 'hydrateButter', 'chillButterClassicThick', 'toastMilkPowder'],
            steps: 'thickSteps'
        },
        thin: {
            baseButter: 284, // From OCR Text
            yieldPerBase: 42, // Approx. yield for 284g butter recipe
            ingredients: {
                granulatedSugar: [300, 'sugar'], // High granulated
                lightBrownSugar: [200, 'sugar'],
                largeEggs: [100, 'egg'], // 2 eggs
                vanillaExtract: [8.4, 'vanilla'], // 2 tsp
                allPurposeFlour: [420, 'flour'],
                tableSalt: [6, 'salt'], // 1 tsp
                bakingSoda: [7.2, 'bakingSoda'], // 1 1/2 tsp (High soda)
                // NO Baking Powder
                chocolateChips: [340, 'chocolate'], // Less chocolate, mini/chopped
                prepWater: [9.4, 'water'] // ~2 tsp hydration (can be debated for thin, but keeping consistent with OCR hydr.)
            },
            notes: 'thinNotes',
            prepTech: ['brownButter', 'hydrateButter', 'chillButterThin'], // Specific chilling for reverse cream
            steps: 'thinSteps'
        }
    };

    // --- Language Strings ---
    const langStrings = {
        en: {
            // Toggles & Units
            toggleArabic: 'ÿπÿ±ÿ®Ÿä',
            toggleEnglish: 'English',
            unitMetric: 'Switch to Imperial (cups, tsp)',
            unitImperial: 'Switch to Metric (g, ml)',
            unitGrams: 'Grams (g)',
            unitCups: 'Cups (cups)',
            // Butter Input
            butterVarTitle: 'Step 1: Butter Up! üßà',
            butterVarDesc: 'Great cookies need the perfect amount of butter. So, how much of this golden goodness are you using? Be precise, chef! üë©‚Äçüç≥',
            grams: 'grams',
            cups: 'cups',
            butterWarning: 'Yo, enter a valid butter amount (at least 100g or about 1/2 cup). Don‚Äôt leave me hanging! üôÉ',
            beginExperiment: 'Let‚Äôs Bake! üç™',
            // Cookie Selection
            phenotypeTitle: 'Step 2: Pick Your Cookie Vibe üç™',
            phenotypeDesc: 'What kind of cookie are you feeling today? Choose your adventure:',
            thinTitle: 'The Crispy AF Cracker',
            thinDesc: 'So thin, it‚Äôs basically a cookie flex. Perfect for dunking or just flexing on your friends. üòé',
            classicTitle: 'The OG Balanced Baddie',
            classicDesc: 'Chewy, crispy, and always down to party. The crowd-pleaser that never misses. üéâ',
            thickTitle: 'The Thicc King',
            thickDesc: 'So gooey, it‚Äôll make your taste buds do a happy dance. Pure indulgence, no cap. üíÉ',
            // Recipe Display
            recipeTitle: '{cookieName} Recipe',
            prepTitle: 'Prep Like a Pro',
            ingredientsTitle: 'Your Cookie Blueprint üó∫Ô∏è',
            approxYield: 'You‚Äôll get roughly',
            cookies: 'cookies',
            cookie: 'cookie',
            largeCookies: 'large cookies',
            largeCookie: 'large cookie',
            stepsTitle: 'Let‚Äôs Bake, Bestie! üë©‚Äçüç≥',
            proTipsTitle: 'Pro Tips from Your Cookie Sensei üß†',
            // Ingredient Names
            unsaltedButter: 'Homnemade Brown Butter üßà',
            granulatedSugar: 'White Sugar üç¨',
            lightBrownSugar: 'Light Brown Sugar',
            toastedMilkPowder: 'Toasted Milk Powder (for that extra oomph) ü•õ',
            largeEggs: 'Large Eggs (room temp, pls) ü•ö',
            vanillaExtract: 'Vanilla Extract',
            allPurposeFlour: 'All-Purpose Flour',
            tableSalt: 'Salt (just a pinch) üßÇ',
            bakingPowder: 'Baking Powder (fresh!)',
            bakingSoda: 'Baking Soda (fresh, duh!)',
            chocolateChips: 'Chocolate Chips/Chunks üç´',
            prepWater: 'Water/Milk (for hydration, like your skin) üíß',
            // Prep Techniques
            prepTechTitle_brownButter: 'Browning Butter 101: Turn that butter into liquid gold! üßà‚ú®',
            prepTechDesc_brownButter: `the Maillard reaction is here to make your cookies slap. Melt it down, watch those milk solids get toasty, and boom‚Äînutty, butterscotch vibes for days. 
                                       <br>1. Cut butter into pieces in a light-colored saucepan.
                                       <br>2. Melt on medium heat, it‚Äôll foam (water evaporating). Swirl/stir gently.
                                       <br>3. Keep heating & swirling. Milk solids sink and turn golden, then nutty brown (like toasted hazelnuts). Aroma becomes intensely nutty. Takes 5-10 mins.
                                       <br>4. IMMEDIATELY pour into a heatproof bowl (including brown bits) to stop cooking. The line between brown and burnt is thin!`,
            prepTechTitle_hydrateButter: 'Optional: Hydrate Your Butter (like you should hydrate yourself) üí¶',
            prepTechDesc_hydrateButter: `Browning evaporates water (~15-20% of butter). Adding a little back *after* browning but *before* chilling helps maintain dough moisture balance, potentially boosting chewiness. Stir in gently until incorporated. (Amount calculated below).`,
            prepTechTitle_chillButterClassicThick: 'Chill Factor: Solidify for Creaming (patience is key) ‚è≥',
            prepTechDesc_chillButterClassicThick: `Why chill? Browning melts the butter‚Äôs fat crystals, essential for creaming (trapping air with sugar for lift). We need to rebuild that structure!
                                                    <br>1. Cool browned (and maybe hydrated) butter slightly (~5-10 min).
                                                    <br>2. Refrigerate until solid but pliable ‚Äì like cool modeling clay. Not rock hard! (~1-2 hours). Aim for 60-65¬∞F (16-18¬∞C). This state is CRITICAL for the Classic/Thick creaming method.`,
            prepTechTitle_chillButterThin: 'Chill Factor: Cool for Reverse Creaming (keep it cool, fam) ‚ùÑÔ∏è',
            prepTechDesc_chillButterThin: `For Thin/Crispy using reverse creaming, we need the butter cool but still workable to coat the flour.
                                             <br>1. Cool browned (and maybe hydrated) butter to room temp then refrigerate briefly until just solidified but still easy to cut/break apart (~30-60 min). Aim for slightly firmer than room temp, around 65-68¬∞F (18-20¬∞C). It needs to be cool enough to coat flour particles without melting instantly.`,
            prepTechTitle_toastMilkPowder: 'Flavor Amplifier: Toast Milk Powder (extra flavor, extra flex) üî•',
            prepTechDesc_toastMilkPowder: `Intensifies nutty/malty notes by browning milk sugars/proteins (more Maillard!). Adds depth, especially noticeable in the Thick cookie.
                                             <br>1. Spread Non-Fat Dry Milk Powder thinly on a parchment-lined sheet OR in a dry skillet.
                                             <br>2. Oven: Bake at 250¬∞F (120¬∞C) for 10-15 mins, stirring every 5. Skillet: Heat on medium-low, stirring CONSTANTLY.
                                             <br>3. Watch closely! It turns golden brown and fragrant quickly. Prevent burning.
                                             <br>4. Cool completely before using.`,
            // Notes & Steps
            classicNotes: `Classic balance relies on the 1:1 sugar ratio, combined leavening for moderate lift/spread, and PERFECT creaming. Don‚Äôt skimp on chilling or creaming time! Butter temp (60-65¬∞F) is non-negotiable. Trust the process, it‚Äôs worth it. üôå`,
            classicSteps: `   **Prep:** Whisk flour, salt, baking powder, soda. Line baking sheets. Ensure butter is chilled pliable (60-65¬∞F), eggs room temp.
                              **Cream:** Beat chilled brown butter & sugars on med-high speed for a FULL 5 mins until light, fluffy, increased volume (this is key!). Scrape bowl.
                              **Add Wet:** Low speed. Add eggs one by one, mixing *just* until combined. Mix in vanilla with last egg. Don‚Äôt overmix!
                              **Add Dry:** Lowest speed. Add flour mix gradually, mixing *only* until streaks disappear. Finish by hand if needed to avoid toughness.
                              **Fold:** Gently fold in chocolate chips with a spatula.
                              **Chill (Recommended):** Cover dough, refrigerate 30-60 mins minimum (up to 48 hrs for deeper flavor). Solidifies fat, hydrates flour.
                              **Scoop & Bake:** Preheat 375¬∞F (190¬∞C). Scoop ~2 Tbsp balls onto sheets, 2 inches apart. Bake 10-12 mins, until edges golden, center soft/puffy. Rotate sheet halfway.
                              **Cool:** Cool on sheet 3-5 mins (critical setting time!), then transfer to wire rack.`,
            thickNotes: `Thickness demands fighting spread! High brown sugar, NO soda, MANDATORY long chill are key. Moderate creaming prevents collapse. Toasted milk powder adds nutty depth and subtle chew. Embrace the underbake for ultimate goo!`,
            thickSteps: `   **Prep:** Whisk flour, toasted milk powder, salt, baking powder. Line sheets. Ensure butter chilled pliable (60-65¬∞F), eggs room temp.
                            **Cream (Moderately):** Beat chilled brown butter & sugars on medium speed ~2-3 mins until combined and creamy (NOT super light/fluffy like classic). Scrape bowl. Avoid over-aerating.
                            **Add Wet:** Low speed. Add eggs one by one, just until combined. Mix in vanilla.
                            **Add Dry:** Lowest speed. Add flour mix in 4-5 additions, mixing until *almost* combined (few streaks ok). Minimizes gluten.
                            **Fold:** Add massive amount of chocolate. Use sturdy spatula/hands to fold, incorporating final flour bits. Dough will be THICK. Do not overmix.
                            **MANDATORY Chill:** Divide dough into LARGE balls (4-6 oz / 113-170g each). Roll tall. Wrap tightly. Refrigerate MINIMUM 4 hours, ideally 12-72 hours. DO NOT SKIP/SHORTEN.
                            **Bake COLD:** Preheat 350¬∞F (180¬∞C). Place COLD dough balls far apart on sheet. Do NOT flatten. Bake 18-25 mins (depends on size). Edges set, center very soft, slightly gooey, maybe underbaked. (Internal temp 175-185¬∞F / 79-85¬∞C is a good target). Rotate sheet halfway.
                            **Cool CAREFULLY:** Cool on sheet 10-15 MINUTES. They are delicate! Transfer gently to wire rack. Best enjoyed warm (but not molten hot!).`,
            thinNotes: `Crispiness = Maximum Spread + Minimum Gluten. High granulated sugar, high baking soda (alkalinity boosts browning/spread), and reverse creaming (coats flour with fat first) are crucial. NO chilling! Bake thoroughly.`,
            thinSteps: `   **Prep:** Line sheets. Ensure butter is cool but pliable (65-68¬∞F / 18-20¬∞C), cut into small pieces. Eggs room temp. Whisk eggs & vanilla in small bowl.
                           **Reverse Cream:** In mixer bowl, combine flour, sugars, salt, baking soda. Mix briefly. Add cool butter pieces. Mix on low until mixture resembles coarse, damp sand/crumbs (butter worked in, coating flour). Takes a few mins.
                           **Combine Wet/Dry:** Mixer on low. Gradually stream in egg/vanilla mixture. Mix *only* until a cohesive-parole dough just forms. It might look crumbly first. DO NOT OVERMIX. Tenderness is key.
                           **Fold:** Gently fold in finely chopped chocolate or mini chips with spatula. Minimal strokes.
                           **Scoop & Bake IMMEDIATELY:** Do NOT chill! Preheat 350¬∞F (175¬∞C). Scoop small portions (~1 Tbsp) onto sheets, leaving PLENTY of space (3+ inches) ‚Äì they spread a LOT!
                           **Bake for Crispness:** Bake 12-16 mins until spread thin and uniformly golden brown edge-to-center. May look slightly puffy in middle but will flatten on cooling. Rotate sheet halfway. Slight overbaking is OK for crispness.
                           **Cool COMPLETELY:** Cool on sheet 5-10 mins until firm enough to move. Transfer to wire rack to cool completely. Full crispness develops upon cooling as sugars recrystallize.`,
            // Easter Egg & Recs
            stuffedTitle: 'YOU UNLOCKED THE SECRET SAUCE! üéâ',
            stuffedCongrats: 'Congrats, Legend! Choosing the Thick & Gooey path reveals ultimate potential. You can STUFF these behemoths!',
            stuffedHowTo: 'How? Flatten a dough ball slightly, make a dent, add ~1 tsp of Nutella or Pistachio Spread, wrap the dough around it, seal, and bake as directed (maybe add 1-2 min).',
            pistachioTipTitle: 'Pro Pistachio Recommendation:',
            pistachioTipDesc: 'Forget watery imitations! For that INTENSE, straight-up pistachio flavour that tastes like liquid gold, I HIGHLY recommend "ASM Foods Pistachio Cream". It‚Äôs ridiculously good. Seriously.',
            pistachioTipLink: 'Check it out here (Egypt Link)',
            chocoTipTitle: 'Chocolate Chip Science:',
            chocoTipDesc: 'Not all chocolate chips are created equal! For that melt-in-your-mouth, nostalgic flavour reminiscent of the good stuff (like Galaxy/Dairy Milk, but BETTER because #Boycott!), hunt down "Dropsy" MILK Chocolate. It‚Äôs the sweet secret weapon.',
            chocoTipLink: 'Find them via suppliers like this (Facebook Link)',
            chocoTipMilk: 'Make SURE it‚Äôs the MILK chocolate version for maximum deliciousness!',
            // Conclusion
            conclusionTitle: 'Experiment Complete! üéâ',
            conclusionDesc: 'Hypothesis confirmed: Brown butter cookies are superior. If you documented your delicious results, share the evidence!',
            conclusionTag: 'Tag me on Instagram:',
            conclusionGoForth: 'Go forth and bake scientifically!',
            footerText: 'Built with science, butter, and a little bit of code.'
        },
        ar: {
            // Toggles & Units
            toggleArabic: 'ÿπÿ±ÿ®Ÿä',
            toggleEnglish: 'English',
            unitMetric: 'ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ÿ•ŸÑŸâ ÿßŸÑÿ•ŸÖÿ®ÿ±ŸäÿßŸÑŸä (ŸÉŸàÿ®ÿå ŸÖŸÑÿπŸÇÿ©)',
            unitImperial: 'ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ÿ•ŸÑŸâ ÿßŸÑŸÖÿ™ÿ±Ÿä (ÿ¨ŸÖÿå ŸÖŸÑ)',
            unitGrams: 'ÿ¨ÿ±ÿßŸÖÿßÿ™ (g)',
            unitCups: 'ÿ£ŸÉŸàÿßÿ® (cups)',
            // Butter Input
            butterVarTitle: 'ÿßŸÑÿÆÿ∑Ÿàÿ© ÿßŸÑÿ£ŸàŸÑŸâ: ÿ≤ÿ®ÿØÿ© ÿπŸÑŸâ ÿßŸÑÿ∑ÿ±ŸäŸÇ! üßà',
            butterVarDesc: 'ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿπÿ∏ŸäŸÖÿ© ÿ™ÿ≠ÿ™ÿßÿ¨ ŸÉŸÖŸäÿ© ÿ≤ÿ®ÿØÿ© ŸÖÿ∂ÿ®Ÿàÿ∑ÿ©. ŸäÿπŸÜŸäÿå ŸÉŸÖ ŸÖŸÜ ÿßŸÑÿØŸáÿ® ÿßŸÑÿ≥ÿßŸäŸÑ ÿØŸá Ÿáÿ™ÿ≥ÿ™ÿÆÿØŸÖÿü ŸÉŸàŸÜ ÿØŸÇŸäŸÇ Ÿäÿß ÿ¥ŸäŸÅ! üë©‚Äçüç≥',
            grams: 'ÿ¨ÿ±ÿßŸÖ',
            cups: 'ŸÉŸàÿ®',
            butterWarning: 'Ÿäÿß ÿπŸÖÿå ÿØÿÆŸÑ ŸÉŸÖŸäÿ© ÿ≤ÿ®ÿØÿ© ÿµÿ≠Ÿäÿ≠ÿ© (ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ 100 ÿ¨ÿ±ÿßŸÖ ÿ£Ÿà ÿ≠ŸàÿßŸÑŸä ŸÜÿµŸÅ ŸÉŸàÿ®). ŸÖÿ™ÿ≥ÿ®ŸÜŸäÿ¥ ŸÉÿØŸá! üôÉ',
            beginExperiment: 'ŸäŸÑÿß ŸÜÿÆÿ®ÿ≤! üç™',
            // Cookie Selection
            phenotypeTitle: 'ÿßŸÑÿÆÿ∑Ÿàÿ© ÿßŸÑÿ´ÿßŸÜŸäÿ©: ÿßÿÆÿ™ÿßÿ± ŸÅÿßŸäÿ® ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿ®ÿ™ÿßÿπŸÉ üç™',
            phenotypeDesc: 'ÿπÿßŸäÿ≤ ŸÉŸàŸÉŸäÿ≤ ÿ•ÿ≤ÿßŸä ÿßŸÑŸÜŸáÿßÿ±ÿØÿ©ÿü ÿßÿÆÿ™ÿßÿ± ŸÖÿ∫ÿßŸÖÿ±ÿ™ŸÉ:',
            thinTitle: 'ÿßŸÑÿ±ŸÇÿßŸÇÿ© ÿßŸÑŸÖŸÇÿ±ŸÖÿ¥ÿ© AF',
            thinDesc: 'ÿ±ŸÅŸäÿπÿ© ŸÑÿØÿ±ÿ¨ÿ© ÿ•ŸÜŸáÿß ŸÅŸÑŸäŸÉÿ≥ ŸÉŸàŸÉŸäÿ≤. ŸÖÿ´ÿßŸÑŸäÿ© ŸÑŸÑÿ™ÿ∫ŸÖŸäÿ≥ ÿ£Ÿà ŸÖÿ¨ÿ±ÿØ ÿßŸÑÿ™ŸÅÿßÿÆÿ± ŸÇÿØÿßŸÖ ÿ£ÿµÿ≠ÿßÿ®ŸÉ. üòé',
            classicTitle: 'ÿßŸÑÿ®ÿßÿØŸä ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜ OG',
            classicDesc: 'ÿ∑ÿ±Ÿäÿå ŸÖŸÇÿ±ŸÖÿ¥ÿå ŸàÿØÿßÿ¶ŸÖŸãÿß ÿ¨ÿßŸáÿ≤ ŸÑŸÑÿ≠ŸÅŸÑÿ©. ÿßŸÑŸÖŸÅÿ∂ŸÑ ŸÑŸÑÿ¨ŸÖÿßŸáŸäÿ± ÿßŸÑŸÑŸä ŸÖÿß ŸäÿÆŸäÿ® ÿ£ÿ®ÿØŸãÿß. üéâ',
            thickTitle: 'ÿßŸÑŸÖŸÑŸÉ ÿßŸÑÿ≥ŸÖŸäŸÉ',
            thickDesc: 'ŸÑÿ≤ÿ¨ ŸÑÿØÿ±ÿ¨ÿ© ÿ•ŸÜŸá ŸáŸäÿÆŸÑŸä ÿ®ÿ±ÿßÿπŸÖ ÿßŸÑÿ™ÿ∞ŸàŸÇ ÿ®ÿ™ÿßÿπÿ™ŸÉ ÿ™ÿ±ŸÇÿµ. ŸÖÿ™ÿπÿ© ÿÆÿßŸÑÿµÿ©ÿå ŸÖŸÜ ÿ∫Ÿäÿ± ŸÉÿØÿ®. üíÉ',
            // Recipe Display
            recipeTitle: 'ŸàÿµŸÅÿ© {cookieName}',
            prepTitle: 'ÿ™ÿ≠ÿ∂Ÿäÿ± ÿ≤Ÿä ÿßŸÑŸÖÿ≠ÿ™ÿ±ŸÅŸäŸÜ',
            ingredientsTitle: 'ŸÖÿÆÿ∑ÿ∑ ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿ®ÿ™ÿßÿπŸÉ üó∫Ô∏è',
            approxYield: 'Ÿáÿ™ÿ≠ÿµŸÑ ÿπŸÑŸâ ÿ≠ŸàÿßŸÑŸä',
            cookies: 'ŸÉŸàŸÉŸäÿ≤',
            cookie: 'ŸÉŸàŸÉŸä',
            largeCookies: 'ŸÉŸàŸÉŸäÿ≤ ŸÉÿ®Ÿäÿ±ÿ©',
            largeCookie: 'ŸÉŸàŸÉŸä ŸÉÿ®Ÿäÿ±ÿ©',
            stepsTitle: 'ŸäŸÑÿß ŸÜÿÆÿ®ÿ≤ Ÿäÿß ÿµÿßÿ≠ÿ®Ÿä! üë©‚Äçüç≥',
            proTipsTitle: 'ŸÜÿµÿßÿ¶ÿ≠ ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ© ŸÖŸÜ ÿ≥ŸäŸÜÿ≥Ÿä ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿ®ÿ™ÿßÿπŸÉ üß†',
            // Ingredient Names
            unsaltedButter: 'ÿ≤ÿ®ÿØÿ© ‚ÄèÿßŸÑÿ∞Ÿáÿ®Ÿäÿ©',
            granulatedSugar: 'ÿ≥ŸÉÿ± ÿ≠ÿ®Ÿäÿ®ÿßÿ™',
            lightBrownSugar: 'ÿ≥ŸÉÿ± ÿ®ŸÜŸä',
            toastedMilkPowder: 'ÿ®ŸàÿØÿ±ÿ© ÿ≠ŸÑŸäÿ® ŸÖÿ≠ŸÖÿµ',
            largeEggs: 'ÿ®Ÿäÿ∂ ŸÉÿ®Ÿäÿ± (ÿ®ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©ÿå ŸÑŸà ÿ≥ŸÖÿ≠ÿ™) ü•ö',
            vanillaExtract: 'ŸÅÿßŸÜŸäŸÑŸäÿß',
            allPurposeFlour: 'ÿØŸÇŸäŸÇ ŸÖÿ™ÿπÿØÿØ ÿßŸÑÿ£ÿ∫ÿ±ÿßÿ∂',
            tableSalt: 'ŸÖŸÑÿ≠ (ÿ¥ŸàŸäÿ© ÿ®ÿ≥) ',
            bakingPowder: 'ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±',
            bakingSoda: 'ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß',
            chocolateChips: 'ÿ≠ÿ®Ÿäÿ®ÿßÿ™/ŸÇÿ∑ÿπ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© (ŸÉŸÑ ŸÖÿß ÿ≤ÿßÿØÿå ŸÉŸÑ ŸÖÿß ŸÉÿßŸÜ ÿ£ÿ≠ÿ≥ŸÜ) ',
            prepWater: 'ŸÖÿßÿ°/ÿ≠ŸÑŸäÿ® (ŸÑŸÑÿ™ÿ±ÿ∑Ÿäÿ®ÿå ÿ≤Ÿä ÿ®ÿ¥ÿ±ÿ™ŸÉ) üíß',
            // Prep Techniques
            prepTechTitle_brownButter: 'ÿ™ÿ≠ŸÖŸäÿ± ÿßŸÑÿ≤ÿ®ÿØÿ© 101: ÿ≠ŸàŸÑ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿØŸä ŸÑÿØŸáÿ® ÿ≥ÿßŸäŸÑ! üßà‚ú®',
            prepTechDesc_brownButter: `ÿßŸÜÿ≥Ÿâ ÿßŸÑÿ≥ÿ™ŸäŸÉÿå ÿ™ŸÅÿßÿπŸÑ ŸÖŸäŸÑÿßÿ±ÿØ ŸáŸÜÿß ÿπÿ¥ÿßŸÜ ŸäÿÆŸÑŸä ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿ®ÿ™ÿßÿπÿ™ŸÉ ÿ™Ÿáÿ≤ ÿßŸÑÿØŸÜŸäÿß. ÿ∞Ÿàÿ®Ÿáÿßÿå ÿ¥ŸàŸÅ ÿßŸÑŸÖŸàÿßÿØ ÿßŸÑÿµŸÑÿ®ÿ© ŸÅŸä ÿßŸÑÿ≠ŸÑŸäÿ® ŸàŸáŸä ÿ®ÿ™ÿ™ÿ≠ŸÖÿµÿå ŸàŸÅÿ¨ÿ£ÿ©‚Äîÿ∑ÿπŸÖ ÿ¨Ÿàÿ≤Ÿä Ÿàÿ®ÿ™ÿ±ÿ≥ŸÉŸàÿ™ÿ¥ ŸäÿÆŸÑŸä ÿßŸÑŸÉŸàŸÉŸäÿ≤ ŸäŸáÿ≤ ÿßŸÑÿØŸÜŸäÿß.
                                       <br>Ÿ°. ŸÇÿ∑ÿπ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿ•ŸÑŸâ ŸÇÿ∑ÿπ ŸÅŸä ŸÇÿØÿ± ŸÅÿßÿ™ÿ≠ ÿßŸÑŸÑŸàŸÜ.
                                       <br>Ÿ¢. ÿ£ÿ∞ÿ®Ÿáÿß ÿπŸÑŸâ ŸÜÿßÿ± ŸÖÿ™Ÿàÿ≥ÿ∑ÿ©ÿå Ÿáÿ™ÿ≠ÿØÿ´ ÿ±ÿ∫Ÿàÿ© (ÿ™ÿ®ÿÆÿ± ÿßŸÑŸÖÿßÿ°). ÿ≠ÿ±ŸÉ ÿßŸÑŸÇÿØÿ± ÿØÿßÿ¶ÿ±ŸäŸãÿß ÿ£Ÿà ŸÇŸÑŸëÿ® ÿ®ÿ±ŸÅŸÇ.
                                       <br>Ÿ£. ÿßÿ≥ÿ™ŸÖÿ± ŸÅŸä ÿßŸÑÿ™ÿ≥ÿÆŸäŸÜ ŸàÿßŸÑÿ™ÿ≠ÿ±ŸäŸÉ. ÿßŸÑŸÖŸàÿßÿØ ÿßŸÑÿµŸÑÿ®ÿ© ŸÅŸä ÿßŸÑÿ≠ŸÑŸäÿ® Ÿáÿ™ÿ™ÿ±ÿ≥ÿ® Ÿàÿ™ÿ™ÿ≠ŸàŸÑ ÿ•ŸÑŸâ ÿ∞Ÿáÿ®Ÿäÿ©ÿå ÿ´ŸÖ ÿ®ŸÜŸäÿ© ÿ¨Ÿàÿ≤Ÿäÿ© (ÿ≤Ÿä ÿßŸÑÿ®ŸÜÿØŸÇ ÿßŸÑŸÖÿ≠ŸÖÿµ). ÿßŸÑÿ±ÿßÿ¶ÿ≠ÿ© Ÿáÿ™ÿµŸäÿ± ÿ¨Ÿàÿ≤Ÿäÿ© ÿ®ÿ¥ŸÉŸÑ ŸÖŸÉÿ´ŸÅ. Ÿäÿ≥ÿ™ÿ∫ÿ±ŸÇ Ÿ•-Ÿ°Ÿ† ÿØŸÇÿßÿ¶ŸÇ.
                                       <br>Ÿ§. ŸÅŸàÿ±Ÿãÿß ÿµÿ®Ÿáÿß ŸÅŸä Ÿàÿπÿßÿ° ŸÖŸÇÿßŸàŸÖ ŸÑŸÑÿ≠ÿ±ÿßÿ±ÿ© (ÿ®ŸÖÿß ŸÅŸä ÿ∞ŸÑŸÉ ÿßŸÑÿ®ŸÇÿπ ÿßŸÑÿ®ŸÜŸäÿ©) ŸÑŸàŸÇŸÅ ÿßŸÑÿ∑ŸáŸä. ÿßŸÑÿÆÿ∑ ÿßŸÑŸÅÿßÿµŸÑ ÿ®ŸäŸÜ ÿßŸÑÿ®ŸÜŸä ŸàÿßŸÑŸÖÿ≠ÿ±ŸàŸÇ ÿ±ŸÅŸäÿπ!`,
            prepTechTitle_hydrateButter: 'ÿßÿÆÿ™Ÿäÿßÿ±Ÿä: ÿ±ÿ∑ÿ® ÿ≤ÿ®ÿØÿ™ŸÉ (ÿ≤Ÿä ŸÖÿß ÿ®ÿ™ÿ±ÿ∑ÿ® ŸÜŸÅÿ≥ŸÉ) üí¶',
            prepTechDesc_hydrateButter: `ÿßŸÑÿ™ÿ≠ŸÖŸäÿ± Ÿäÿ≥ÿ®ÿ® ÿ™ÿ®ÿÆÿ± ÿßŸÑŸÖÿßÿ° (ÿ≠ŸàÿßŸÑŸä Ÿ°Ÿ•-Ÿ¢Ÿ†Ÿ™ ŸÖŸÜ ÿßŸÑÿ≤ÿ®ÿØÿ©). ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÇŸÑŸäŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ *ÿ®ÿπÿØ* ÿßŸÑÿ™ÿ≠ŸÖŸäÿ± ŸàŸÑŸÉŸÜ *ŸÇÿ®ŸÑ* ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ Ÿäÿ≥ÿßÿπÿØ ŸÅŸä ÿßŸÑÿ≠ŸÅÿßÿ∏ ÿπŸÑŸâ ÿ™Ÿàÿßÿ≤ŸÜ ÿ±ÿ∑Ÿàÿ®ÿ© ÿßŸÑÿπÿ¨ŸäŸÜÿå ŸÖŸÖÿß ŸÇÿØ Ÿäÿπÿ≤ÿ≤ ÿßŸÑŸÖÿ∂ÿ∫. ŸÇŸÑÿ®Ÿá ÿ®ÿ±ŸÅŸÇ ÿ≠ÿ™Ÿâ Ÿäÿ™ÿ¨ÿßŸÜÿ≥. (ÿßŸÑŸÉŸÖŸäÿ© ŸÖÿ≠ÿ≥Ÿàÿ®ÿ© ÿ£ÿØŸÜÿßŸá).`,
            prepTechTitle_chillButterClassicThick: 'ÿπÿßŸÖŸÑ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ: ÿßŸÑÿ™ÿ¨ŸÖŸäÿØ ŸÑŸÑÿÆŸÅŸÇ (ÿßŸÑÿµÿ®ÿ± ŸÖŸÅÿ™ÿßÿ≠) ‚è≥',
            prepTechDesc_chillButterClassicThick: `ŸÑŸÖÿßÿ∞ÿß ŸÜÿ®ÿ±ÿØÿü ÿßŸÑÿ™ÿ≠ŸÖŸäÿ± Ÿäÿ∞Ÿäÿ® ÿ®ŸÑŸàÿ±ÿßÿ™ ÿØŸáŸàŸÜ ÿßŸÑÿ≤ÿ®ÿØÿ©ÿå ŸàŸáŸä ÿ∂ÿ±Ÿàÿ±Ÿäÿ© ŸÑŸÑÿÆŸÅŸÇ (ÿ≠ÿ®ÿ≥ ÿßŸÑŸáŸàÿßÿ° ŸÖÿπ ÿßŸÑÿ≥ŸÉÿ± ŸÑŸÑÿ±ŸÅÿπ). ŸÜÿ≠ÿ™ÿßÿ¨ ÿ•ŸÑŸâ ÿ•ÿπÿßÿØÿ© ÿ®ŸÜÿßÿ° Ÿáÿ∞ÿß ÿßŸÑŸáŸäŸÉŸÑ!
                                                    <br>Ÿ°. ÿ®ÿ±ÿØ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑŸÖÿ≠ŸÖÿ±ÿ© (Ÿàÿ±ÿ®ŸÖÿß ÿßŸÑŸÖÿ±ÿ∑ÿ®ÿ©) ŸÇŸÑŸäŸÑÿßŸã (ÿ≠ŸàÿßŸÑŸä Ÿ•-Ÿ°Ÿ† ÿØŸÇÿßÿ¶ŸÇ).
                                                    <br>Ÿ¢. ÿ∂ÿπŸáÿß ŸÅŸä ÿßŸÑÿ´ŸÑÿßÿ¨ÿ© ÿ≠ÿ™Ÿâ ÿ™ÿµÿ®ÿ≠ ÿµŸÑÿ®ÿ© ŸàŸÑŸÉŸÜ ŸÖÿ±ŸÜÿ© - ŸÖÿ´ŸÑ ÿ∑ŸäŸÜ ÿßŸÑŸÜŸÖÿ∞ÿ¨ÿ© ÿßŸÑÿ®ÿßÿ±ÿØ. ŸÑŸäÿ≥ÿ™ ÿµŸÑÿ®ÿ© ŸÉÿßŸÑÿµÿÆÿ±! (ÿ≠ŸàÿßŸÑŸä Ÿ°-Ÿ¢ ÿ≥ÿßÿπÿ©). ÿßÿ≥ÿ™ŸáÿØŸÅ ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© Ÿ¶Ÿ†-Ÿ¶Ÿ• ŸÅŸáÿ±ŸÜŸáÿßŸäÿ™ (Ÿ°Ÿ¶-Ÿ°Ÿ® ÿØÿ±ÿ¨ÿ© ŸÖÿ¶ŸàŸäÿ©). Ÿáÿ∞Ÿá ÿßŸÑÿ≠ÿßŸÑÿ© ÿ≠ÿßÿ≥ŸÖÿ© ŸÑÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿÆŸÅŸÇ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸäÿ©/ÿßŸÑÿ≥ŸÖŸäŸÉÿ©.`,
            prepTechTitle_chillButterThin: 'ÿπÿßŸÖŸÑ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ: ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ŸÑŸÑÿÆŸÅŸÇ ÿßŸÑÿπŸÉÿ≥Ÿä (ÿÆŸÑŸäŸáÿß ÿ®ÿßÿ±ÿØÿ© Ÿäÿß ÿµÿßÿ≠ÿ®Ÿä) ‚ùÑÔ∏è',
            prepTechDesc_chillButterThin: `ŸÑŸÑŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ±ŸÇŸäŸÇÿ©/ÿßŸÑŸÖŸÇÿ±ŸÖÿ¥ÿ© ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿÆŸÅŸÇ ÿßŸÑÿπŸÉÿ≥Ÿäÿå ŸÜÿ≠ÿ™ÿßÿ¨ ÿ•ŸÑŸâ ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿ®ÿßÿ±ÿØÿ© ŸàŸÑŸÉŸÜ ŸÑÿß ÿ™ÿ≤ÿßŸÑ ŸÇÿßÿ®ŸÑÿ© ŸÑŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ŸÑÿ™ÿ∫ŸÑŸäŸÅ ÿßŸÑÿØŸÇŸäŸÇ.
                                             <br>Ÿ°. ÿ®ÿ±ÿØ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑŸÖÿ≠ŸÖÿ±ÿ© (Ÿàÿ±ÿ®ŸÖÿß ÿßŸÑŸÖÿ±ÿ∑ÿ®ÿ©) ÿ•ŸÑŸâ ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ© ÿ´ŸÖ ÿ∂ÿπŸáÿß ŸÅŸä ÿßŸÑÿ´ŸÑÿßÿ¨ÿ© ŸÑŸÅÿ™ÿ±ÿ© Ÿàÿ¨Ÿäÿ≤ÿ© ÿ≠ÿ™Ÿâ ÿ™ÿ™ÿ¨ŸÖÿØ ŸÇŸÑŸäŸÑÿßŸã ŸàŸÑŸÉŸÜ ŸÑÿß ÿ™ÿ≤ÿßŸÑ ÿ≥ŸáŸÑÿ© ÿßŸÑÿ™ŸÇÿ∑Ÿäÿπ/ÿßŸÑÿ™ŸÉÿ≥Ÿäÿ± (ÿ≠ŸàÿßŸÑŸä Ÿ£Ÿ†-Ÿ¶Ÿ† ÿØŸÇŸäŸÇÿ©). ÿßÿ≥ÿ™ŸáÿØŸÅ ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ÿ£ÿµŸÑÿ® ŸÇŸÑŸäŸÑÿßŸã ŸÖŸÜ ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©ÿå ÿ≠ŸàÿßŸÑŸä Ÿ¶Ÿ•-Ÿ¶Ÿ® ŸÅŸáÿ±ŸÜŸáÿßŸäÿ™ (Ÿ°Ÿ®-Ÿ¢Ÿ† ÿØÿ±ÿ¨ÿ© ŸÖÿ¶ŸàŸäÿ©). Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ÿ®ÿßÿ±ÿØÿ© ÿ®ŸÖÿß ŸäŸÉŸÅŸä ŸÑÿ™ÿ∫ŸÑŸäŸÅ ÿ¨ÿ≤Ÿäÿ¶ÿßÿ™ ÿßŸÑÿØŸÇŸäŸÇ ÿØŸàŸÜ ÿßŸÑÿ∞Ÿàÿ®ÿßŸÜ ŸÅŸàÿ±ÿßŸã.`,
            prepTechTitle_toastMilkPowder: 'ŸÖŸèÿπÿ≤ÿ≤ ÿßŸÑŸÜŸÉŸáÿ©: ÿ™ÿ≠ŸÖŸäÿµ ÿ®ŸàÿØÿ±ÿ© ÿßŸÑÿ≠ŸÑŸäÿ® (ŸÜŸÉŸáÿ© ÿ•ÿ∂ÿßŸÅŸäÿ©ÿå ŸÅŸÑŸäŸÉÿ≥ ÿ•ÿ∂ÿßŸÅŸä) üî•',
            prepTechDesc_toastMilkPowder: `ŸäŸÉÿ´ŸÅ ÿßŸÑŸÜŸÉŸáÿßÿ™ ÿßŸÑÿ¨Ÿàÿ≤Ÿäÿ©/ÿßŸÑŸÖÿßŸÑÿ™Ÿäÿ© ÿπŸÜ ÿ∑ÿ±ŸäŸÇ ÿ™ÿ≠ŸÖŸäÿ± ÿ≥ŸÉÿ±Ÿäÿßÿ™/ÿ®ÿ±Ÿàÿ™ŸäŸÜÿßÿ™ ÿßŸÑÿ≠ŸÑŸäÿ® (ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿ™ŸÅÿßÿπŸÑ ŸÖŸäŸÑÿßÿ±ÿØ!). Ÿäÿ∂ŸäŸÅ ÿπŸÖŸÇŸãÿßÿå ŸÖŸÑÿ≠Ÿàÿ∏ ÿ®ÿ¥ŸÉŸÑ ÿÆÿßÿµ ŸÅŸä ÿßŸÑŸÉŸàŸÉŸä ÿßŸÑÿ≥ŸÖŸäŸÉ.
                                             <br>Ÿ°. ÿßŸÜÿ¥ÿ± ÿ®ŸàÿØÿ±ÿ© ÿßŸÑÿ≠ŸÑŸäÿ® ÿßŸÑÿ¨ÿßŸÅ ÿÆÿßŸÑŸä ÿßŸÑÿØÿ≥ŸÖ ÿ®ÿ∑ÿ®ŸÇÿ© ÿ±ŸÇŸäŸÇÿ© ÿπŸÑŸâ ÿµŸäŸÜŸäÿ© ÿÆÿ®ÿ≤ ŸÖÿ®ÿ∑ŸÜÿ© ÿ®Ÿàÿ±ŸÇ ÿ≤ÿ®ÿØÿ© ÿ£Ÿà ŸÅŸä ŸÖŸÇŸÑÿßÿ© ÿ¨ÿßŸÅÿ©.
                                             <br>Ÿ¢. ÿßŸÑŸÅÿ±ŸÜ: ÿßÿÆÿ®ÿ≤ ÿπŸÑŸâ ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© Ÿ¢Ÿ•Ÿ† ŸÅŸáÿ±ŸÜŸáÿßŸäÿ™ (Ÿ°Ÿ¢Ÿ† ÿØÿ±ÿ¨ÿ© ŸÖÿ¶ŸàŸäÿ©) ŸÑŸÖÿØÿ© Ÿ°Ÿ†-Ÿ°Ÿ• ÿØŸÇŸäŸÇÿ©ÿå ŸÖÿπ ÿßŸÑÿ™ŸÇŸÑŸäÿ® ŸÉŸÑ Ÿ• ÿØŸÇÿßÿ¶ŸÇ. ÿßŸÑŸÖŸÇŸÑÿßÿ©: ÿ≥ÿÆŸÜ ÿπŸÑŸâ ŸÜÿßÿ± ŸÖÿ™Ÿàÿ≥ÿ∑ÿ©-ŸÖŸÜÿÆŸÅÿ∂ÿ©ÿå ŸÖÿπ ÿßŸÑÿ™ŸÇŸÑŸäÿ® ÿßŸÑŸÖÿ≥ÿ™ŸÖÿ±.
                                             <br>Ÿ£. ÿ±ÿßŸÇÿ® ÿπŸÜ ŸÉÿ´ÿ®! Ÿäÿ™ÿ≠ŸàŸÑ ŸÑŸàŸÜŸá ÿ•ŸÑŸâ ÿ®ŸÜŸä ÿ∞Ÿáÿ®Ÿä Ÿàÿ±ÿßÿ¶ÿ≠ÿ™Ÿá ÿπÿ∑ÿ±ÿ© ÿ®ÿ≥ÿ±ÿπÿ©. ÿßŸÖŸÜÿπ ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÇ.
                                             <br>Ÿ§. ÿ®ÿ±ÿØŸá ÿ™ŸÖÿßŸÖŸãÿß ŸÇÿ®ŸÑ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ.`,
            // Notes & Steps
            classicNotes: `ÿßŸÑÿ™Ÿàÿßÿ≤ŸÜ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸä Ÿäÿπÿ™ŸÖÿØ ÿπŸÑŸâ ŸÜÿ≥ÿ®ÿ© ÿßŸÑÿ≥ŸÉÿ± 1:1ÿå ŸàŸÖŸàÿßÿØ ÿßŸÑÿ±ŸÅÿπ ÿßŸÑŸÖÿ≤ÿØŸàÿ¨ÿ© ŸÑÿ±ŸÅÿπ/ÿßŸÜÿ™ÿ¥ÿßÿ± ŸÖÿπÿ™ÿØŸÑÿå ŸàÿßŸÑÿÆŸÅŸÇ ÿßŸÑŸÖÿ´ÿßŸÑŸä. ŸÑÿß ÿ™ÿ®ÿÆŸÑ ÿ®ŸàŸÇÿ™ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ÿ£Ÿà ÿßŸÑÿÆŸÅŸÇ! ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ≤ÿ®ÿØÿ© (16-18¬∞ŸÖ) ÿ∫Ÿäÿ± ŸÇÿßÿ®ŸÑÿ© ŸÑŸÑÿ™ŸÅÿßŸàÿ∂. ÿ´ŸÇ ŸÅŸä ÿßŸÑÿπŸÖŸÑŸäÿ©ÿå Ÿáÿ™ÿ≥ÿ™ÿßŸáŸÑ. üôå`,
            classicSteps: `Ÿ°. **ÿßŸÑÿ™ÿ¨ŸáŸäÿ≤:** ÿßÿÆŸÑÿ∑ ÿßŸÑÿØŸÇŸäŸÇ ŸàÿßŸÑŸÖŸÑÿ≠ ŸàÿßŸÑÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ± ŸàÿßŸÑÿµŸàÿØÿß. ÿ®ÿ∑ŸëŸÜ ÿµŸàÿßŸÜŸä ÿßŸÑÿÆÿ®ÿ≤. ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸÖÿ®ÿ±ÿØÿ© ŸàŸÖÿ±ŸÜÿ© (16-18¬∞ŸÖ)ÿå ŸàÿßŸÑÿ®Ÿäÿ∂ ÿ®ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©.
                           Ÿ¢. **ÿßŸÑÿÆŸÅŸÇ:** ÿßÿÆŸÅŸÇ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑŸÖÿ®ÿ±ÿØÿ© ŸàÿßŸÑÿ≥ŸÉÿ±Ÿäÿßÿ™ ÿπŸÑŸâ ÿ≥ÿ±ÿπÿ© ŸÖÿ™Ÿàÿ≥ÿ∑ÿ©-ÿπÿßŸÑŸäÿ© ŸÑŸÖÿØÿ© Ÿ• ÿØŸÇÿßÿ¶ŸÇ ŸÉÿßŸÖŸÑÿ© ÿ≠ÿ™Ÿâ Ÿäÿµÿ®ÿ≠ ÿßŸÑÿÆŸÑŸäÿ∑ ÿÆŸÅŸäŸÅŸãÿß ŸàŸáÿ¥Ÿãÿß ŸàŸäÿ≤ÿØÿßÿØ ÿ≠ÿ¨ŸÖŸá (Ÿáÿ∞ÿß ŸáŸà ÿßŸÑŸÖŸÅÿ™ÿßÿ≠!). ÿßŸÉÿ¥ÿ∑ ÿ¨ŸàÿßŸÜÿ® ÿßŸÑŸàÿπÿßÿ°.
                           Ÿ£. **ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ≥Ÿàÿßÿ¶ŸÑ:** ÿπŸÑŸâ ÿ≥ÿ±ÿπÿ© ŸÖŸÜÿÆŸÅÿ∂ÿ©. ÿ£ÿ∂ŸÅ ÿßŸÑÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© ÿ™ŸÑŸà ÿßŸÑÿ£ÿÆÿ±Ÿâÿå ÿßÿÆŸÑÿ∑ *ŸÅŸÇÿ∑* ÿ≠ÿ™Ÿâ Ÿäÿ™ÿ¨ÿßŸÜÿ≥. ÿ£ÿ∂ŸÅ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß ŸÖÿπ ÿßŸÑÿ®Ÿäÿ∂ÿ© ÿßŸÑÿ£ÿÆŸäÿ±ÿ©. ŸÑÿß ÿ™ŸÅÿ±ÿ∑ ŸÅŸä ÿßŸÑÿÆŸÑÿ∑!
                           Ÿ§. **ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ¨ÿßŸÅ:** ÿπŸÑŸâ ÿ£ŸÇŸÑ ÿ≥ÿ±ÿπÿ©. ÿ£ÿ∂ŸÅ ÿÆŸÑŸäÿ∑ ÿßŸÑÿØŸÇŸäŸÇ ÿ™ÿØÿ±Ÿäÿ¨ŸäŸãÿßÿå ÿßÿÆŸÑÿ∑ *ŸÅŸÇÿ∑* ÿ≠ÿ™Ÿâ ÿ™ÿÆÿ™ŸÅŸä ÿÆÿ∑Ÿàÿ∑ ÿßŸÑÿØŸÇŸäŸÇ. ÿ£ŸÉŸÖŸÑ ÿ®ÿßŸÑŸäÿØ ÿ•ÿ∞ÿß ŸÑÿ≤ŸÖ ÿßŸÑÿ£ŸÖÿ± ŸÑÿ™ÿ¨ŸÜÿ® ÿßŸÑŸÇÿ≥ÿßŸàÿ©.
                           Ÿ•. **ÿßŸÑÿ∑Ÿä:** ÿßÿ∑ŸàŸê ÿ≠ÿ®Ÿäÿ®ÿßÿ™ ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿ®ÿ±ŸÅŸÇ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÖŸÑÿπŸÇÿ© ŸÖÿ≥ÿ∑ÿ≠ÿ©.
                           Ÿ¶. **ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ (ŸÖŸàÿµŸâ ÿ®Ÿá):** ÿ∫ÿ∑Ÿê ÿßŸÑÿπÿ¨ŸäŸÜÿå ÿ∂ÿπŸá ŸÅŸä ÿßŸÑÿ´ŸÑÿßÿ¨ÿ© ŸÑŸÖÿØÿ© 30-60 ÿØŸÇŸäŸÇÿ© ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ (ÿ≠ÿ™Ÿâ 48 ÿ≥ÿßÿπÿ© ŸÑŸÜŸÉŸáÿ© ÿ£ÿπŸÖŸÇ). Ÿäÿ¨ŸÖÿØ ÿßŸÑÿØŸáŸàŸÜ ŸàŸäÿ±ÿ∑ÿ® ÿßŸÑÿØŸÇŸäŸÇ.
                           Ÿß. **ÿßŸÑÿ™ÿ¥ŸÉŸäŸÑ ŸàÿßŸÑÿÆÿ®ÿ≤:** ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ ÿ•ŸÑŸâ 190¬∞ŸÖ (375¬∞ŸÅ). ÿ¥ŸÉŸëŸÑ ŸÉÿ±ÿßÿ™ ÿ®ÿ≠ÿ¨ŸÖ 2 ŸÖŸÑÿπŸÇÿ© ŸÉÿ®Ÿäÿ±ÿ© ÿ™ŸÇÿ±Ÿäÿ®Ÿãÿß ÿπŸÑŸâ ÿßŸÑÿµŸàÿßŸÜŸäÿå ŸÖÿ™ÿ®ÿßÿπÿØÿ© ÿ®ŸÖŸÇÿØÿßÿ± 2 ÿ®Ÿàÿµÿ©. ÿßÿÆÿ®ÿ≤ ŸÑŸÖÿØÿ© 10-12 ÿØŸÇŸäŸÇÿ©ÿå ÿ≠ÿ™Ÿâ ÿ™ÿµÿ®ÿ≠ ÿßŸÑÿ£ÿ∑ÿ±ÿßŸÅ ÿ∞Ÿáÿ®Ÿäÿ© ŸàÿßŸÑŸÖÿ±ŸÉÿ≤ ÿ∑ÿ±ŸäŸãÿß/ŸÖŸÜÿ™ŸÅÿÆŸãÿß. ÿ£ÿØÿ± ÿßŸÑÿµŸäŸÜŸäÿ© ŸÅŸä ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸàŸÇÿ™.
                           Ÿ®. **ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ:** ÿ®ÿ±ÿØ ÿπŸÑŸâ ÿßŸÑÿµŸäŸÜŸäÿ© ŸÑŸÖÿØÿ© 3-5 ÿØŸÇÿßÿ¶ŸÇ (ŸàŸÇÿ™ ÿßŸÑÿ™ŸÖÿßÿ≥ŸÉ ÿßŸÑÿ≠ÿ±ÿ¨!)ÿå ÿ´ŸÖ ÿßŸÜŸÇŸÑŸáÿß ÿ•ŸÑŸâ ÿ±ŸÅ ÿ≥ŸÑŸÉŸä.`,
            thickNotes: `ÿßŸÑÿ≥ŸÖÿßŸÉÿ© ÿ™ÿ™ÿ∑ŸÑÿ® ŸÖÿ≠ÿßÿ±ÿ®ÿ© ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ±! ÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ®ŸÜŸä ÿßŸÑÿπÿßŸÑŸäÿå ÿπÿØŸÖ Ÿàÿ¨ŸàÿØ ÿµŸàÿØÿßÿå ŸàÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ÿßŸÑÿ∑ŸàŸäŸÑ ÿßŸÑÿ•ŸÑÿ≤ÿßŸÖŸä ŸáŸä ÿßŸÑŸÖŸÅÿ™ÿßÿ≠. ÿßŸÑÿÆŸÅŸÇ ÿßŸÑŸÖÿπÿ™ÿØŸÑ ŸäŸÖŸÜÿπ ÿßŸÑÿßŸÜŸáŸäÿßÿ±. ÿ®ŸàÿØÿ±ÿ© ÿßŸÑÿ≠ŸÑŸäÿ® ÿßŸÑŸÖÿ≠ŸÖÿµÿ© ÿ™ÿ∂ŸäŸÅ ÿπŸÖŸÇŸãÿß ÿ¨Ÿàÿ≤ŸäŸãÿß ŸàŸÖÿ∂ÿ∫Ÿãÿß ÿÆŸÅŸäŸÅŸãÿß. ÿßÿ≥ÿ™ŸÖÿ™ÿπ ÿ®ÿπÿØŸÖ ÿßŸÑÿÆÿ®ÿ≤ ÿßŸÑŸÉÿßŸÖŸÑ ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ£ŸÇÿµŸâ ŸÑÿ≤Ÿàÿ¨ÿ©!`,
            thickSteps: `Ÿ°. **ÿßŸÑÿ™ÿ¨ŸáŸäÿ≤:** ÿßÿÆŸÑÿ∑ ÿßŸÑÿØŸÇŸäŸÇ Ÿàÿ®ŸàÿØÿ±ÿ© ÿßŸÑÿ≠ŸÑŸäÿ® ÿßŸÑŸÖÿ≠ŸÖÿµÿ© ŸàÿßŸÑŸÖŸÑÿ≠ ŸàÿßŸÑÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±. ÿ®ÿ∑ŸëŸÜ ÿßŸÑÿµŸàÿßŸÜŸä. ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸÖÿ®ÿ±ÿØÿ© ŸàŸÖÿ±ŸÜÿ© (16-18¬∞ŸÖ)ÿå ŸàÿßŸÑÿ®Ÿäÿ∂ ÿ®ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©.
                         Ÿ¢. **ÿßŸÑÿÆŸÅŸÇ (ÿ®ÿßÿπÿ™ÿØÿßŸÑ):** ÿßÿÆŸÅŸÇ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑŸÖÿ®ÿ±ÿØÿ© ŸàÿßŸÑÿ≥ŸÉÿ±Ÿäÿßÿ™ ÿπŸÑŸâ ÿ≥ÿ±ÿπÿ© ŸÖÿ™Ÿàÿ≥ÿ∑ÿ© ÿ≠ŸàÿßŸÑŸä 2-3 ÿØŸÇÿßÿ¶ŸÇ ÿ≠ÿ™Ÿâ Ÿäÿ™ÿ¨ÿßŸÜÿ≥ ŸàŸäÿµÿ®ÿ≠ ŸÉÿ±ŸäŸÖŸäŸãÿß (ŸÑŸäÿ≥ ÿÆŸÅŸäŸÅŸãÿß ŸàŸáÿ¥Ÿãÿß ÿ¨ÿØŸãÿß ŸÖÿ´ŸÑ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸä). ÿßŸÉÿ¥ÿ∑ ÿ¨ŸàÿßŸÜÿ® ÿßŸÑŸàÿπÿßÿ°. ÿ™ÿ¨ŸÜÿ® ÿ•ÿØÿÆÿßŸÑ ÿßŸÑŸÉÿ´Ÿäÿ± ŸÖŸÜ ÿßŸÑŸáŸàÿßÿ°.
                         Ÿ£. **ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ≥Ÿàÿßÿ¶ŸÑ:** ÿπŸÑŸâ ÿ≥ÿ±ÿπÿ© ŸÖŸÜÿÆŸÅÿ∂ÿ©. ÿ£ÿ∂ŸÅ ÿßŸÑÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© ÿ™ŸÑŸà ÿßŸÑÿ£ÿÆÿ±Ÿâÿå ŸÅŸÇÿ∑ ÿ≠ÿ™Ÿâ Ÿäÿ™ÿ¨ÿßŸÜÿ≥. ÿ£ÿ∂ŸÅ ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß.
                         Ÿ§. **ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ¨ÿßŸÅ:** ÿπŸÑŸâ ÿ£ŸÇŸÑ ÿ≥ÿ±ÿπÿ©. ÿ£ÿ∂ŸÅ ÿÆŸÑŸäÿ∑ ÿßŸÑÿØŸÇŸäŸÇ ŸÅŸä 4-5 ÿ•ÿ∂ÿßŸÅÿßÿ™ÿå ÿßÿÆŸÑÿ∑ ÿ≠ÿ™Ÿâ Ÿäÿµÿ®ÿ≠ *ÿ¥ÿ®Ÿá* ŸÖÿ™ÿ¨ÿßŸÜÿ≥ (ÿ®ÿπÿ∂ ÿßŸÑÿÆÿ∑Ÿàÿ∑ ŸÑÿß ÿ®ÿ£ÿ≥ ÿ®Ÿáÿß). ŸäŸÇŸÑŸÑ ŸÖŸÜ ÿ™ÿ∑Ÿàÿ± ÿßŸÑÿ¨ŸÑŸàÿ™ŸäŸÜ.
                         Ÿ•. **ÿßŸÑÿ∑Ÿä:** ÿ£ÿ∂ŸÅ ŸÉŸÖŸäÿ© ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿßŸÑÿ∂ÿÆŸÖÿ©. ÿßÿ≥ÿ™ÿÆÿØŸÖ ŸÖŸÑÿπŸÇÿ© ŸÖÿ≥ÿ∑ÿ≠ÿ© ŸÇŸàŸäÿ©/ŸäÿØŸäŸÉ ŸÑŸÑÿ∑Ÿäÿå ŸÖÿπ ÿØŸÖÿ¨ ÿ¢ÿÆÿ± ÿ®ŸÇÿßŸäÿß ÿßŸÑÿØŸÇŸäŸÇ. ÿ≥ŸäŸÉŸàŸÜ ÿßŸÑÿπÿ¨ŸäŸÜ ÿ≥ŸÖŸäŸÉŸãÿß ÿ¨ÿØŸãÿß. ŸÑÿß ÿ™ŸÅÿ±ÿ∑ ŸÅŸä ÿßŸÑÿÆŸÑÿ∑.
                         Ÿ¶. **ÿ™ÿ®ÿ±ŸäÿØ ÿ•ŸÑÿ≤ÿßŸÖŸä:** ŸÇÿ≥ŸÖ ÿßŸÑÿπÿ¨ŸäŸÜ ÿ•ŸÑŸâ ŸÉÿ±ÿßÿ™ ŸÉÿ®Ÿäÿ±ÿ© (4-6 ÿ£ŸàŸÜÿµÿ© / 113-170 ÿ¨ÿ±ÿßŸÖ ŸÑŸÉŸÑ ŸÖŸÜŸáÿß). ÿ¥ŸÉŸÑŸáÿß ÿ∑ŸàŸäŸÑÿ©. ÿ∫ŸÑŸÅŸáÿß ÿ®ÿ•ÿ≠ŸÉÿßŸÖ. ÿ∂ÿπŸáÿß ŸÅŸä ÿßŸÑÿ´ŸÑÿßÿ¨ÿ© ŸÑŸÖÿØÿ© Ÿ§ ÿ≥ÿßÿπÿßÿ™ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑÿå ŸàŸäŸÅÿ∂ŸÑ 12-72 ÿ≥ÿßÿπÿ©. ŸÑÿß ÿ™ÿ™ÿÆÿ∑Ÿâ/ÿ™ŸÇÿµÿ± Ÿáÿ∞Ÿá ÿßŸÑŸÖÿØÿ©.
                         Ÿß. **ÿßÿÆÿ®ÿ≤ ÿ®ÿßÿ±ÿØŸãÿß:** ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ ÿ•ŸÑŸâ 180¬∞ŸÖ (350¬∞ŸÅ). ÿ∂ÿπ ŸÉÿ±ÿßÿ™ ÿßŸÑÿπÿ¨ŸäŸÜ ÿßŸÑÿ®ÿßÿ±ÿØÿ© ŸÖÿ™ÿ®ÿßÿπÿØÿ© ÿπŸÑŸâ ÿßŸÑÿµŸäŸÜŸäÿ©. ŸÑÿß ÿ™ÿ®ÿ∑ÿ∑Ÿáÿß. ÿßÿÆÿ®ÿ≤ ŸÑŸÖÿØÿ© 18-25 ÿØŸÇŸäŸÇÿ© (ÿ≠ÿ≥ÿ® ÿßŸÑÿ≠ÿ¨ŸÖ). Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ÿßŸÑÿ£ÿ∑ÿ±ÿßŸÅ ŸÖÿ™ŸÖÿßÿ≥ŸÉÿ©ÿå ŸàÿßŸÑŸÖÿ±ŸÉÿ≤ ÿ∑ÿ±ŸäŸãÿß ÿ¨ÿØŸãÿßÿå ŸàŸÑÿ≤ÿ¨Ÿãÿß ŸÇŸÑŸäŸÑÿßŸãÿå Ÿàÿ±ÿ®ŸÖÿß ÿ∫Ÿäÿ± ŸÖŸÉÿ™ŸÖŸÑ ÿßŸÑŸÜÿ∂ÿ¨. (ÿØÿ±ÿ¨ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿØÿßÿÆŸÑŸäÿ© 175-185¬∞ŸÅ / 79-85¬∞ŸÖ ŸáÿØŸÅ ÿ¨ŸäÿØ). ÿ£ÿØÿ± ÿßŸÑÿµŸäŸÜŸäÿ© ŸÅŸä ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸàŸÇÿ™.
                         Ÿ®. **ÿ®ÿ±ÿØ ÿ®ÿ≠ÿ∞ÿ±:** ÿ®ÿ±ÿØ ÿπŸÑŸâ ÿßŸÑÿµŸäŸÜŸäÿ© ŸÑŸÖÿØÿ© Ÿ°Ÿ†-Ÿ°Ÿ• ÿØŸÇŸäŸÇÿ©. ÿ•ŸÜŸáÿß Ÿáÿ¥ÿ©! ÿßŸÜŸÇŸÑŸáÿß ÿ®ÿ±ŸÅŸÇ ÿ•ŸÑŸâ ÿ±ŸÅ ÿ≥ŸÑŸÉŸä. ÿßŸÑÿ£ŸÅÿ∂ŸÑ ÿßŸÑÿßÿ≥ÿ™ŸÖÿ™ÿßÿπ ÿ®Ÿáÿß ÿØÿßŸÅÿ¶ÿ© (ŸàŸÑŸÉŸÜ ŸÑŸäÿ≥ÿ™ ÿ≥ÿßÿÆŸÜÿ© ŸÖŸÜÿµŸáÿ±ÿ©!).`,
            thinNotes: `ÿßŸÑŸÇÿ±ŸÖÿ¥ÿ© = ÿ£ŸÇÿµŸâ ÿßŸÜÿ™ÿ¥ÿßÿ± + ÿ£ÿØŸÜŸâ ÿ¨ŸÑŸàÿ™ŸäŸÜ. ÿßŸÑÿ≥ŸÉÿ± ÿßŸÑÿ£ÿ®Ÿäÿ∂ ÿßŸÑÿπÿßŸÑŸäÿå ÿßŸÑÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß ÿßŸÑÿπÿßŸÑŸäÿ© (ÿßŸÑŸÇŸÑŸàŸäÿ© ÿ™ÿπÿ≤ÿ≤ ÿßŸÑÿ™ÿ≠ŸÖŸäÿ±/ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ±)ÿå ŸàÿßŸÑÿÆŸÅŸÇ ÿßŸÑÿπŸÉÿ≥Ÿä (ÿ™ÿ∫ŸÑŸäŸÅ ÿßŸÑÿØŸÇŸäŸÇ ÿ®ÿßŸÑÿØŸáŸàŸÜ ÿ£ŸàŸÑÿßŸã) ÿ£ŸÖŸàÿ± ÿ≠ÿßÿ≥ŸÖÿ©. ŸÑÿß ÿ™ÿ®ÿ±ŸäÿØ! ÿßÿÆÿ®ÿ≤ ÿ¨ŸäÿØŸãÿß.`,
            thinSteps: `Ÿ°. **ÿßŸÑÿ™ÿ¨ŸáŸäÿ≤:** ÿ®ÿ∑ŸëŸÜ ÿßŸÑÿµŸàÿßŸÜŸä. ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿ®ÿßÿ±ÿØÿ© ŸàŸÑŸÉŸÜ ŸÖÿ±ŸÜÿ© (18-20¬∞ŸÖ / 65-68¬∞ŸÅ)ÿå ŸÖŸÇÿ∑ÿπÿ© ÿ•ŸÑŸâ ŸÇÿ∑ÿπ ÿµÿ∫Ÿäÿ±ÿ©. ÿßŸÑÿ®Ÿäÿ∂ ÿ®ÿØÿ±ÿ¨ÿ© ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©. ÿßÿÆŸÅŸÇ ÿßŸÑÿ®Ÿäÿ∂ ŸàÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß ŸÅŸä Ÿàÿπÿßÿ° ÿµÿ∫Ÿäÿ±.
                        Ÿ¢. **ÿßŸÑÿÆŸÅŸÇ ÿßŸÑÿπŸÉÿ≥Ÿä:** ŸÅŸä Ÿàÿπÿßÿ° ÿßŸÑÿÆŸÑÿßÿ∑ÿå ÿßÿÆŸÑÿ∑ ÿßŸÑÿØŸÇŸäŸÇ ŸàÿßŸÑÿ≥ŸÉÿ±Ÿäÿßÿ™ ŸàÿßŸÑŸÖŸÑÿ≠ ŸàÿßŸÑÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß. ÿßÿÆŸÑÿ∑ ŸÇŸÑŸäŸÑÿßŸã. ÿ£ÿ∂ŸÅ ŸÇÿ∑ÿπ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ÿßÿ±ÿØÿ©. ÿßÿÆŸÑÿ∑ ÿπŸÑŸâ ÿ≥ÿ±ÿπÿ© ŸÖŸÜÿÆŸÅÿ∂ÿ© ÿ≠ÿ™Ÿâ Ÿäÿ¥ÿ®Ÿá ÿßŸÑÿÆŸÑŸäÿ∑ ÿ±ŸÖŸÑŸãÿß ÿÆÿ¥ŸÜŸãÿß Ÿàÿ±ÿ∑ÿ®Ÿãÿß/ŸÅÿ™ÿßÿ™Ÿãÿß (ÿßŸÑÿ≤ÿ®ÿØÿ© ŸÖÿØŸÖÿ¨ÿ©ÿå ÿ™ÿ∫ŸÑŸÅ ÿßŸÑÿØŸÇŸäŸÇ). Ÿäÿ≥ÿ™ÿ∫ÿ±ŸÇ ÿ®ÿ∂ÿπ ÿØŸÇÿßÿ¶ŸÇ.
                        Ÿ£. **ÿØŸÖÿ¨ ÿßŸÑÿ≥Ÿàÿßÿ¶ŸÑ/ÿßŸÑÿ¨ÿßŸÅ:** ÿßŸÑÿÆŸÑÿßÿ∑ ÿπŸÑŸâ ÿ≥ÿ±ÿπÿ© ŸÖŸÜÿÆŸÅÿ∂ÿ©. ÿ£ÿ∂ŸÅ ÿÆŸÑŸäÿ∑ ÿßŸÑÿ®Ÿäÿ∂/ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß ÿ™ÿØÿ±Ÿäÿ¨ŸäŸãÿß. ÿßÿÆŸÑÿ∑ *ŸÅŸÇÿ∑* ÿ≠ÿ™Ÿâ ÿ™ÿ™ŸÉŸàŸÜ ÿπÿ¨ŸäŸÜÿ© ŸÖÿ™ŸÖÿßÿ≥ŸÉÿ© ÿ®ÿßŸÑŸÉÿßÿØ. ŸÇÿØ ÿ™ÿ®ÿØŸà ŸÖŸÅÿ™ÿ™ÿ© ŸÅŸä ÿßŸÑÿ®ÿØÿßŸäÿ©. ŸÑÿß ÿ™ŸÅÿ±ÿ∑ ŸÅŸä ÿßŸÑÿÆŸÑÿ∑. ÿßŸÑÿ∑ÿ±ÿßŸàÿ© ŸáŸä ÿßŸÑŸÖŸÅÿ™ÿßÿ≠.
                        Ÿ§. **ÿßŸÑÿ∑Ÿä:** ÿßÿ∑ŸàŸê ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿßŸÑŸÖŸÅÿ±ŸàŸÖÿ© ŸÜÿßÿπŸÖŸãÿß ÿ£Ÿà ÿßŸÑÿ≠ÿ®Ÿäÿ®ÿßÿ™ ÿßŸÑÿµÿ∫Ÿäÿ±ÿ© ÿ®ÿ±ŸÅŸÇ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÖŸÑÿπŸÇÿ© ŸÖÿ≥ÿ∑ÿ≠ÿ©. ÿ®ÿ£ŸÇŸÑ ÿπÿØÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿ±ŸÉÿßÿ™.
                        Ÿ•. **ÿßŸÑÿ™ÿ¥ŸÉŸäŸÑ ŸàÿßŸÑÿÆÿ®ÿ≤ ŸÅŸàÿ±Ÿãÿß:** ŸÑÿß ÿ™ÿ®ÿ±ÿØ! ÿ≥ÿÆŸÜ ÿßŸÑŸÅÿ±ŸÜ ÿ•ŸÑŸâ 175¬∞ŸÖ (350¬∞ŸÅ). ÿ¥ŸÉŸëŸÑ ÿ£ÿ¨ÿ≤ÿßÿ° ÿµÿ∫Ÿäÿ±ÿ© (ÿ≠ŸàÿßŸÑŸä 1 ŸÖŸÑÿπŸÇÿ© ŸÉÿ®Ÿäÿ±ÿ©) ÿπŸÑŸâ ÿßŸÑÿµŸàÿßŸÜŸäÿå ÿ™ÿßÿ±ŸÉŸãÿß ŸÖÿ≥ÿßÿ≠ÿ© ŸÉÿ®Ÿäÿ±ÿ© ÿ¨ÿØŸãÿß (3+ ÿ®Ÿàÿµÿßÿ™) - ÿ≥ÿ™ŸÜÿ™ÿ¥ÿ± ŸÉÿ´Ÿäÿ±Ÿãÿß!
                        Ÿ¶. **ÿßÿÆÿ®ÿ≤ ŸÑŸÑŸÇÿ±ŸÖÿ¥ÿ©:** ÿßÿÆÿ®ÿ≤ ŸÑŸÖÿØÿ© 12-16 ÿØŸÇŸäŸÇÿ© ÿ≠ÿ™Ÿâ ÿ™ŸÜÿ™ÿ¥ÿ± ÿ±ŸÇŸäŸÇÿ© Ÿàÿ™ÿµÿ®ÿ≠ ÿ∞Ÿáÿ®Ÿäÿ© ÿ®ŸÜŸäÿ© ÿ®ÿ¥ŸÉŸÑ ŸÖŸàÿ≠ÿØ ŸÖŸÜ ÿßŸÑÿ≠ÿßŸÅÿ© ÿ•ŸÑŸâ ÿßŸÑŸÖÿ±ŸÉÿ≤. ŸÇÿØ ÿ™ÿ®ÿØŸà ŸÖŸÜÿ™ŸÅÿÆÿ© ŸÇŸÑŸäŸÑÿßŸã ŸÅŸä ÿßŸÑŸÖŸÜÿ™ÿµŸÅ ŸàŸÑŸÉŸÜŸáÿß ÿ≥ÿ™ÿ≥ÿ∑ÿ≠ ÿπŸÜÿØ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ. ÿ£ÿØÿ± ÿßŸÑÿµŸäŸÜŸäÿ© ŸÅŸä ŸÖŸÜÿ™ÿµŸÅ ÿßŸÑŸàŸÇÿ™. ÿßŸÑÿÆÿ®ÿ≤ ÿßŸÑÿ≤ÿßÿ¶ÿØ ŸÇŸÑŸäŸÑÿßŸã ŸÖŸÇÿ®ŸàŸÑ ŸÑŸÑŸÇÿ±ŸÖÿ¥ÿ©.
                        Ÿß. **ÿ®ÿ±ÿØ ÿ™ŸÖÿßŸÖŸãÿß:** ÿ®ÿ±ÿØ ÿπŸÑŸâ ÿßŸÑÿµŸäŸÜŸäÿ© ŸÑŸÖÿØÿ© 5-10 ÿØŸÇÿßÿ¶ŸÇ ÿ≠ÿ™Ÿâ ÿ™ÿ™ŸÖÿßÿ≥ŸÉ ÿ®ŸÖÿß ŸäŸÉŸÅŸä ŸÑŸÜŸÇŸÑŸáÿß. ÿßŸÜŸÇŸÑŸáÿß ÿ•ŸÑŸâ ÿ±ŸÅ ÿ≥ŸÑŸÉŸä ŸÑÿ™ÿ®ÿ±ÿØ ÿ™ŸÖÿßŸÖŸãÿß. ÿ™ÿ™ÿ∑Ÿàÿ± ÿßŸÑŸÇÿ±ŸÖÿ¥ÿ© ÿßŸÑŸÉÿßŸÖŸÑÿ© ÿπŸÜÿØ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ÿ≠Ÿäÿ´ ÿ™ÿ™ÿ®ŸÑŸàÿ± ÿßŸÑÿ≥ŸÉÿ±Ÿäÿßÿ™ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.`,
            // Easter Egg & Recs
            stuffedTitle: 'ŸÅÿ™ÿ≠ÿ™ ÿßŸÑÿ≥ÿ± ÿßŸÑÿÆÿ∑Ÿäÿ±! üéâ',
            stuffedCongrats: 'ŸÖÿ®ÿ±ŸàŸÉ Ÿäÿß ÿ£ÿ≥ÿ∑Ÿàÿ±ÿ©! ÿßÿÆÿ™Ÿäÿßÿ±ŸÉ ŸÑŸÑŸÖÿ≥ÿßÿ± ÿßŸÑÿ≥ŸÖŸäŸÉ ŸàÿßŸÑŸÑÿ≤ÿ¨ ŸäŸÉÿ¥ŸÅ ÿπŸÜ ÿ•ŸÖŸÉÿßŸÜÿßÿ™ ŸÅÿßÿ¶ŸÇÿ©. ŸäŸÖŸÉŸÜŸÉ ÿ≠ÿ¥Ÿà Ÿáÿ∞Ÿá ÿßŸÑŸàÿ≠Ÿàÿ¥!',
            stuffedHowTo: 'ÿ•ÿ≤ÿßŸäÿü ÿßŸÅÿ±ÿØ ŸÉÿ±ÿ© ÿßŸÑÿπÿ¨ŸäŸÜ ŸÇŸÑŸäŸÑÿßŸãÿå ÿßÿπŸÖŸÑ ŸÅÿ¨Ÿàÿ©ÿå ÿ£ÿ∂ŸÅ ÿ≠ŸàÿßŸÑŸä ŸÖŸÑÿπŸÇÿ© ÿµÿ∫Ÿäÿ±ÿ© ŸÜŸàÿ™ŸäŸÑÿß ÿ£Ÿà ÿ≤ÿ®ÿØÿ© ŸÅÿ≥ÿ™ŸÇÿå ŸÑŸÅ ÿßŸÑÿπÿ¨ŸäŸÜ ÿ≠ŸàŸÑŸáÿßÿå ÿßŸÇŸÅŸÑŸáÿß ŸÉŸàŸäÿ≥ÿå ŸàÿßÿÆÿ®ÿ≤Ÿáÿß ÿ≠ÿ≥ÿ® ÿßŸÑÿ™Ÿàÿ¨ŸäŸáÿßÿ™ (ŸäŸÖŸÉŸÜ ÿ™ÿ≠ÿ™ÿßÿ¨ ÿØŸÇŸäŸÇÿ© ÿ£Ÿà ÿØŸÇŸäŸÇÿ™ŸäŸÜ ÿ≤ŸäÿßÿØÿ©).',
            pistachioTipTitle: 'ÿ™ŸàÿµŸäÿ© ŸÅÿ≥ÿ™ŸÇ ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ©:',
            pistachioTipDesc: 'ÿßŸÜÿ≥Ÿâ ÿßŸÑÿ£ŸÜŸàÿßÿπ ÿßŸÑŸÑŸä ÿ∑ÿπŸÖŸáÿß ÿÆŸÅŸäŸÅ ÿ£Ÿà ŸÖÿ≤Ÿäÿ™! ÿπÿ¥ÿßŸÜ ÿ∑ÿπŸÖ ÿßŸÑŸÅÿ≥ÿ™ŸÇ ÿßŸÑŸÖÿ±ŸÉÿ≤ ÿßŸÑÿ±ŸáŸäÿ® ÿßŸÑŸÑŸä ŸÉÿ£ŸÜŸÉ ÿ®ÿ™ÿßŸÉŸÑ ŸÅÿ≥ÿ™ŸÇ ÿ≥ÿßŸäÿ≠ÿå ÿ£ŸÜÿß ÿ®ÿ±ÿ¥ÿ≠ ÿ®ÿ¥ÿØÿ© "ŸÉÿ±ŸäŸÖÿ© ÿßŸÑŸÅÿ≥ÿ™ŸÇ ŸÖŸÜ ASM Foods". ÿÆÿ∑ŸäŸäŸäŸäÿ±ÿ© ÿ®ÿ¨ÿØ.',
            pistachioTipLink: 'ÿ¥ŸàŸÅŸáÿß ŸáŸÜÿß (ÿ±ÿßÿ®ÿ∑ ŸÖÿµÿ±)',
            chocoTipTitle: 'ÿπŸÑŸÖ ÿ≠ÿ®Ÿäÿ®ÿßÿ™ ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©:',
            chocoTipDesc: 'ŸÖÿ¥ ŸÉŸÑ ÿßŸÑÿ¥ŸàŸÉŸÑŸäÿ™ ÿ¥Ÿäÿ®ÿ≥ ÿ≤Ÿä ÿ®ÿπÿ∂! ÿπÿ¥ÿßŸÜ ÿßŸÑÿ∑ÿπŸÖ ÿßŸÑÿØÿßŸäÿ® ÿßŸÑŸÑŸä ÿ®ŸäŸÅŸÉÿ±ŸÉ ÿ®ÿßŸÑÿ£ŸÜŸàÿßÿπ ÿßŸÑÿ≠ŸÑŸàÿ© (ÿ≤Ÿä ÿ¨ŸÑÿßŸÉÿ≥Ÿä ŸàÿØŸäÿ±Ÿä ŸÖŸäŸÑŸÉÿå ÿ®ÿ≥ ÿ£ÿ≠ÿ≥ŸÜ ÿπÿ¥ÿßŸÜ #ŸÖŸÇÿßÿ∑ÿπÿ©)ÿå ÿØŸàÿ± ÿπŸÑŸâ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© "Target Kualety Dropsy" ÿ®ÿßŸÑŸÑÿ®ŸÜ (MILK). ÿØŸá ÿßŸÑÿ≥ŸÑÿßÿ≠ ÿßŸÑÿ≥ÿ±Ÿä ÿßŸÑÿ≠ŸÑŸà.',
            chocoTipLink: 'ŸÖŸÖŸÉŸÜ ÿ™ŸÑÿßŸÇŸäŸáÿß ÿπŸÜÿØ ŸÖŸàÿ±ÿØŸäŸÜ ÿ≤Ÿä ÿØŸàŸÑ (ÿ±ÿßÿ®ÿ∑ ŸÅŸäÿ≥ÿ®ŸàŸÉ)',
            chocoTipMilk: 'ÿßÿ™ÿ£ŸÉÿØ ÿ•ŸÜŸáÿß ÿßŸÑŸÜÿ≥ÿÆÿ© ÿßŸÑŸÑŸä ÿ®ÿßŸÑŸÑÿ®ŸÜ (MILK) ÿπÿ¥ÿßŸÜ ÿ£ŸÇÿµŸâ ŸÑÿ∞ÿßÿ∞ÿ©!',
            // Conclusion
            conclusionTitle: 'ÿßŸÑÿ™ÿ¨ÿ±ÿ®ÿ© ÿßŸÉÿ™ŸÖŸÑÿ™! üéâ',
            conclusionDesc: 'ÿ™ŸÖ ÿ™ÿ£ŸÉŸäÿØ ÿßŸÑŸÅÿ±ÿ∂Ÿäÿ©: ŸÉŸàŸÉŸäÿ≤ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ŸÖÿ™ŸÅŸàŸÇÿ©. ŸÑŸà Ÿàÿ´ŸÇÿ™ ŸÜÿ™ÿßÿ¶ÿ¨ŸÉ ÿßŸÑŸÑÿ∞Ÿäÿ∞ÿ©ÿå ÿ¥ÿßÿ±ŸÉ ÿßŸÑÿ£ÿØŸÑÿ©!',
            conclusionTag: 'ÿßÿπŸÖŸÑ ŸÑŸä ÿ™ÿßÿ¨ ÿπŸÑŸâ ÿßŸÜÿ≥ÿ™ÿ¨ÿ±ÿßŸÖ:',
            conclusionGoForth: 'ÿßŸÜÿ∑ŸÑŸÇ ŸàÿßÿÆÿ®ÿ≤ ÿπŸÑŸÖŸäÿßŸã!',
            footerText: 'ÿµŸèŸÜŸêÿπ ÿ®ÿßŸÑÿπŸÑŸÖÿå ÿßŸÑÿ≤ÿ®ÿØÿ©ÿå Ÿàÿ¥ŸàŸäÿ© ŸÉŸàÿØ.'
        }
    };

    // --- Functions ---

    // Convert input butter to grams
    function getBaseButterInGrams() {
        const amount = parseFloat(butterAmountInput.value);
        const unit = butterUnitSelect.value;
        if (isNaN(amount) || amount <= 0) return 0;

        let grams = (unit === 'cups') ? amount * GRAMS_PER_CUP_BUTTER : amount;

        // Basic validation (e.g., minimum 100g)
        if (grams < 100) {
            butterWarning.style.display = 'block';
            butterWarning.textContent = langStrings[currentLanguage].butterWarning;
            return 0;
        } else {
            butterWarning.style.display = 'none';
            return grams;
        }
    }

    // Calculate scaled recipe
    function calculateScaledRecipe(butterInGrams, cookieType) {
        const base = baseRecipes[cookieType];
        if (!base) return null;

        const scalingFactor = butterInGrams / base.baseButter;
        const scaledIngredients = {};

        for (const key in base.ingredients) {
            scaledIngredients[key] = {
                grams: base.ingredients[key][0] * scalingFactor,
                unitType: base.ingredients[key][1] // Keep track of type for conversion
            };
        }

        let yieldValue;
        if (cookieType === 'thick') {
            // Calculate yield based on total dough weight and target cookie weight
            let totalDoughWeight = 0;
            for (const key in scaledIngredients) {
                totalDoughWeight += scaledIngredients[key].grams;
            }
            yieldValue = Math.round(totalDoughWeight / base.cookieSizeGrams);
        } else {
            yieldValue = Math.round(base.yieldPerBase * scalingFactor);
        }

        return {
            ingredients: scaledIngredients,
            yield: yieldValue,
            notesKey: base.notes,
            stepsKey: base.steps,
            prepTechKeys: base.prepTech,
            isThick: cookieType === 'thick' // Flag for easter egg
        };
    }

// Format ingredient amount based on unit system
function formatIngredient(grams, unitType, lang, unitSystem) {
    const T = langStrings[lang]; // Translation helper
    let outputText = ''; // Use a single output variable

    // Special case for Eggs - Show decimal count and total grams
    if (unitType === 'egg') {
        let numEggs = grams / GRAMS_PER_LARGE_EGG;
        if (numEggs < 0.5) numEggs = 1; // Ensure at least 1 egg if grams > 0
        const eggText = numEggs.toFixed(1) + " " + (numEggs <= 1 ? T.egg : T.eggs);
        const totalGrams = Math.round(grams);
        outputText = `${eggText} (${totalGrams}g)`;
        return outputText;
    }

    // --- Proceed with other unit types ---
    let metricText = `${Math.round(grams)} g`;
    let imperialText = '';
    let cupsText = ''; // For Arabic display (if applicable)

    // --- Imperial Calculation (Approximate) ---
    let imperialAmount = '';
    let imperialUnit = '';
    switch (unitType) {
        case 'butter':
        case 'sugar': // Granulated and Brown are similar enough for approx cups
        case 'chocolate':
            const cupEq = unitType === 'butter' ? GRAMS_PER_CUP_BUTTER : (unitType === 'sugar' ? GRAMS_PER_CUP_GRAN_SUGAR : GRAMS_PER_CUP_CHOC_CHIPS);
            imperialAmount = (grams / cupEq).toFixed(2);
            // Remove trailing ".00"
            imperialAmount = imperialAmount.endsWith('.00') ? imperialAmount.slice(0, -3) : imperialAmount;
            imperialUnit = (parseFloat(imperialAmount) === 1) ? T.cup : T.cups; // Use translations for cup/cups
            cupsText = `${imperialAmount} ${imperialUnit}`; // For potential AR display
            break;
        case 'flour':
            imperialAmount = (grams / GRAMS_PER_CUP_FLOUR).toFixed(2);
            imperialAmount = imperialAmount.endsWith('.00') ? imperialAmount.slice(0, -3) : imperialAmount;
            imperialUnit = (parseFloat(imperialAmount) === 1) ? T.cup : T.cups;
            cupsText = `${imperialAmount} ${imperialUnit}`;
            break;
        case 'salt':
        case 'bakingSoda':
        case 'bakingPowder':
        case 'vanilla':
        case 'milkPowder': // Added milk powder here for tsp/tbsp logic
        case 'prepWater': // Added prep water here for tsp/tbsp logic
            let tspEq = 1; // Default multiplier
            let unitNameSingular = 'tsp'; // Default unit
            let unitNamePlural = 'tsps';
            let useTbsp = false;

            if (unitType === 'salt') tspEq = GRAMS_PER_TSP_SALT;
            else if (unitType === 'bakingSoda') tspEq = GRAMS_PER_TSP_BAKING_SODA;
            else if (unitType === 'bakingPowder') tspEq = GRAMS_PER_TSP_BAKING_POWDER;
            else if (unitType === 'vanilla') tspEq = GRAMS_PER_TSP_VANILLA;
            else if (unitType === 'prepWater') tspEq = 4.9; // Approx 5g water/tsp
            else if (unitType === 'milkPowder') {
                tspEq = GRAMS_PER_TBSP_MILK_POWDER / 3; // Convert Tbsp base to Tsp base
                unitNameSingular = 'Tbsp'; // Prefer Tbsp display
                unitNamePlural = 'Tbsp';
                useTbsp = true;
            }

            let baseAmount = grams / tspEq; // Amount in basic unit (tsp)

            // Convert to Tbsp if preferred and applicable
            if (useTbsp && baseAmount >= 2.9) { // If close to 1 Tbsp or more
                baseAmount = baseAmount / 3; // Convert tsp amount to tbsp amount
                unitNameSingular = 'Tbsp';
                unitNamePlural = 'Tbsp';
            } else { // Otherwise stick to tsp
                unitNameSingular = 'tsp';
                unitNamePlural = 'tsps';
            }

            if (baseAmount < 0.1) baseAmount = 0; // Avoid tiny fractions

            if (baseAmount < 1 && baseAmount > 0) { // Handle fractions
                if (baseAmount >= 0.875) imperialAmount = '‚Öû';
                else if (baseAmount >= 0.7) imperialAmount = '¬æ';
                else if (baseAmount >= 0.6) imperialAmount = '‚Öî';
                else if (baseAmount >= 0.4) imperialAmount = '¬Ω';
                else if (baseAmount >= 0.3) imperialAmount = '‚Öì';
                else if (baseAmount >= 0.2) imperialAmount = '¬º';
                else if (baseAmount >= 0.1) imperialAmount = '‚Öõ';
                else imperialAmount = 'pinch'; // Only if really small
                imperialUnit = unitNameSingular; // Use singular for fractions
            } else {
                // Format whole/decimal numbers (e.g., 1, 1.5, 2)
                imperialAmount = parseFloat(baseAmount.toFixed(1)).toString(); // toFixed(1) then parse and back to string removes trailing .0
                imperialUnit = (baseAmount > 0 && baseAmount <= 1) ? unitNameSingular : unitNamePlural;
            }
            if (imperialAmount === 'pinch') imperialUnit = '';
            // Special label for prep water
            if (unitType === 'prepWater') imperialUnit += ' water/milk';
            break;
        default: // Fallback for unknown types
            imperialAmount = Math.round(grams);
            imperialUnit = 'g';
    }
    // Avoid displaying unit if amount is 0
    if (parseFloat(imperialAmount) === 0) {
        imperialText = `0 ${imperialUnit}`; // Or just "0"?
    } else {
        imperialText = `${imperialAmount} ${imperialUnit}`;
    }

    // --- Return based on language and unit system ---
    if (lang === 'en') {
        outputText = (unitSystem === 'metric') ? metricText : imperialText.trim(); // Trim potential extra space
    } else { // Arabic
        // Always show grams, optionally show cups if applicable for certain types
        outputText = `<span class="unit-g">${metricText}</span>`;
        if (cupsText && (unitType === 'butter' || unitType === 'sugar' || unitType === 'flour' || unitType === 'chocolate')) {
            outputText += ` <span class="unit-cups">(${cupsText})</span>`;
        }
    }
    return outputText;
}

    // Display the recipe
    function displayRecipe(recipeData) {
        if (!recipeData) return;

        const lang = currentLanguage;
        const units = currentUnitSystem;
        const T = langStrings[lang]; // Translation helper

        const cookieName = T[`${selectedCookieType}Title`];
        const yieldNum = recipeData.yield;
        let yieldText = '';
        if (selectedCookieType === 'thick') {
            yieldText = `${yieldNum} ${yieldNum === 1 ? T.largeCookie : T.largeCookies}`;
        } else {
            yieldText = `${yieldNum} ${yieldNum === 1 ? T.cookie : T.cookies}`;
        }

        let ingredientsHtml = `<h3 class="ingredients-title">${T.ingredientsTitle}</h3><ul>`;
        for (const key in recipeData.ingredients) {
            const item = recipeData.ingredients[key];
            const ingredientName = T[key] || key; // Use translation or key as fallback
            const formattedAmount = formatIngredient(item.grams, item.unitType, lang, units);
            ingredientsHtml += `<li><strong>${formattedAmount}</strong> ${ingredientName}</li>`;
        }
        ingredientsHtml += `</ul>`;

        let prepTechHtml = `<h3 class="prep-tech-title">${T.prepTitle}</h3>`;
        recipeData.prepTechKeys.forEach(key => {
            prepTechHtml += `<div class="pro-tip note">
                                <h4>${T[`prepTechTitle_${key}`]}</h4>
                                <p>${T[`prepTechDesc_${key}`]}</p>
                             </div>`;
        });

        let stepsHtml = `<h3 class="steps-title">${T.stepsTitle}</h3><ol>`;
        const stepsArray = T[recipeData.stepsKey].split('\n'); // Split steps string into array
        stepsArray.forEach(step => {
            if (step.trim()) { // Avoid empty lines
                // Basic formatting for bolding: finding text between **
                let formattedStep = step.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                stepsHtml += `<li>${formattedStep.replace(/^\d+\.\s*/, '')}</li>`; // Remove leading number/dot
            }
        });
        stepsHtml += `</ol>`;

        let notesHtml = `<div class="pro-tip"><h4>${T.proTipsTitle}</h4><p>${T[recipeData.notesKey]}</p></div>`;

        recipeContent.innerHTML = `
            <h2>${T.recipeTitle.replace('{cookieName}', cookieName)}</h2>
            <p class="recipe-yield">${T.approxYield} ${yieldText}</p>
            ${prepTechHtml}
            ${ingredientsHtml}
            ${stepsHtml}
            ${notesHtml}
        `;

        // Show/Hide Easter Egg & Chocolate Tip
        stuffedEasterEgg.style.display = recipeData.isThick ? 'block' : 'none';
        chocolateRecommendation.style.display = 'block'; // Show general chocolate tip

        // Update texts within dynamic sections if needed
        updateLanguageContent(recipeDisplaySection); // Apply translations to static text within recipe section

        recipeDisplaySection.style.display = 'block';
        // Scroll smoothly to the recipe
        recipeDisplaySection.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

    // --- Language and Unit Switching ---
    function updateLanguageContent(parentElement = document.body) {
        const elements = parentElement.querySelectorAll('[data-en]');
        elements.forEach(el => {
            const key = currentLanguage; // 'en' or 'ar'
            if (el.dataset[key]) {
                // Handle different element types
                if (el.tagName === 'INPUT' && el.placeholder) {
                    el.placeholder = el.dataset[key];
                } else {
                    el.innerHTML = el.dataset[key]; // Use innerHTML to allow tags in data attributes
                }
            }
        });

        // Update static button text specifically
        langToggleButton.textContent = (currentLanguage === 'en') ? T('toggleArabic') : T('toggleEnglish');
        unitToggleButton.textContent = (currentLanguage === 'en') ? T(currentUnitSystem === 'metric' ? 'unitImperial' : 'unitMetric') : T(currentUnitSystem === 'grams' ? 'unitCups' : 'unitGrams');

        // Update specific dynamic labels/placeholders if not covered by data attributes
        if (parentElement === document.body || parentElement.contains(butterUnitSelect)) {
            // Update butter unit options
            const butterUnitOptions = butterUnitSelect.options;
            for (let i = 0; i < butterUnitOptions.length; i++) {
                const option = butterUnitOptions[i];
                const value = option.value; // 'grams' or 'cups'
                option.textContent = T(value); // Use 'grams' or 'cups' key from langStrings
            }
        }

        // Set page direction
        htmlElement.setAttribute('dir', currentLanguage === 'ar' ? 'rtl' : 'ltr');
    }

    // Helper to get translation
    function T(key) {
        return langStrings[currentLanguage][key] || key; // Fallback to key name
    }

    function toggleLanguage() {
        currentLanguage = (currentLanguage === 'en') ? 'ar' : 'en';
        // Adjust unit system based on language change if needed
        if (currentLanguage === 'ar') {
            currentUnitSystem = 'grams'; // Default Arabic to Grams/Cups view
        } else {
            currentUnitSystem = 'metric'; // Default English to Metric
        }
        updateLanguageContent(); // Update all text
        // Re-display recipe if one is selected to apply new lang/units
        if (selectedCookieType && baseButterGrams > 0) {
            const scaledRecipe = calculateScaledRecipe(baseButterGrams, selectedCookieType);
            displayRecipe(scaledRecipe);
        }
        // Update button text after updating content
        langToggleButton.textContent = (currentLanguage === 'en') ? T('toggleArabic') : T('toggleEnglish');
        updateUnitButtonText(); // Update unit button text
    }

    function toggleUnits() {
        if (currentLanguage === 'en') {
            currentUnitSystem = (currentUnitSystem === 'metric') ? 'imperial' : 'metric';
        } else { // Arabic toggles between Grams (primary) and Cups (secondary view)
            // This logic might need refinement - maybe just changes display preference?
            // For now, let's assume it affects the *display* preference in formatIngredient
            currentUnitSystem = (currentUnitSystem === 'grams') ? 'cups' : 'grams'; // Toggle preference?
            // For simplicity, let's just stick to EN having Metric/Imperial toggle for now
            // And AR showing Grams + Cups where applicable always. So AR toggle does nothing practical yet.
            // Reverting AR toggle logic:
            if (currentLanguage === 'ar') {
                console.warn("Unit toggle currently only affects English display.");
                return; // Or implement a specific AR unit preference logic later
            }
        }
        updateUnitButtonText(); // Update button text
        // Re-display recipe with new unit formatting
        if (selectedCookieType && baseButterGrams > 0) {
            const scaledRecipe = calculateScaledRecipe(baseButterGrams, selectedCookieType);
            displayRecipe(scaledRecipe);
        }
    }

    function updateUnitButtonText() {
        if (currentLanguage === 'en') {
            unitToggleButton.textContent = T(currentUnitSystem === 'metric' ? 'unitImperial' : 'unitMetric');
        } else {
            // Decide how to label AR unit button - maybe it's fixed?
            unitToggleButton.textContent = T('unitGrams'); // Example: Always show Grams as base for AR? Or hide button?
            // Hiding for now in AR mode as the display shows both anyway
            unitToggleButton.style.display = 'none';
            butterUnitSelect.style.display = 'inline-block'; // Ensure butter unit select is visible
        }

        // Show/hide butter unit select based on language/system
        if (currentLanguage === 'en' && currentUnitSystem === 'imperial') {
            butterUnitSelect.value = 'cups'; // Default imperial to cups input
            butterUnitSelect.style.display = 'none'; // Hide selector in Imperial view
        } else {
            butterUnitSelect.style.display = 'inline-block'; // Show for Metric EN and AR
        }
    }

    // --- Event Listeners ---
    startExperimentBtn.addEventListener('click', () => {
        baseButterGrams = getBaseButterInGrams();
        if (baseButterGrams > 0) {
            cookieSelectionSection.style.display = 'block';
            cookieSelectionSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
            // Hide recipe until a type is chosen
            recipeDisplaySection.style.display = 'none';
            // Reset selection visual
            cookieOptions.forEach(opt => opt.classList.remove('selected'));
            selectedCookieType = null;
        }
    });

    // Update button state when input changes
    butterAmountInput.addEventListener('input', () => {
        butterWarning.style.display = 'none'; // Hide warning on new input
        // Optionally disable button if input is invalid here
    });
    butterUnitSelect.addEventListener('change', () => {
        butterWarning.style.display = 'none';
    });

    cookieOptions.forEach(option => {
        option.addEventListener('click', () => {
            if (baseButterGrams <= 0) {
                // Maybe prompt them to enter butter first?
                butterAmountInput.focus();
                butterWarning.textContent = "Please enter butter amount first!"; // Temp message
                butterWarning.style.display = 'block';
                return;
            }

            // Update selection visual
            cookieOptions.forEach(opt => opt.classList.remove('selected'));
            option.classList.add('selected');

            selectedCookieType = option.dataset.cookieType;
            const scaledRecipe = calculateScaledRecipe(baseButterGrams, selectedCookieType);
            displayRecipe(scaledRecipe);
        });

        // Hover effect (Optional - CSS handles basic hover, JS for more complex)
        option.addEventListener('mouseenter', () => {
            // Add class for JS-driven hover effects if needed
        });
        option.addEventListener('mouseleave', () => {
            // Remove class
        });
    });

    langToggleButton.addEventListener('click', toggleLanguage);
    unitToggleButton.addEventListener('click', toggleUnits);

    // --- Initial Setup ---
    updateLanguageContent(); // Set initial language text
    updateUnitButtonText(); // Set initial unit button text and visibility

}); // End DOMContentLoaded
