document.addEventListener('DOMContentLoaded', () => {
    // --- Constants ---
    const GRAMS_PER_CUP_BUTTER = 226.8;
    const GRAMS_PER_CUP_FLOUR = 125;
    const GRAMS_PER_CUP_GRAN_SUGAR = 200;
    const GRAMS_PER_CUP_BROWN_SUGAR = 213; // Packed
    const GRAMS_PER_TSP_SALT = 6;
    const GRAMS_PER_TSP_BAKING_SODA = 4.8;
    const GRAMS_PER_TSP_BAKING_POWDER = 4;
    const GRAMS_PER_LARGE_EGG = 50;
    const GRAMS_PER_TSP_VANILLA = 4.2;
    const GRAMS_PER_CUP_CHOC_CHIPS = 170;
    const GRAMS_PER_TBSP_MILK_POWDER = 7;
    const GRAMS_PER_TSP_WATER = 4.9; // Approx 5g/tsp

    // --- Base Recipes (Grams) ---
    const baseRecipes = {
        classic: {
            baseButter: 284, yieldPerBase: 30,
            ingredients: {
                granulatedSugar: [200, 'sugar'], lightBrownSugar: [200, 'sugar'], largeEggs: [100, 'egg'], vanillaExtract: [8.4, 'vanilla'], allPurposeFlour: [420, 'flour'], tableSalt: [6, 'salt'], bakingPowder: [4, 'bakingPowder'], bakingSoda: [2.4, 'bakingSoda'], chocolateChips: [454, 'chocolate'], prepWater: [9.4, 'water']
            }, notes: 'classicNotes', prepTech: ['brownButter', 'hydrateButter', 'chillButterClassicThick'], steps: 'classicSteps'
        },
        thick: {
            baseButter: 284, yieldPerBase: 10, cookieSizeGrams: 140,
            ingredients: {
                granulatedSugar: [100, 'sugar'], lightBrownSugar: [200, 'sugar'], toastedMilkPowder: [15, 'milkPowder'], largeEggs: [100, 'egg'], vanillaExtract: [8.4, 'vanilla'], allPurposeFlour: [420, 'flour'], tableSalt: [6, 'salt'], bakingPowder: [5, 'bakingPowder'], /* NO Baking Soda */ chocolateChips: [567, 'chocolate'], prepWater: [9.4, 'water']
            }, notes: 'thickNotes', prepTech: ['brownButter', 'hydrateButter', 'chillButterClassicThick', 'toastMilkPowder'], steps: 'thickSteps'
        },
        thin: {
            baseButter: 284, yieldPerBase: 42,
            ingredients: {
                granulatedSugar: [300, 'sugar'], lightBrownSugar: [200, 'sugar'], largeEggs: [100, 'egg'], vanillaExtract: [8.4, 'vanilla'], allPurposeFlour: [420, 'flour'], tableSalt: [6, 'salt'], bakingSoda: [7.2, 'bakingSoda'], /* NO Baking Powder */ chocolateChips: [340, 'chocolate'], prepWater: [9.4, 'water']
            }, notes: 'thinNotes', prepTech: ['brownButter', 'hydrateButter', 'chillButterThin'], steps: 'thinSteps'
        }
    };

    // --- Language Strings ---
    const langStrings = {
        en: {
            // Toggles & Units
            toggleArabic: 'ÿπÿ±ÿ®Ÿä', toggleEnglish: 'English', unitMetric: 'Switch to Imperial (cups, tsp)', unitImperial: 'Switch to Metric (g, ml)', unitGrams: 'Grams (g)', unitCups: 'Cups (cups)',
            // Units Short
            cup: 'cup', cups: 'cups', tsp: 'tsp', tsps: 'tsps', Tbsp: 'Tbsp', Tbsps: 'Tbsp', // Tbsp often doesn't pluralize with 's'
            // Butter Input
            egg: 'egg', eggs: 'eggs', butterVarTitle: 'Step 1: Butter Up! üßà', butterVarDesc: 'Great cookies need the perfect amount of butter. So, how much of this golden goodness are you using? Be precise, chef! üë©‚Äçüç≥', grams: 'grams', butterWarning: 'Yo, enter a valid butter amount (at least 100g or about 1/2 cup). Don‚Äôt leave me hanging! üôÉ', beginExperiment: 'Let‚Äôs Bake! üç™',
            // Cookie Selection
            phenotypeTitle: 'Step 2: Pick Your Cookie Vibe üç™', phenotypeDesc: 'What kind of cookie are you feeling today? Choose your adventure:', thinTitle: 'The Crispy AF Cracker', thinDesc: 'So thin, it‚Äôs basically a cookie flex. Perfect for dunking or just flexing on your friends. üòé', classicTitle: 'The OG Balanced Baddie', classicDesc: 'Chewy, crispy, and always down to party. The crowd-pleaser that never misses. üéâ', thickTitle: 'The Thicc King', thickDesc: 'So gooey, it‚Äôll make your taste buds do a happy dance. Pure indulgence, no cap. üíÉ',
            // Recipe Display
            recipeTitle: '{cookieName} Recipe', prepTitle: 'Prep Like a Pro', ingredientsTitle: 'Your Cookie Blueprint üó∫Ô∏è', approxYield: 'You‚Äôll get roughly', cookies: 'cookies', cookie: 'cookie', largeCookies: 'large cookies', largeCookie: 'large cookie', stepsTitle: 'Let‚Äôs Bake, Bestie! üë©‚Äçüç≥', proTipsTitle: 'Pro Tips from Your Cookie Sensei üß†',
            // Ingredient Names
            unsaltedButter: 'Homemade Brown Butter üßà', granulatedSugar: 'White Sugar üç¨', lightBrownSugar: 'Light Brown Sugar', toastedMilkPowder: 'Toasted Milk Powder (for that extra oomph) ü•õ', largeEggs: 'Large Eggs (room temp, pls) ü•ö', vanillaExtract: 'Vanilla Extract', allPurposeFlour: 'All-Purpose Flour', tableSalt: 'Salt (just a pinch) üßÇ', bakingPowder: 'Baking Powder (fresh!)', bakingSoda: 'Baking Soda (fresh, duh!)', chocolateChips: 'Chocolate Chips/Chunks üç´', prepWater: 'Water/Milk (for hydration, like your skin) üíß',
            // Prep Techniques (Shortened for brevity, assume full text is here)
            prepTechTitle_brownButter: 'Browning Butter 101: Turn that butter into liquid gold! üßà‚ú®', prepTechDesc_brownButter: `Melt butter, let milk solids toast to nutty brown (5-10 min). Pour out immediately. <br>1. Cut butter, melt med heat. <br>2. Foam subsides, solids sink & brown. <br>3. Nutty aroma? Pour into bowl (incl. bits).`,
            prepTechTitle_hydrateButter: 'Optional: Hydrate Your Butter üí¶', prepTechDesc_hydrateButter: `Browning removes water. Add calculated amount back *after* browning, *before* chilling for moisture. Stir gently.`,
            prepTechTitle_chillButterClassicThick: 'Chill Factor: Solidify for Creaming ‚è≥', prepTechDesc_chillButterClassicThick: `Recrystallizes fat for creaming. <br>1. Cool browned butter slightly. <br>2. Refrigerate until solid but pliable (60-65¬∞F / 16-18¬∞C). Crucial for Classic/Thick. (~1-2 hrs).`,
            prepTechTitle_chillButterThin: 'Chill Factor: Cool for Reverse Creaming ‚ùÑÔ∏è', prepTechDesc_chillButterThin: `For coating flour without instant melting. <br>1. Cool browned butter, refrigerate briefly until just solidified but cuttable (65-68¬∞F / 18-20¬∞C). (~30-60 min).`,
            prepTechTitle_toastMilkPowder: 'Flavor Amplifier: Toast Milk Powder üî•', prepTechDesc_toastMilkPowder: `Intensifies nutty/malty notes. <br>1. Spread NFDM thin on sheet/skillet. <br>2. Oven: 250¬∞F/120¬∞C (10-15m, stir). Skillet: Med-low, stir constantly. <br>3. Watch closely! Golden brown & fragrant. Cool.`,
             // Notes & Steps (Shortened for brevity, assume full text is here)
            classicNotes: `Balance: 1:1 sugar, combined leavening, PERFECT creaming. Butter temp (60-65¬∞F) is key.`,
            classicSteps: `**Prep:** Whisk dry. Line sheets. Butter chilled pliable, eggs room temp. \n**Cream:** Beat chilled butter & sugars med-high 5 FULL mins (light/fluffy). Scrape. \n**Add Wet:** Low speed. Eggs 1by1 (just combined). Vanilla. \n**Add Dry:** Lowest speed. Flour mix gradually (just combined). Finish by hand. \n**Fold:** Chocolate. \n**Chill (Recommended):** 30-60 min min (up to 48hr). \n**Scoop & Bake:** 375¬∞F (190¬∞C). ~2 Tbsp balls, 2in apart. 10-12 min (edges golden). Rotate. \n**Cool:** On sheet 3-5 min, then rack.`,
            thickNotes: `Thickness: Fight spread! High brown sugar, NO soda, MANDATORY long chill. Moderate cream. Toasted milk powder adds depth. Underbake for goo.`,
            thickSteps: `**Prep:** Whisk flour, milk powder, salt, baking powder. Line sheets. Butter chilled pliable, eggs room temp. \n**Cream (Moderately):** Beat chilled butter & sugars medium ~2-3 mins (creamy, NOT fluffy). Scrape. \n**Add Wet:** Low speed. Eggs 1by1 (just combined). Vanilla. \n**Add Dry:** Lowest speed. Flour mix 4-5 adds (almost combined). \n**Fold:** Chocolate (lots!). Use hands/spatula. Dough is THICK. \n**MANDATORY Chill:** LARGE balls (4-6oz/113-170g), roll tall. Wrap. Refrigerate MIN 4 hrs (ideal 12-72). \n**Bake COLD:** 350¬∞F (180¬∞C). Cold balls far apart. NO flatten. 18-25 min (edges set, center soft/gooey). Rotate. \n**Cool CAREFULLY:** On sheet 10-15 MIN, then rack gently.`,
            thinNotes: `Crispiness: Max Spread, Min Gluten. High granulated sugar, high soda, reverse cream. NO chill! Bake thoroughly.`,
            thinSteps: `**Prep:** Line sheets. Butter cool pliable (65-68¬∞F), cut small. Eggs room temp. Whisk eggs/vanilla. \n**Reverse Cream:** Mixer: flour, sugars, salt, soda. Add cool butter. Low speed till coarse sand/crumbs. \n**Combine Wet/Dry:** Low speed. Stream in egg/vanilla mix (just forms cohesive dough). DO NOT OVERMIX. \n**Fold:** Finely chopped/mini chocolate. Minimal strokes. \n**Scoop & Bake IMMEDIATELY:** NO CHILL! 350¬∞F (175¬∞C). Small scoops (~1 Tbsp), PLENTY space (3+ in). \n**Bake for Crispness:** 12-16 min (thin, uniform golden). Rotate. \n**Cool COMPLETELY:** On sheet 5-10 min, then rack fully. Crispness develops on cooling.`,
            // Easter Egg & Recs
            stuffedTitle: 'YOU UNLOCKED THE SECRET SAUCE! üéâ', stuffedCongrats: 'Congrats, Legend! Choosing the Thick & Gooey path reveals ultimate potential. You can STUFF these behemoths!', stuffedHowTo: 'How? Flatten dough ball, dent, add ~1 tsp Nutella/Pistachio Spread, wrap, seal, bake (+1-2 min maybe).', pistachioTipTitle: 'Pro Pistachio Recommendation:', pistachioTipDesc: 'For INTENSE pistachio flavour, I HIGHLY recommend "ASM Foods Pistachio Cream". Ridiculously good.', pistachioTipLink: 'Check it out here (Egypt Link)', chocoTipTitle: 'Chocolate Chip Science:', chocoTipDesc: 'For melt-in-your-mouth nostalgia, hunt down "Dropsy" MILK Chocolate. The sweet secret weapon. #Boycott', chocoTipLink: 'Find them via suppliers like this (Facebook Link)', chocoTipMilk: 'Make SURE it‚Äôs the MILK chocolate version!',
            // Conclusion
            conclusionTitle: 'Experiment Complete! üéâ', conclusionDesc: 'Hypothesis confirmed: Brown butter cookies are superior. Share the evidence!', conclusionTag: 'Tag me on Instagram:', conclusionGoForth: 'Go forth and bake scientifically!', footerText: 'Built with science, butter, and a little bit of code.'
        },
        ar: {
            // Toggles & Units
            toggleArabic: 'ÿπÿ±ÿ®Ÿä', toggleEnglish: 'English', unitMetric: 'ÿ≠ŸàŸëŸÑ ŸÑŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿä (ŸÉŸàÿ®ÿå ŸÖÿπŸÑŸÇÿ©)', unitImperial: 'ÿ≠ŸàŸëŸÑ ŸÑŸÑŸÖÿ™ÿ±Ÿä (ÿ¨ŸÖÿå ŸÖŸÑ)', unitGrams: 'ÿ¨ÿ±ÿßŸÖ (g)', unitCups: 'ŸÉŸàÿ® (cups)',
            // Units Short
            cup: 'ŸÉŸàÿ®', cups: 'ŸÉŸàÿ®', tsp: 'ŸÖÿπŸÑŸÇÿ© ÿµÿ∫Ÿäÿ±ÿ©', tsps: 'ŸÖÿπŸÑŸÇÿ© ÿµÿ∫Ÿäÿ±ÿ©', Tbsp: 'ŸÖÿπŸÑŸÇÿ© ŸÉÿ®Ÿäÿ±ÿ©', Tbsps: 'ŸÖÿπŸÑŸÇÿ© ŸÉÿ®Ÿäÿ±ÿ©',
            // Butter Input
            egg: 'ÿ®Ÿäÿ∂ÿ©', eggs: 'ÿ®Ÿäÿ∂', butterVarTitle: 'ÿ£ŸàŸÑ ÿÆÿ∑Ÿàÿ©: ÿßŸÑÿ≤ÿ®ÿØÿ© Ÿäÿß ÿ®ÿßÿ¥ÿß! üßà', butterVarDesc: 'ŸÉŸàŸÉŸäÿ≤ ÿ¨ÿßŸÖÿØÿ©ÿü ŸÖÿ≠ÿ™ÿßÿ¨ÿ© ÿ≤ÿ®ÿØÿ© ŸÖÿ∏ÿ®Ÿàÿ∑ÿ©. ŸäÿπŸÜŸä ŸÇÿØ ÿ•ŸäŸá ŸÖŸÜ ÿßŸÑÿØŸáÿ® ÿßŸÑÿ≥ÿßŸäÿ≠ ŸÜÿßŸàŸä ÿ™ÿ≠ÿ∑ÿü ÿÆŸÑŸäŸÉ ÿØŸÇŸäŸÇ Ÿäÿß ÿ¥ŸäŸÅ! üë©‚Äçüç≥', grams: 'ÿ¨ÿ±ÿßŸÖ', butterWarning: 'ÿØÿÆŸÑ ŸÉŸÖŸäÿ© ÿ≤ÿ®ÿØÿ© ŸÖÿ∏ÿ®Ÿàÿ∑ÿ© (ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ Ÿ°Ÿ†Ÿ† ÿ¨ÿ±ÿßŸÖ ÿ£Ÿà ŸÜÿµ ŸÉŸàÿ® ŸÉÿØŸá). ŸÖÿ™ÿ≥ÿ≠ÿ®ÿ¥ ÿπŸÑŸäŸÜÿß ŸÉÿØŸá! üôÉ', beginExperiment: 'ŸäŸÑÿß ŸÜÿ®ÿØÿ£ ÿßŸÑÿ™ÿ¨ÿ±ÿ®ÿ©! üç™',
            // Cookie Selection
            phenotypeTitle: 'ÿßŸÑÿÆÿ∑Ÿàÿ© ÿßŸÑÿ™ÿßŸÜŸäÿ©: ÿßÿÆÿ™ÿßÿ± ŸÖŸàÿØ ÿßŸÑŸÉŸàŸÉŸäÿ≤ üç™', phenotypeDesc: 'ÿßŸÑŸÜŸáÿßÿ±ÿØÿ© ŸÜŸÅÿ≥ŸÉ ŸÅŸä ÿ•ŸäŸáÿü ŸäŸÑÿß ŸÜÿÆÿ™ÿßÿ± ŸÜŸàÿπ ÿßŸÑŸÖÿ∫ÿßŸÖÿ±ÿ©:', thinTitle: 'ŸÉŸàŸÉŸäÿ≤ ÿ±ŸÅÿßŸäÿπÿ© ŸàŸÖŸÇÿ±ŸÖÿ¥ÿ© ŸÖŸàÿ™', thinDesc: 'ÿ≤Ÿä ÿßŸÑÿ¥ÿ®ÿ≥Ÿä... ÿ®ÿ≥ ŸÉŸàŸÉŸäÿ≤. ÿ™ŸÜŸÅÿπ ÿ™ÿ™ÿ∫ŸÖÿ≥ ÿ£Ÿà ÿ™ÿ™ÿßŸÉŸÑ ÿπŸÑŸâ ÿ∑ŸàŸÑ. ŸÅŸÑŸäŸÉÿ≥ ÿ¨ÿßŸÖÿØ üòé', classicTitle: 'ÿßŸÑÿ£ÿµŸÑŸäÿ© ÿßŸÑŸÖÿ™Ÿàÿßÿ≤ŸÜÿ©', classicDesc: 'ÿ∑ÿ±ÿßŸàÿ© √ó ŸÇÿ±ŸÖÿ¥ÿ© √ó ÿ∑ÿπŸÖ ÿ¨ÿßŸÖÿØ. ÿØÿßŸäŸÖŸãÿß ÿ®ÿ™ŸÉÿ≥ÿ® ÿßŸÑŸÜÿßÿ≥. üéâ', thickTitle: 'ÿßŸÑŸÉŸàŸÉŸä ÿßŸÑŸÑŸä ŸÖŸÑŸäÿßŸÜÿ© Ÿàÿ¥ÿ®ÿπÿßŸÜÿ©', thickDesc: 'ÿ≥ŸÖŸäŸÉÿ© ŸàŸÑÿ≤ÿ¨ÿ© Ÿàÿ™ÿÆŸÑŸä ÿ≠Ÿàÿßÿ≥ŸÉ ÿ™ÿ±ŸÇÿµ. ÿ∑ÿπŸÖ ŸÖÿ¥ ÿ∑ÿ®ŸäÿπŸä. üíÉ',
             // Recipe Display
            recipeTitle: 'ŸàÿµŸÅÿ© {cookieName}', prepTitle: 'ÿßŸÑÿ™ÿ≠ÿ∂Ÿäÿ± ÿπŸÑŸâ ÿ£ÿµŸàŸÑŸá', ingredientsTitle: 'ŸÖŸÉŸàŸÜÿßÿ™ ÿßŸÑŸÖÿ∫ÿßŸÖÿ±ÿ© ÿ®ÿ™ÿßÿπÿ™ŸÉ üó∫Ô∏è', approxYield: 'Ÿáÿ™ÿπŸÖŸÑ ÿ≠ŸàÿßŸÑŸä', cookies: 'ŸÉŸàŸÉŸäÿ≤', cookie: 'ŸÉŸàŸÉŸä', largeCookies: 'ŸÉŸàŸÉŸäÿ≤ ŸÉÿ®ÿßÿ±', largeCookie: 'ŸÉŸàŸÉŸä ŸÉÿ®Ÿäÿ±ÿ©', stepsTitle: 'ÿÆÿ∑Ÿàÿßÿ™ ÿßŸÑÿ¥ŸäŸÅ ÿßŸÑÿ¨ÿßŸÖÿØ üë©‚Äçüç≥', proTipsTitle: 'ŸÜÿµÿßŸäÿ≠ ŸÖŸÜ ÿ£ÿ≥ÿ™ÿßÿ∞ ÿßŸÑŸÉŸàŸÉŸäÿ≤ ÿ®ÿ™ÿßÿπŸÉ üß†',
            // Ingredient Names
            unsaltedButter: 'ÿ≤ÿ®ÿØÿ© ÿ®ŸÜŸäÿ© ŸÖÿπŸÖŸàŸÑÿ© ŸÅŸä ÿßŸÑÿ®Ÿäÿ™ üßà', granulatedSugar: 'ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ üç¨', lightBrownSugar: 'ÿ≥ŸÉÿ± ÿ®ŸÜŸä ŸÅÿßÿ™ÿ≠', toastedMilkPowder: 'ŸÑÿ®ŸÜ ÿ®ŸàÿØÿ±ÿ© ŸÖÿ™ÿ≠ŸÖÿµ (ŸÑŸÑÿ∑ÿπŸÖ ÿßŸÑÿ≤ŸäÿßÿØÿ©) ü•õ', largeEggs: 'ÿ®Ÿäÿ∂ ŸÉÿ®Ÿäÿ± (ÿ®ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©) ü•ö', vanillaExtract: 'ŸÅÿßŸÜŸäŸÑŸäÿß', allPurposeFlour: 'ÿØŸÇŸäŸÇ ŸÖÿ™ÿπÿØÿØ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖÿßÿ™', tableSalt: 'ŸÖŸÑÿ≠ (ÿ±ÿ¥ÿ© ÿ®ÿ≥Ÿäÿ∑ÿ©) üßÇ', bakingPowder: 'ÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ± (ÿ∑ÿßÿ≤ÿ©!)', bakingSoda: 'ÿ®ŸäŸÉŸÜÿ¨ ÿµŸàÿØÿß (ÿ∑ÿßÿ≤ÿ© ÿ®ÿ±ÿ∂Ÿá!)', chocolateChips: 'ŸÇÿ∑ÿπ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© / ÿ¥Ÿäÿ®ÿ≥ üç´', prepWater: 'ŸÖÿßÿ°/ŸÑÿ®ŸÜ (ŸÑŸÑÿ™ÿ±ÿ∑Ÿäÿ®) üíß',
            // Prep Techniques (Shortened for brevity, assume full text is here)
            prepTechTitle_brownButter: 'ÿ•ÿ≤ÿßŸä ÿ™ÿ≠ŸàŸëŸÑ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸÑÿØŸáÿ® ÿ≥ÿßŸäÿ≠ üßà‚ú®', prepTechDesc_brownButter: `ÿ≥Ÿäÿ≠ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸàÿÆŸÑŸä ÿßŸÑÿ±Ÿàÿßÿ≥ÿ® ÿ™ÿ™ÿ≠ŸÖÿµ ŸÑŸÑŸàŸÜ ÿ®ŸÜŸä ŸÖŸÉÿ±ŸÖŸÑ (Ÿ•-Ÿ°Ÿ† ÿØŸÇ). ÿµÿ®Ÿáÿß ÿ®ÿ≥ÿ±ÿπÿ©. <br>Ÿ°. ŸÇÿ∑ÿπ ÿßŸÑÿ≤ÿ®ÿØÿ©ÿå ŸÜÿßÿ± ŸÖÿ™Ÿàÿ≥ÿ∑ÿ©. <br>Ÿ¢. ÿßŸÑÿ±ÿ∫Ÿàÿ© ÿ™ÿ±Ÿàÿ≠ÿå ÿßŸÑÿ±Ÿàÿßÿ≥ÿ® ÿ™ŸÜÿ≤ŸÑ Ÿàÿ™ÿ™ÿ≠ŸÖÿµ. <br>Ÿ£. ÿ±Ÿäÿ≠ÿ© ŸÖŸÉÿ≥ÿ±ÿßÿ™ÿü ÿµÿ® ŸÅŸä ÿ∑ÿ®ŸÇ (ŸÖÿπ ÿßŸÑÿ±Ÿàÿßÿ≥ÿ®).`,
            prepTechTitle_hydrateButter: 'ÿßÿÆÿ™Ÿäÿßÿ±Ÿä: ÿ±ÿ∑Ÿëÿ® ÿßŸÑÿ≤ÿ®ÿØÿ© üí¶', prepTechDesc_hydrateButter: `ÿßŸÑÿ™ÿ≠ŸÖŸäÿµ ÿ®Ÿäÿ¥ŸäŸÑ ŸÖŸäÿßŸá. ÿ∂ŸäŸÅ ÿßŸÑŸÉŸÖŸäÿ© ÿßŸÑŸÖÿ≠ÿ≥Ÿàÿ®ÿ© ÿ®ÿπÿØ ÿßŸÑÿ™ÿ≠ŸÖŸäÿµ ŸàŸÇÿ®ŸÑ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ÿπÿ¥ÿßŸÜ ÿßŸÑÿ±ÿ∑Ÿàÿ®ÿ©. ŸÇŸÑŸëÿ® ÿ®ÿ±ÿßÿ≠ÿ©.`,
            prepTechTitle_chillButterClassicThick: 'ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ ÿπÿ¥ÿßŸÜ ÿßŸÑÿÆŸÅŸÇ ÿßŸÑÿµÿ≠ ‚è≥', prepTechDesc_chillButterClassicThick: `ÿ®Ÿäÿ¨ŸÖŸëÿØ ÿßŸÑÿØŸáŸàŸÜ ÿπÿ¥ÿßŸÜ ÿßŸÑÿÆŸÅŸÇ. <br>Ÿ°. ÿ®ÿ±ŸëÿØ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ÿ¥ŸàŸäÿ©. <br>Ÿ¢. ÿ™ŸÑÿßÿ¨ÿ© ŸÑÿ≠ÿØ ŸÖÿß ÿ™ÿ®ŸÇŸâ ÿ¨ÿßŸÖÿØÿ© ÿ®ÿ≥ ŸÑŸäŸÜÿ© (Ÿ°Ÿ¶-Ÿ°Ÿ®¬∞ŸÖ). ŸÖŸáŸÖ ŸÑŸÑŸÉŸÑÿßÿ≥ŸäŸÉ/ÿßŸÑÿ≥ŸÖŸäŸÉÿ©. (~Ÿ°-Ÿ¢ ÿ≥ÿßÿπÿ©).`,
            prepTechTitle_chillButterThin: 'ÿ™ÿ®ÿ±ŸäÿØ ŸÖÿÆÿ™ŸÑŸÅ ŸÑŸÑÿ±ŸÅŸäÿπÿ© ‚ùÑÔ∏è', prepTechDesc_chillButterThin: `ÿπÿ¥ÿßŸÜ ÿ™ÿ∫ŸÑŸÅ ÿßŸÑÿØŸÇŸäŸÇ ŸÖŸÜ ÿ∫Ÿäÿ± ŸÖÿß ÿ™ÿ≥Ÿäÿ≠ ÿ®ÿ≥ÿ±ÿπÿ©. <br>Ÿ°. ÿ®ÿ±ŸëÿØ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ©ÿå Ÿàÿ™ŸÑÿßÿ¨ÿ© ÿ¥ŸàŸäÿ© ŸÑÿ≠ÿØ ŸÖÿß ŸäÿØŸàÿ® ÿ™ÿ¨ŸÖÿØ ÿ®ÿ≥ ÿ™ÿ™ŸÇÿ∑ÿπ (Ÿ°Ÿ®-Ÿ¢Ÿ†¬∞ŸÖ). (~Ÿ£Ÿ†-Ÿ¶Ÿ† ÿØŸÇŸäŸÇÿ©).`,
            prepTechTitle_toastMilkPowder: 'ÿ∑ÿπŸÖ ÿ≤ŸäÿßÿØÿ©: ÿ≠ŸÖŸëÿµ ŸÑÿ®ŸÜ ÿßŸÑÿ®ŸàÿØÿ±ÿ© üî•', prepTechDesc_toastMilkPowder: `ÿ®ŸäŸÇŸàŸëŸä ÿ∑ÿπŸÖ ÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™/ÿßŸÑŸÉÿ±ÿßŸÖŸäŸÑ. <br>Ÿ°. ÿßŸÅÿ±ÿØ ÿ®ŸàÿØÿ±ÿ© ÿßŸÑŸÑÿ®ŸÜ ÿπŸÑŸâ ÿµŸäŸÜŸäÿ©/ÿ∑ÿßÿ≥ÿ©. <br>Ÿ¢. ŸÅÿ±ŸÜ: Ÿ°Ÿ¢Ÿ†¬∞ŸÖ (Ÿ°Ÿ†-Ÿ°Ÿ•ÿØÿå ŸÇŸÑŸëÿ®). ÿ∑ÿßÿ≥ÿ©: ŸÜÿßÿ± ŸáÿßÿØŸäÿ©ÿå ÿ™ŸÇŸÑŸäÿ® ŸÖÿ≥ÿ™ŸÖÿ±. <br>Ÿ£. ÿÆŸÑŸäŸÉ ÿµÿßÿ≠Ÿä! ŸÑŸàŸÜ ÿØŸáÿ®Ÿä Ÿàÿ±Ÿäÿ≠ÿ© ÿ≠ŸÑŸàÿ©. ÿ®ÿ±ŸëÿØŸá.`,
            // Notes & Steps (Assume full Arabic text is here)
             classicNotes: `ÿßŸÑŸÉŸàŸÉŸä ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸä ÿ®Ÿäÿπÿ™ŸÖÿØ ÿπŸÑŸâ ÿ™Ÿàÿßÿ≤ŸÜ ÿßŸÑÿ≥ŸÉÿ± 1:1ÿå Ÿàÿ±ŸÅÿπ ŸÖÿ≤ÿØŸàÿ¨ ÿπŸÑÿ¥ÿßŸÜ Ÿäÿ∑ŸÑÿπ ŸÜÿßÿ¥ŸÅ ŸÖŸÜ ÿ®ÿ±Ÿá Ÿàÿ∑ÿ±Ÿä ŸÖŸÜ ÿ¨ŸàŸá. ÿ£ŸáŸÖ ÿ≠ÿßÿ¨ÿ©ÿü ÿÆŸÅŸÇ ŸÖÿ≠ÿ™ÿ±ŸÖ Ÿàÿ™ÿ®ÿ±ŸäÿØ ÿ®ÿ∂ŸÖŸäÿ±! ÿßŸÑÿ≤ÿ®ÿØÿ© ŸÑÿßÿ≤ŸÖ ÿ™ÿ®ŸÇŸâ ÿ®ÿ≠ÿ±ÿßÿ±ÿ© 16-18¬∞ŸÖÿå ŸàÿØŸá ŸÇÿßŸÜŸàŸÜ ŸÖÿ¥ ÿßŸÇÿ™ÿ±ÿßÿ≠. ÿµÿØŸÇ ÿßŸÑÿπŸÖŸÑŸäÿ©ÿå ÿßŸÑÿ∑ÿπŸÖ ŸáŸäÿÆÿ∑ŸÅŸÉ! üôå`,
            classicSteps: `**ÿßŸÑÿ™ÿ≠ÿ∂Ÿäÿ±:** ÿßÿÆŸÑÿ∑ ÿßŸÑÿ¨ÿßŸÅ. ÿ¨Ÿáÿ≤ ÿßŸÑÿµŸàÿßŸÜŸä. ÿßŸÑÿ≤ÿ®ÿØÿ© ŸÖÿ®ÿ±ÿØÿ© ŸÑŸäŸÜÿ©ÿå ÿßŸÑÿ®Ÿäÿ∂ ÿ®ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©. \n**ÿßŸÑÿÆŸÅŸÇ:** ÿßÿÆŸÅŸÇ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑŸÖÿ®ÿ±ÿØÿ© ŸàÿßŸÑÿ≥ŸÉÿ±Ÿäÿßÿ™ ÿ≥ÿ±ÿπÿ© ŸÖÿ™Ÿàÿ≥ÿ∑ÿ©-ÿπÿßŸÑŸäÿ© Ÿ• ÿØŸÇÿßÿ¶ŸÇ ŸÉÿßŸÖŸÑÿ© (ŸÅÿßÿ™ÿ≠ ŸàŸÖŸÜŸÅŸàÿ¥). ÿßŸÉÿ¥ÿ∑ ÿßŸÑÿ¨ŸàÿßŸÜÿ®. \n**ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ≥Ÿàÿßÿ¶ŸÑ:** ÿ≥ÿ±ÿπÿ© ÿ®ÿ∑Ÿäÿ¶ÿ©. ÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© Ÿàÿßÿ≠ÿØÿ© (ŸäÿØŸàÿ® ŸäÿÆÿ™ŸÑÿ∑). ŸÅÿßŸÜŸäŸÑŸäÿß. \n**ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ¨ÿßŸÅ:** ÿ£ÿ®ÿ∑ÿ£ ÿ≥ÿ±ÿπÿ©. ÿßŸÑÿØŸÇŸäŸÇ ÿ™ÿØÿ±Ÿäÿ¨Ÿä (ŸäÿØŸàÿ® ŸäÿÆÿ™ŸÑÿ∑). ŸÉŸÖŸëŸÑ ÿ®ÿßŸÑŸäÿØ. \n**ÿ™ŸÇŸÑŸäÿ®:** ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©. \n**ÿ™ÿ®ÿ±ŸäÿØ (ŸÖÿ≥ÿ™ÿ≠ÿ≥ŸÜ):** ÿ£ŸÇŸÑ ÿ≠ÿßÿ¨ÿ© Ÿ£Ÿ†-Ÿ¶Ÿ† ÿØŸÇŸäŸÇÿ© (ŸÑÿ≠ÿØ Ÿ§Ÿ® ÿ≥ÿßÿπÿ©). \n**ÿ™ÿ¥ŸÉŸäŸÑ ŸàÿÆÿ®ÿ≤:** ŸÅÿ±ŸÜ Ÿ°Ÿ©Ÿ†¬∞ŸÖ. ŸÉŸàÿ± ~Ÿ¢ ŸÖ.ŸÉÿå ŸÖÿ≥ÿßŸÅÿ© Ÿ¢ ÿ®Ÿàÿµÿ©. Ÿ°Ÿ†-Ÿ°Ÿ¢ ÿØŸÇŸäŸÇÿ© (ÿßŸÑÿ≠ŸàÿßŸÅ ÿ∞Ÿáÿ®Ÿäÿ©). ŸÑŸÅ ÿßŸÑÿµŸäŸÜŸäÿ©. \n**ÿ™ÿ®ÿ±ŸäÿØ:** ÿπŸÑŸâ ÿßŸÑÿµŸäŸÜŸäÿ© Ÿ£-Ÿ• ÿØŸÇÿßÿ¶ŸÇÿå ÿ´ŸÖ ÿ±ŸÅ.`,
            thickNotes: `ÿπÿßŸäÿ≤ ŸÉŸàŸÉŸä ÿ≥ŸÖŸäŸÉÿü Ÿäÿ®ŸÇŸâ ŸÑÿßÿ≤ŸÖ ÿ™ŸÖŸÜÿπ ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ±! ÿ≥ŸÉÿ± ÿ®ŸÜŸä ÿ£ŸÉÿ™ÿ±ÿå ŸÖŸÅŸäÿ¥ ÿµŸàÿØÿßÿå Ÿàÿ™ÿ®ÿ±ŸäÿØ ÿ∑ŸàŸäŸÑ ÿ•ÿ¨ÿ®ÿßÿ±Ÿä. ÿÆŸÅŸÇ ŸÖÿ™Ÿàÿ≥ÿ∑ ŸÖÿ¥ ÿ¨ÿßŸÖÿØ ÿπÿ¥ÿßŸÜ ÿßŸÑŸÉŸàŸÉŸä ŸÖÿß ŸäŸáÿ®ÿ∑ÿ¥. ÿ®ŸàÿØÿ±ÿ© ÿßŸÑŸÑÿ®ŸÜ ÿßŸÑŸÖÿ≠ŸÖÿµÿ© ÿ®ÿ™ÿ∂ŸäŸÅ ÿ∑ÿπŸÖ ÿ∫ŸÜŸä ŸàŸÖÿ∂ÿ∫ ÿÆŸÅŸäŸÅ. Ÿàÿ≥ÿ± ÿßŸÑŸÑÿπÿ®ÿ©ÿü ÿÆÿ®ÿ≤ ŸÜÿµ ÿ≥ŸàŸâ!`,
            thickSteps: `**ÿßŸÑÿ™ÿ≠ÿ∂Ÿäÿ±:** ÿßÿÆŸÑÿ∑ ÿßŸÑÿØŸÇŸäŸÇÿå ÿ®ŸàÿØÿ±ÿ© ÿßŸÑŸÑÿ®ŸÜÿå ÿßŸÑŸÖŸÑÿ≠ÿå ÿßŸÑÿ®ŸäŸÉŸÜÿ¨ ÿ®ŸàÿØÿ±. ÿ¨Ÿáÿ≤ ÿßŸÑÿµŸàÿßŸÜŸä. ÿßŸÑÿ≤ÿ®ÿØÿ© ŸÖÿ®ÿ±ÿØÿ© ŸÑŸäŸÜÿ©ÿå ÿßŸÑÿ®Ÿäÿ∂ ÿ®ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©. \n**ÿßŸÑÿÆŸÅŸÇ (ŸÖÿ™Ÿàÿ≥ÿ∑):** ÿßÿÆŸÅŸÇ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑŸÖÿ®ÿ±ÿØÿ© ŸàÿßŸÑÿ≥ŸÉÿ±Ÿäÿßÿ™ ÿ≥ÿ±ÿπÿ© ŸÖÿ™Ÿàÿ≥ÿ∑ÿ© ~Ÿ¢-Ÿ£ ÿØŸÇÿßÿ¶ŸÇ (ŸÉÿ±ŸäŸÖŸäÿå ŸÖÿ¥ ŸÖŸÜŸÅŸàÿ¥ ÿ£ŸàŸä). ÿßŸÉÿ¥ÿ∑. \n**ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ≥Ÿàÿßÿ¶ŸÑ:** ÿ≥ÿ±ÿπÿ© ÿ®ÿ∑Ÿäÿ¶ÿ©. ÿ®Ÿäÿ∂ Ÿàÿßÿ≠ÿØÿ© Ÿàÿßÿ≠ÿØÿ© (ŸäÿØŸàÿ® ŸäÿÆÿ™ŸÑÿ∑). ŸÅÿßŸÜŸäŸÑŸäÿß. \n**ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ¨ÿßŸÅ:** ÿ£ÿ®ÿ∑ÿ£ ÿ≥ÿ±ÿπÿ©. ÿßŸÑÿØŸÇŸäŸÇ Ÿ§-Ÿ• ŸÖÿ±ÿßÿ™ (ÿ¥ÿ®Ÿá ŸÖÿÆÿ™ŸÑÿ∑). \n**ÿ™ŸÇŸÑŸäÿ®:** ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© (ŸÉÿ™Ÿäÿ±!). ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸäÿØ/ŸÖŸÑÿπŸÇÿ© ŸÇŸàŸäÿ©. ÿßŸÑÿπÿ¨ŸäŸÜÿ© ÿ™ŸÇŸäŸÑÿ©. \n**ÿ™ÿ®ÿ±ŸäÿØ ÿ•ÿ¨ÿ®ÿßÿ±Ÿä:** ŸÉŸàÿ± ŸÉÿ®Ÿäÿ±ÿ© (Ÿ°Ÿ°Ÿ£-Ÿ°ŸßŸ† ÿ¨ŸÖ)ÿå ÿßÿπŸÖŸÑŸáÿß ÿ∑ŸàŸäŸÑÿ©. ŸÑŸÅŸáÿß. ÿ™ŸÑÿßÿ¨ÿ© ÿ£ŸÇŸÑ ÿ≠ÿßÿ¨ÿ© Ÿ§ ÿ≥ÿßÿπÿßÿ™ (ÿßŸÑÿ£ŸÅÿ∂ŸÑ Ÿ°Ÿ¢-ŸßŸ¢). \n**ÿßÿÆÿ®ÿ≤Ÿáÿß ÿ®ÿßÿ±ÿØÿ©:** ŸÅÿ±ŸÜ Ÿ°Ÿ®Ÿ†¬∞ŸÖ. ŸÉŸàÿ± ÿ®ÿßÿ±ÿØÿ©ÿå ŸÖÿ≥ÿßŸÅÿßÿ™ Ÿàÿßÿ≥ÿπÿ©. ŸÖÿ™ŸÅÿ±ÿØŸáÿßÿ¥. Ÿ°Ÿ®-Ÿ¢Ÿ• ÿØŸÇŸäŸÇÿ© (ÿßŸÑÿ≠ŸàÿßŸÅ ÿ´ÿßÿ®ÿ™ÿ©ÿå ÿßŸÑŸàÿ≥ÿ∑ ÿ∑ÿ±Ÿä/ŸÑÿ≤ÿ¨). ŸÑŸÅ ÿßŸÑÿµŸäŸÜŸäÿ©. \n**ÿ®ÿ±ŸëÿØ ÿ®ÿ≠ÿ∞ÿ±:** ÿπŸÑŸâ ÿßŸÑÿµŸäŸÜŸäÿ© Ÿ°Ÿ†-Ÿ°Ÿ• ÿØŸÇŸäŸÇÿ©ÿå ÿ´ŸÖ ÿßŸÜŸÇŸÑŸáÿß ŸÑŸÑÿ±ŸÅ ÿ®ÿ≠ÿ∞ÿ±.`,
            thinNotes: `ÿπÿßŸäÿ≤ ŸÇÿ±ŸÖÿ¥ÿ©ÿü Ÿäÿ®ŸÇŸâ ÿßŸÜÿ™ ŸÅŸä ŸÖÿπÿ≥ŸÉÿ± ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ±! ÿ≥ŸÉÿ± ÿ£ÿ®Ÿäÿ∂ ÿ≤ŸäÿßÿØÿ©ÿå ÿµŸàÿØÿß ŸÉÿ™Ÿäÿ±ÿå ŸàÿÆŸÅŸÇ ÿ®ÿßŸÑÿπŸÉÿ≥ (ŸäÿπŸÜŸä ŸÜÿ≠ÿ∑ ÿßŸÑÿ≤ÿ®ÿØÿ© ŸÅŸä ÿßŸÑÿ£ŸàŸÑ ŸÖÿπ ÿßŸÑÿ¨ÿßŸÅ). ŸÖŸÅŸäÿ¥ ÿ™ÿ®ÿ±ŸäÿØ ŸáŸÜÿß! ÿßÿØÿÆŸÑ ŸÅÿ±ŸÜ ÿπŸÑŸâ ÿ∑ŸàŸÑ.`,
            thinSteps: `**ÿßŸÑÿ™ÿ≠ÿ∂Ÿäÿ±:** ÿ¨Ÿáÿ≤ ÿßŸÑÿµŸàÿßŸÜŸä. ÿ≤ÿ®ÿØÿ© ÿ®ÿßÿ±ÿØÿ© ŸÑŸäŸÜÿ© (Ÿ°Ÿ®-Ÿ¢Ÿ†¬∞ŸÖ)ÿå ŸÇÿ∑ÿπ ÿµÿ∫Ÿäÿ±ÿ©. ÿ®Ÿäÿ∂ ÿ®ÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ∫ÿ±ŸÅÿ©. ÿßÿÆŸÅŸÇ ÿßŸÑÿ®Ÿäÿ∂/ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß. \n**ÿßŸÑÿÆŸÅŸÇ ÿßŸÑÿπŸÉÿ≥Ÿä:** ÿ®ÿßŸÑÿπÿ¨ÿßŸÜ: ÿØŸÇŸäŸÇÿå ÿ≥ŸÉÿ±Ÿäÿßÿ™ÿå ŸÖŸÑÿ≠ÿå ÿµŸàÿØÿß. ÿ∂ŸäŸÅ ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ÿßÿ±ÿØÿ©. ÿ≥ÿ±ÿπÿ© ÿ®ÿ∑Ÿäÿ¶ÿ© ŸÑÿ≠ÿØ ŸÖÿß Ÿäÿ®ŸÇŸâ ÿ¥ÿ®Ÿá ÿßŸÑÿ±ŸÖŸÑ ÿßŸÑŸÖÿ®ŸÑŸàŸÑ. \n**ÿÆŸÑÿ∑ ÿßŸÑÿ≥Ÿàÿßÿ¶ŸÑ/ÿßŸÑÿ¨ÿßŸÅ:** ÿ≥ÿ±ÿπÿ© ÿ®ÿ∑Ÿäÿ¶ÿ©. ÿµÿ® ÿÆŸÑŸäÿ∑ ÿßŸÑÿ®Ÿäÿ∂/ÿßŸÑŸÅÿßŸÜŸäŸÑŸäÿß ÿ™ÿØÿ±Ÿäÿ¨Ÿä (ŸäÿØŸàÿ® ÿ™ÿ™ŸÉŸàŸÜ ÿπÿ¨ŸäŸÜÿ©). ŸÖÿ™ÿÆŸÑÿ∑ÿ¥ ÿ≤ŸäÿßÿØÿ©. \n**ÿ™ŸÇŸÑŸäÿ®:** ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ŸÖŸÅÿ±ŸàŸÖÿ©/ÿµÿ∫Ÿäÿ±ÿ©. ÿ£ŸÇŸÑ ÿ™ŸÇŸÑŸäÿ®. \n**ÿ™ÿ¥ŸÉŸäŸÑ ŸàÿÆÿ®ÿ≤ ŸÅŸàÿ±Ÿãÿß:** ÿ®ÿØŸàŸÜ ÿ™ÿ®ÿ±ŸäÿØ! ŸÅÿ±ŸÜ Ÿ°ŸßŸ•¬∞ŸÖ. ŸÉŸàÿ± ÿµÿ∫Ÿäÿ±ÿ© (~Ÿ° ŸÖ.ŸÉ)ÿå ŸÖÿ≥ÿßŸÅÿ© ŸÉÿ®Ÿäÿ±ÿ© ÿ¨ÿØŸãÿß (Ÿ£+ ÿ®Ÿàÿµÿ©). \n**ÿßÿÆÿ®ÿ≤ ŸÑŸÑŸÇÿ±ŸÖÿ¥ÿ©:** Ÿ°Ÿ¢-Ÿ°Ÿ¶ ÿØŸÇŸäŸÇÿ© (ÿ±ŸÅŸäÿπÿ©ÿå ÿ∞Ÿáÿ®Ÿäÿ© ŸÉŸÑŸáÿß). ŸÑŸÅ ÿßŸÑÿµŸäŸÜŸäÿ©. \n**ÿ®ÿ±ŸëÿØ ÿ™ŸÖÿßŸÖŸãÿß:** ÿπŸÑŸâ ÿßŸÑÿµŸäŸÜŸäÿ© Ÿ•-Ÿ°Ÿ† ÿØŸÇÿßÿ¶ŸÇÿå ÿ´ŸÖ ÿ±ŸÅ ÿ≠ÿ™Ÿâ Ÿäÿ®ÿ±ÿØ ÿ™ŸÖÿßŸÖŸãÿß. ÿßŸÑŸÇÿ±ŸÖÿ¥ÿ© ÿ®ÿ™ÿ∏Ÿáÿ± ŸÑŸÖÿß Ÿäÿ®ÿ±ÿØ.`,
            // Easter Egg & Recs
            stuffedTitle: 'ÿ•ŸÜÿ™ ŸÅÿ™Ÿëÿ≠ÿ™ ÿßŸÑÿ≥ÿ± ÿßŸÑÿÆÿ∑Ÿäÿ±! üéâ', stuffedCongrats: 'ŸÖÿ®ÿ±ŸàŸÉ Ÿäÿß ŸÉŸäŸÜÿ¨! ÿßÿÆÿ™Ÿäÿßÿ±ŸÉ ŸÑŸÑŸÉŸàŸÉŸä ÿßŸÑŸÑÿ≤ÿ¨ ÿßŸÑÿ≥ŸÖŸäŸÉ ÿ®ŸäŸÇŸàŸÑ ÿ•ŸÜŸÉ ŸÖÿ¥ ÿπÿßÿØŸä. ÿ™ŸÇÿØÿ± ÿ™ÿ≠ÿ¥Ÿä ÿßŸÑŸàÿ≠Ÿàÿ¥ ÿØŸä ÿ®ÿ≠ÿßÿ¨ÿßÿ™ ÿÆÿ∑Ÿäÿ±ÿ©!', stuffedHowTo: 'ÿ•ÿ≤ÿßŸäÿü ÿßŸÅÿ±ÿØ ÿßŸÑŸÉŸàÿ±ÿ© ÿ¥ŸàŸäÿ©ÿå ÿßÿπŸÖŸÑ ÿ™ÿ¨ŸàŸäŸÅÿå ÿ≠ÿ∑ ÿ¨ŸàŸá ŸÖÿπŸÑŸÇÿ© ÿµÿ∫Ÿäÿ±ÿ© ŸÜŸàÿ™ŸäŸÑÿß ÿ£Ÿà ÿ≤ÿ®ÿØÿ© ŸÅÿ≥ÿ™ŸÇÿå ŸÑŸÅ ÿßŸÑÿπÿ¨ŸäŸÜÿ© ÿ≠ŸàÿßŸÑŸäŸáÿß ŸÉŸàŸäÿ≥ÿå ŸàÿßŸÇŸÅŸÑŸáÿß ÿ¨ÿßŸÖÿØÿå ŸàÿÆÿ®ÿ≤Ÿáÿß ÿ≤Ÿä ŸÖÿß ŸáŸà ŸÖŸÉÿ™Ÿàÿ® (ŸÖŸÖŸÉŸÜ ÿ™ÿ≠ÿ™ÿßÿ¨ ÿØŸÇŸäŸÇÿ™ŸäŸÜ ÿ≤ŸäÿßÿØÿ©).', pistachioTipTitle: 'ÿ™ÿ±ÿ¥Ÿäÿ≠ ŸÅÿ≥ÿ™ŸÇ ÿ¨ÿßŸÖÿØ:', pistachioTipDesc: 'ÿßŸÜÿ≥Ÿé ÿßŸÑÿ£ŸÜŸàÿßÿπ ÿßŸÑŸÑŸä ÿ∑ÿπŸÖŸáÿß ÿ®ÿßŸáÿ™ ÿ£Ÿà ŸÅŸäŸáÿß ÿ≤ŸäŸàÿ™! ŸÑŸà ÿπÿßŸäÿ≤ ÿ∑ÿπŸÖ ŸÅÿ≥ÿ™ŸÇ ŸÅÿπŸÑŸäÿå ÿ£ŸÜÿµÿ≠ŸÉ ÿ®ŸÄ"ŸÉÿ±ŸäŸÖÿ© ÿßŸÑŸÅÿ≥ÿ™ŸÇ ŸÖŸÜ ASMA Foods". ÿÆÿ∑ŸäŸäŸäÿ±ÿ© ŸàŸÖÿ±ŸÉÿ≤ÿ©.', pistachioTipLink: 'ÿ¥ŸàŸÅŸáÿß ŸáŸÜÿß (ÿ±ÿßÿ®ÿ∑ ŸÑŸÖÿµÿ±)', chocoTipTitle: 'ÿπŸÑŸÖ ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©:', chocoTipDesc: 'ŸÖÿ¥ ÿ£Ÿä ÿ¥ŸàŸÉŸÑŸäÿ™ ÿ¥Ÿäÿ®ÿ≥ ÿ™ŸÜŸÅÿπ! ŸÑŸà ÿ®ÿ™ÿØŸàÿ± ÿπŸÑŸâ ÿßŸÑÿ∑ÿπŸÖ ÿßŸÑÿØÿßŸäÿ® ÿßŸÑŸÑŸä ŸäÿØŸàŸëÿ®ŸÉÿå ÿ¨ÿ±ÿ® "Dropsy" ÿ®ÿßŸÑŸÑÿ®ŸÜ. ÿ≥ŸÑÿßÿ≠ ÿ≥ÿ±Ÿä ÿ®ÿ¨ÿØ. #ŸÖŸÇÿßÿ∑ÿπÿ©', chocoTipLink: 'ÿØŸàÿ± ÿπŸÜÿØ ŸÖŸàÿ±ÿØŸäŸÜ ÿ≤Ÿä ÿØŸàŸÑ (ÿ±ÿßÿ®ÿ∑ ŸÅŸäÿ≥ÿ®ŸàŸÉ)', chocoTipMilk: 'ÿßÿ™ÿ£ŸÉÿØ ÿ•ŸÜŸáÿß ÿßŸÑŸÜÿ≥ÿÆÿ© ÿßŸÑŸÑÿ®ŸÜŸä (MILK) ÿπÿ¥ÿßŸÜ ÿ™ÿßÿÆÿØ ÿßŸÑÿ∑ÿ±ÿßŸàÿ© ÿßŸÑÿµÿ≠!',
            // Conclusion
            conclusionTitle: 'ŸÉÿØŸá ÿßŸÑŸÖŸáŸÖÿ© ÿ™ŸÖÿ™! üéâ', conclusionDesc: 'ÿßŸÑÿ™ÿ¨ÿ±ÿ®ÿ© ÿ£ÿ´ÿ®ÿ™ÿ™: ŸÉŸàŸÉŸä ÿßŸÑÿ≤ÿ®ÿØÿ© ÿßŸÑÿ®ŸÜŸäÿ© ŸÉÿ≥ÿ® ÿßŸÑÿ≥ÿ®ÿßŸÇ. ŸÑŸà ÿπŸÖŸÑÿ™ ÿ•ŸÜÿ¨ÿßÿ≤ ÿ¥ŸáŸäÿå ÿ¥ÿßÿ±ŸÉŸÜÿß ÿßŸÑÿØŸÑŸäŸÑ!', conclusionTag: 'ÿßÿπŸÖŸÑŸÑŸä ÿ™ÿßÿ¨ ÿπŸÑŸâ ÿßŸÜÿ≥ÿ™ÿ¨ÿ±ÿßŸÖ:', conclusionGoForth: 'ŸäŸÑÿß ÿßŸÜÿ∑ŸÑŸÇ Ÿàÿßÿ∑ÿ®ÿÆ ÿ®ÿπŸÑŸÖ ŸàÿØŸÖÿßÿ∫!', footerText: 'ÿßÿ™ÿπŸÖŸÑ ÿ®ÿßŸÑÿπŸÑŸÖÿå ÿßŸÑÿ≤ÿ®ÿØÿ©ÿå ŸàŸÉÿßŸÖ ÿ≥ÿ∑ÿ± ŸÉŸàÿØ.'
        }
    };

    // --- DOM Elements ---
    const htmlElement = document.documentElement;
    const butterAmountInput = document.getElementById('butter-amount');
    const butterUnitSelect = document.getElementById('butter-unit');
    const startExperimentBtn = document.getElementById('start-experiment-btn');
    const butterWarning = document.getElementById('butter-warning');
    const cookieSelectionSection = document.getElementById('cookie-selection-section');
    const recipeDisplaySection = document.getElementById('recipe-display-section');
    const recipeContent = document.getElementById('recipe-content');
    const cookieOptions = document.querySelectorAll('.cookie-option');
    const stuffedEasterEgg = document.getElementById('stuffed-easter-egg');
    const chocolateRecommendation = document.getElementById('chocolate-recommendation');
    const langToggleButton = document.getElementById('lang-toggle');
    const unitToggleButton = document.getElementById('unit-toggle');

    // Basic check for essential elements
    if (!butterAmountInput || !butterUnitSelect || !startExperimentBtn || !recipeContent || !cookieSelectionSection || !recipeDisplaySection || !langToggleButton || !unitToggleButton) {
        console.error("Error: One or more essential HTML elements are missing!");
        alert("Error initializing the page. Please check the console.");
        return; // Stop execution if essential elements are missing
    }

    // --- State Variables ---
    let currentLanguage = 'en'; // 'en' or 'ar'
    let currentUnitSystem = 'metric'; // 'metric' or 'imperial' for EN
    let baseButterGrams = 0;
    let selectedCookieType = null;

    // --- Helper Functions ---

    /** Gets translation string safely */
    function T(key) {
        return langStrings[currentLanguage]?.[key] || key; // Fallback to key name
    }

    /** Rounds a number to the nearest common fraction string (e.g., 0.75 -> "¬æ") */
    function roundToNearestFraction(amount) {
        const tolerance = 0.08; // How close it needs to be
        const fractions = {
            '‚Öõ': 1/8, '¬º': 1/4, '‚Öì': 1/3, '¬Ω': 1/2, '‚Öî': 2/3, '¬æ': 3/4, '‚Öû': 7/8
        };
        // Handle edge case: very small amounts become "pinch" later
        if (amount < 0.1) return null; // Indicate very small

        for (const [text, value] of Object.entries(fractions).sort(([,a],[,b]) => a-b)) {
            if (Math.abs(amount - value) < tolerance) {
                return text;
            }
        }
        // If no fraction matches well, return decimal rounded to 1 place
        const rounded = parseFloat(amount.toFixed(1));
        return rounded === 0 ? null : rounded.toString(); // Avoid returning "0.0"
    }

    // --- Core Calculation Functions ---

    /** Reads and validates butter input, returns grams or 0 if invalid */
    function getBaseButterInGrams() {
        const amount = parseFloat(butterAmountInput.value);
        const unit = butterUnitSelect.value;

        if (isNaN(amount) || amount <= 0) {
            butterWarning.textContent = T('butterWarning');
            butterWarning.style.display = 'block';
            return 0;
        }

        let grams = (unit === 'cups') ? amount * GRAMS_PER_CUP_BUTTER : amount;

        if (grams < 100) { // Minimum validation
            butterWarning.textContent = T('butterWarning');
            butterWarning.style.display = 'block';
            return 0;
        }

        butterWarning.style.display = 'none';
        return grams;
    }

    /** Calculates scaled recipe based on butter amount and cookie type */
    function calculateScaledRecipe(butterInGrams, cookieType) {
        const base = baseRecipes[cookieType];
        if (!base || butterInGrams <= 0) return null;

        const scalingFactor = butterInGrams / base.baseButter;
        const scaledIngredients = {};

        for (const key in base.ingredients) {
            scaledIngredients[key] = {
                grams: base.ingredients[key][0] * scalingFactor,
                unitType: base.ingredients[key][1]
            };
        }

        // Calculate yield
        let yieldValue;
        if (cookieType === 'thick' && base.cookieSizeGrams) {
            let totalDoughWeight = Object.values(scaledIngredients).reduce((sum, item) => sum + item.grams, 0);
            yieldValue = Math.round(totalDoughWeight / base.cookieSizeGrams);
        } else {
            yieldValue = Math.round(base.yieldPerBase * scalingFactor);
        }
        // Ensure yield is at least 1 if calculation resulted in 0 but ingredients exist
        if (yieldValue < 1 && Object.keys(scaledIngredients).length > 0) yieldValue = 1;


        return {
            ingredients: scaledIngredients,
            yield: yieldValue,
            notesKey: base.notes,
            stepsKey: base.steps,
            prepTechKeys: base.prepTech || [], // Ensure it's an array
            isThick: cookieType === 'thick'
        };
    }

    // --- Formatting Functions ---

    /** Formats imperial units (cups, tsp, Tbsp) with fractions */
    function formatImperial(grams, unitType) {
        let amount = 0;
        let unitSingular = '';
        let unitPlural = '';
        let baseGramsPerUnit = 1;
        let preferTbsp = false;

        switch (unitType) {
            case 'butter': amount = grams / GRAMS_PER_CUP_BUTTER; unitSingular = T('cup'); unitPlural = T('cups'); break;
            case 'sugar': amount = grams / GRAMS_PER_CUP_GRAN_SUGAR; unitSingular = T('cup'); unitPlural = T('cups'); break; // Approx for both
            case 'chocolate': amount = grams / GRAMS_PER_CUP_CHOC_CHIPS; unitSingular = T('cup'); unitPlural = T('cups'); break;
            case 'flour': amount = grams / GRAMS_PER_CUP_FLOUR; unitSingular = T('cup'); unitPlural = T('cups'); break;
            case 'salt': amount = grams / GRAMS_PER_TSP_SALT; unitSingular = T('tsp'); unitPlural = T('tsps'); baseGramsPerUnit = GRAMS_PER_TSP_SALT; break;
            case 'bakingSoda': amount = grams / GRAMS_PER_TSP_BAKING_SODA; unitSingular = T('tsp'); unitPlural = T('tsps'); baseGramsPerUnit = GRAMS_PER_TSP_BAKING_SODA; break;
            case 'bakingPowder': amount = grams / GRAMS_PER_TSP_BAKING_POWDER; unitSingular = T('tsp'); unitPlural = T('tsps'); baseGramsPerUnit = GRAMS_PER_TSP_BAKING_POWDER; break;
            case 'vanilla': amount = grams / GRAMS_PER_TSP_VANILLA; unitSingular = T('tsp'); unitPlural = T('tsps'); baseGramsPerUnit = GRAMS_PER_TSP_VANILLA; break;
            case 'water': amount = grams / GRAMS_PER_TSP_WATER; unitSingular = T('tsp'); unitPlural = T('tsps'); baseGramsPerUnit = GRAMS_PER_TSP_WATER; break; // Treat prepWater as water
            case 'milkPowder': // Prefers Tbsp
                amount = grams / (GRAMS_PER_TBSP_MILK_POWDER / 3); // Calculate based on tsp first
                unitSingular = T('tsp');
                unitPlural = T('tsps');
                baseGramsPerUnit = GRAMS_PER_TBSP_MILK_POWDER / 3;
                preferTbsp = true;
                break;
            default: return `${Math.round(grams)} g`; // Fallback
        }

         // Handle Tbsp preference conversion
        if (preferTbsp && amount >= 2.5) { // Switch to Tbsp if near or over 1 Tbsp (3 tsp)
            amount /= 3;
            unitSingular = T('Tbsp');
            unitPlural = T('Tbsps');
            baseGramsPerUnit *= 3;
        }

        if (amount < 0.01) return `0 ${unitPlural}`; // Handle zero amount

        // For tsp/Tbsp, try fractions first
        if (['tsp', 'Tbsp'].includes(unitSingular) || ['tsps', 'Tbsps'].includes(unitPlural)) {
            const wholePart = Math.floor(amount);
            const fractionalPart = amount - wholePart;
            const fractionStr = roundToNearestFraction(fractionalPart);

            if (fractionStr === null && wholePart === 0) { // Very small amount
                 return `pinch ${unitType === 'salt' ? '' : unitSingular}`.trim(); // Pinch usually implies salt, but specify for others
            }

            let formattedAmount = '';
            if (wholePart > 0) {
                formattedAmount += wholePart;
                if (fractionStr) {
                    formattedAmount += ` ${fractionStr}`; // e.g., "1 ¬Ω"
                }
            } else if (fractionStr) {
                formattedAmount = fractionStr; // e.g., "¬æ"
            } else {
                 formattedAmount = '0'; // Should not happen if amount > 0.01 but as fallback
            }

             const unit = (amount > 1 || (wholePart === 1 && fractionStr)) ? unitPlural : unitSingular;
            return `${formattedAmount} ${unit}`;

        } else { // Handle cups (usually allow decimals like 1.25, 1.5, 1.75)
            let formattedAmount = parseFloat(amount.toFixed(2)).toString(); // Round to 2 decimals, remove trailing zeros
            // Remove trailing ".0" if it was exactly whole number
            if (formattedAmount.endsWith('.0')) {
                formattedAmount = formattedAmount.slice(0, -2);
            }
            const unit = (parseFloat(formattedAmount) === 1) ? unitSingular : unitPlural;
            return `${formattedAmount} ${unit}`;
        }
    }

    /** Formats ingredient display based on language and unit system */
    function formatIngredient(grams, unitType) {
        const isArabic = currentLanguage === 'ar';
        const isImperial = currentUnitSystem === 'imperial';

        // Special case: Eggs
        if (unitType === 'egg') {
            let numEggs = Math.max(0.1, grams / GRAMS_PER_LARGE_EGG); // Avoid 0 eggs if grams > 0
             // Round to nearest half egg or whole egg, minimum 0.5 if grams > 0
            if (numEggs < 0.5 && grams > 0) numEggs = 0.5;
            else if (numEggs > 0.5) numEggs = Math.round(numEggs * 2) / 2; // Round to nearest 0.5

            const eggText = numEggs.toString() + " " + (numEggs <= 1 ? T('egg') : T('eggs'));
            const totalGrams = Math.round(grams);
            return `${eggText} (~${totalGrams}g)`; // Always show grams for eggs
        }

        // Metric formatting (always useful)
        const metricText = `${Math.round(grams)} ${T('grams')}`;

        // English Display
        if (!isArabic) {
            if (isImperial) {
                 return formatImperial(grams, unitType);
            } else {
                 return metricText; // English Metric
            }
        }
        // Arabic Display (Grams + Cups in parenthesis if applicable)
        else {
            let output = `<span class="unit-g">${metricText}</span>`;
            // Add cup equivalent for relevant types
            if (['butter', 'sugar', 'chocolate', 'flour'].includes(unitType)) {
                 const cupsFormatted = formatImperial(grams, unitType); // Get cup value
                // Ensure formatImperial returned a cup value, not fallback grams
                 if (cupsFormatted.includes(T('cup')) || cupsFormatted.includes(T('cups'))) {
                    output += ` <span class="unit-cups">(${cupsFormatted})</span>`;
                }
            }
            return output;
        }
    }


    // --- HTML Generation Functions ---

    function generateIngredientsHTML(ingredients) {
        let html = `<h3 class="ingredients-title">${T('ingredientsTitle')}</h3><ul>`;
        for (const key in ingredients) {
            const item = ingredients[key];
            // Skip ingredients with 0 grams calculated
            if (Math.round(item.grams) <= 0 && item.unitType !== 'egg') continue; // Keep eggs even if < 1

            const ingredientName = T(key) || key.replace(/([A-Z])/g, ' $1').trim(); // Fallback formatting
            const formattedAmount = formatIngredient(item.grams, item.unitType);
            html += `<li><strong>${formattedAmount}</strong> ${ingredientName}</li>`;
        }
        html += `</ul>`;
        return html;
    }

    function generatePrepTechHTML(prepTechKeys) {
        if (!prepTechKeys || prepTechKeys.length === 0) return '';
        let html = `<h3 class="prep-tech-title">${T('prepTitle')}</h3>`;
        prepTechKeys.forEach(key => {
            const titleKey = `prepTechTitle_${key}`;
            const descKey = `prepTechDesc_${key}`;
            if (T(titleKey) !== titleKey) { // Only add if translation exists
                 html += `<div class="pro-tip note">
                            <h4>${T(titleKey)}</h4>
                            <p>${T(descKey)}</p>
                          </div>`;
            }
        });
        return html;
    }

    function generateStepsHTML(stepsKey) {
        const stepsString = T(stepsKey);
        if (stepsString === stepsKey) return ''; // No steps defined

        let html = `<h3 class="steps-title">${T('stepsTitle')}</h3><ol>`;
        const stepsArray = stepsString.split('\n');
        stepsArray.forEach(step => {
            const trimmedStep = step.trim();
            if (trimmedStep) {
                // Basic formatting: **bold** and remove leading list markers if present
                let formattedStep = trimmedStep
                    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                    .replace(/^\s*[\d-*]+\.?\s*/, ''); // Remove leading numbers/bullets
                html += `<li>${formattedStep}</li>`;
            }
        });
        html += `</ol>`;
        return html;
    }

    function generateNotesHTML(notesKey) {
        const notesString = T(notesKey);
        if (notesString === notesKey) return ''; // No notes defined
        return `<div class="pro-tip"><h4>${T('proTipsTitle')}</h4><p>${notesString}</p></div>`;
    }


    // --- UI Update Functions ---

    /** Displays the calculated recipe */
    function displayRecipe(recipeData) {
        if (!recipeData) {
            recipeContent.innerHTML = `<p>Error calculating recipe.</p>`; // Basic error display
            recipeDisplaySection.style.display = 'block';
            return;
        }

        const cookieName = T(`${selectedCookieType}Title`);
        const yieldNum = recipeData.yield;
        let yieldText = '';

        if (selectedCookieType === 'thick') {
            yieldText = `${yieldNum} ${yieldNum === 1 ? T('largeCookie') : T('largeCookies')}`;
        } else {
            yieldText = `${yieldNum} ${yieldNum === 1 ? T('cookie') : T('cookies')}`;
        }

        // Generate HTML parts
        const ingredientsHtml = generateIngredientsHTML(recipeData.ingredients);
        const prepTechHtml = generatePrepTechHTML(recipeData.prepTechKeys);
        const stepsHtml = generateStepsHTML(recipeData.stepsKey);
        const notesHtml = generateNotesHTML(recipeData.notesKey);

        // Assemble final HTML
        recipeContent.innerHTML = `
            <h2>${T('recipeTitle').replace('{cookieName}', cookieName)}</h2>
            <p class="recipe-yield">${T('approxYield')} ${yieldText}</p>
            ${prepTechHtml}
            ${ingredientsHtml}
            ${stepsHtml}
            ${notesHtml}
        `;

        // Show/Hide Easter Egg & Chocolate Tip based on recipe type
        stuffedEasterEgg.style.display = recipeData.isThick ? 'block' : 'none';
        chocolateRecommendation.style.display = 'block'; // Always show general chocolate tip? Or specific conditions?

        // Ensure static text within the recipe section is also translated
        updateLanguageContent(recipeDisplaySection);

        recipeDisplaySection.style.display = 'block';
        recipeDisplaySection.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }


    /** Updates text content based on the current language */
    function updateLanguageContent(parentElement = document.body) {
        const elements = parentElement.querySelectorAll('[data-lang-key]');
        elements.forEach(el => {
            const key = el.dataset.langKey;
            const translation = T(key);
            if (translation !== key) { // Only update if a translation exists
                if (el.tagName === 'INPUT' && el.placeholder) {
                    el.placeholder = translation;
                } else if (el.tagName === 'BUTTON' || el.tagName === 'OPTION') {
                     el.textContent = translation; // Use textContent for buttons/options
                }
                 else {
                    el.innerHTML = translation; // Use innerHTML for elements that might contain tags
                }
            }
        });

         // Manually update elements not using data-lang-key if needed (like dynamic buttons)
        langToggleButton.textContent = (currentLanguage === 'en') ? T('toggleArabic') : T('toggleEnglish');
        updateUnitButtonText(); // Ensure unit button text is correct

         // Update butter unit select options manually
        Array.from(butterUnitSelect.options).forEach(option => {
            const valueKey = option.value === 'grams' ? 'grams' : 'cups';
            option.textContent = T(valueKey);
        });

        // Set page direction
        htmlElement.lang = currentLanguage;
        htmlElement.dir = currentLanguage === 'ar' ? 'rtl' : 'ltr';
    }


    /** Updates the unit toggle button text and visibility */
    function updateUnitButtonText() {
        if (currentLanguage === 'ar') {
            unitToggleButton.style.display = 'none'; // Hide unit toggle in AR
            butterUnitSelect.style.display = 'inline-block'; // Always show butter unit select in AR
        } else { // English
            unitToggleButton.style.display = 'inline-block'; // Show unit toggle in EN
            unitToggleButton.textContent = T(currentUnitSystem === 'metric' ? 'unitImperial' : 'unitMetric');
            // Hide butter unit selector only if EN + Imperial (as cups are assumed)
            // Show it for EN + Metric
            butterUnitSelect.style.display = (currentUnitSystem === 'imperial') ? 'none' : 'inline-block';
            // If switching to imperial, ensure butter unit is cups
            if (currentUnitSystem === 'imperial') {
                butterUnitSelect.value = 'cups';
            } else {
                 // Optional: default to grams when switching back to metric?
                 butterUnitSelect.value = 'grams';
            }
        }
    }

    // --- Event Handlers ---

    function handleStartExperiment() {
        baseButterGrams = getBaseButterInGrams();
        if (baseButterGrams > 0) {
            cookieSelectionSection.style.display = 'block';
            cookieSelectionSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
            recipeDisplaySection.style.display = 'none'; // Hide previous recipe
            // Reset selection visuals
            cookieOptions.forEach(opt => opt.classList.remove('selected'));
            selectedCookieType = null; // Reset selected type
        } else {
             // Ensure focus if validation failed in getBaseButterInGrams
            butterAmountInput.focus();
        }
    }

    function handleCookieSelection(event) {
        // Ensure butter amount is valid before allowing selection
        if (baseButterGrams <= 0) {
            handleStartExperiment(); // Re-trigger validation/focus
            // Optionally show a more specific message
            butterWarning.textContent = "Enter butter amount first!";
            butterWarning.style.display = 'block';
            return;
        }

        const selectedOption = event.currentTarget;

        // Update selection visual
        cookieOptions.forEach(opt => opt.classList.remove('selected'));
        selectedOption.classList.add('selected');

        selectedCookieType = selectedOption.dataset.cookieType;
        if (!selectedCookieType) {
            console.error("Clicked option missing data-cookie-type attribute:", selectedOption);
            return;
        }

        const scaledRecipe = calculateScaledRecipe(baseButterGrams, selectedCookieType);
        displayRecipe(scaledRecipe);
    }

    function handleLanguageToggle() {
        currentLanguage = (currentLanguage === 'en') ? 'ar' : 'en';
        // Reset unit system to default for the new language
        currentUnitSystem = (currentLanguage === 'en') ? 'metric' : 'grams'; // AR doesn't really use the 'system' state

        updateLanguageContent(); // Update all text content FIRST
        updateUnitButtonText(); // Update button visibility/text based on new lang

        // Re-display recipe if one is active
        if (selectedCookieType && baseButterGrams > 0) {
            const scaledRecipe = calculateScaledRecipe(baseButterGrams, selectedCookieType);
            displayRecipe(scaledRecipe); // This will use the new lang/units
        }
    }

    function handleUnitToggle() {
        // Unit toggle only functions for English
        if (currentLanguage === 'en') {
            currentUnitSystem = (currentUnitSystem === 'metric') ? 'imperial' : 'metric';
            updateUnitButtonText(); // Update button text and butter unit select visibility

            // Re-display recipe with new unit formatting
            if (selectedCookieType && baseButterGrams > 0) {
                const scaledRecipe = calculateScaledRecipe(baseButterGrams, selectedCookieType);
                displayRecipe(scaledRecipe);
            }
        }
    }

    // --- Event Listeners ---
    startExperimentBtn.addEventListener('click', handleStartExperiment);

    // Hide warning on input change
    butterAmountInput.addEventListener('input', () => {
        butterWarning.style.display = 'none';
    });
    butterUnitSelect.addEventListener('change', () => {
        butterWarning.style.display = 'none';
    });

    // Add listeners to cookie options
    cookieOptions.forEach(option => {
        option.addEventListener('click', handleCookieSelection);
        // Add keydown listener for accessibility (Enter/Space)
        option.addEventListener('keydown', (e) => {
             if (e.key === 'Enter' || e.key === ' ') {
                 e.preventDefault(); // Prevent spacebar scrolling
                 handleCookieSelection(e);
             }
         });
    });

    langToggleButton.addEventListener('click', handleLanguageToggle);
    unitToggleButton.addEventListener('click', handleUnitToggle);

    // --- Initial Setup ---
    updateLanguageContent(); // Set initial text based on default language
    updateUnitButtonText(); // Set initial button state

}); // End DOMContentLoaded
